{
    "sourceFile": "pages/MintNFTs2.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1731244188450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731246301127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,13 +171,13 @@\n   };\n \n   return (\n     <main>\n-      <div className={styles.wallet}>\n+      <div className={'wallet'}>\n         <WalletMultiButtonDynamic />\n       </div>\n \n-      <div className={styles.center}>\n+      <div className={'center'}>\n         <PageContent />\n       </div>\n \n       <Modal\n"
                }
            ],
            "date": 1731244188450,
            "name": "Commit-0",
            "content": "import {\n  PublicKey,\n  publicKey,\n  Umi,\n} from \"@metaplex-foundation/umi\";\nimport { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\nimport dynamic from \"next/dynamic\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useUmi } from \"./utils/useUmi\";\nimport { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\";\nimport { guardChecker } from \"./utils/checkAllowed\";\nimport { Button, Modal, Typography, Spin, Card, Row, Col } from 'antd';\nimport { ButtonList } from \"./components/mintButton\";\nimport { ShowNft } from \"./components/showNft\";\nimport { InitializeModal } from \"./components/initializeModal\";\nimport { image, headerText } from \"./settings\";\nimport { useSolanaTime } from \"./utils/SolanaTimeContext\";\n\nconst { Title, Text } = Typography;\n\nconst WalletMultiButtonDynamic = dynamic(\n  async () =>\n    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\n  { ssr: false }\n);\n\nconst useCandyMachine = (\n  umi,\n  candyMachineId,\n  checkEligibility,\n  setCheckEligibility,\n  firstRun,\n  setFirstRun\n) => {\n  const [candyMachine, setCandyMachine] = useState();\n  const [candyGuard, setCandyGuard] = useState();\n  \n  useEffect(() => {\n    (async () => {\n      if (checkEligibility) {\n        if (!candyMachineId) {\n          console.error(\"No candy machine in .env!\");\n          return;\n        }\n\n        let candyMachine;\n        try {\n          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\n          // Verify CM Version\n          if (candyMachine.version !== AccountVersion.V2) {\n            console.error(\"Wrong candy machine account version!\");\n            return;\n          }\n        } catch (e) {\n          console.error(e);\n          return;\n        }\n        setCandyMachine(candyMachine);\n        if (!candyMachine) {\n          return;\n        }\n        let candyGuard;\n        try {\n          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\n        } catch (e) {\n          console.error(e);\n        }\n        if (!candyGuard) {\n          return;\n        }\n        setCandyGuard(candyGuard);\n        if (firstRun) {\n          setFirstRun(false);\n        }\n      }\n    })();\n  }, [umi, checkEligibility]);\n\n  return { candyMachine, candyGuard };\n};\n\nconst MintNFTs2 = () => {\n  const umi = useUmi();\n  const solanaTime = useSolanaTime();\n  const [mintsCreated, setMintsCreated] = useState();\n  const [isAllowed, setIsAllowed] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [ownedTokens, setOwnedTokens] = useState();\n  const [guards, setGuards] = useState([\n    { label: \"startDefault\", allowed: false, maxAmount: 0 },\n  ]);\n  const [firstRun, setFirstRun] = useState(true);\n  const [checkEligibility, setCheckEligibility] = useState(true);\n  const [isShowNftOpen, setShowNftOpen] = useState(false);\n  const [isInitializerOpen, setInitializerOpen] = useState(false);\n\n  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n    console.error(\"No candy machine in .env!\");\n  }\n\n  const candyMachineId = useMemo(() => {\n    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\n    } else {\n      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!`);\n      return publicKey(\"11111111111111111111111111111111\");\n    }\n  }, []);\n\n  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\n\n  useEffect(() => {\n    const checkEligibilityFunc = async () => {\n      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\n        return;\n      }\n      setFirstRun(false);\n      \n      const { guardReturn, ownedTokens } = await guardChecker(\n        umi, candyGuard, candyMachine, solanaTime\n      );\n\n      setOwnedTokens(ownedTokens);\n      setGuards(guardReturn);\n      setIsAllowed(false);\n\n      let allowed = false;\n      for (const guard of guardReturn) {\n        if (guard.allowed) {\n          allowed = true;\n          break;\n        }\n      }\n\n      setIsAllowed(allowed);\n      setLoading(false);\n    };\n\n    checkEligibilityFunc();\n  }, [umi, checkEligibility, firstRun]);\n\n  const PageContent = () => {\n    return (\n      <Card>\n        <Title level={3}>{headerText}</Title>\n        {loading ? (\n          <Spin />\n        ) : (\n          <Row justify=\"space-between\" align=\"middle\">\n            <Col>\n              <Text>Available NFTs: {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)}</Text>\n            </Col>\n            <Col>\n              <ButtonList\n                guardList={guards}\n                candyMachine={candyMachine}\n                candyGuard={candyGuard}\n                umi={umi}\n                ownedTokens={ownedTokens}\n                setGuardList={setGuards}\n                mintsCreated={mintsCreated}\n                setMintsCreated={setMintsCreated}\n                onOpen={() => setShowNftOpen(true)}\n                setCheckEligibility={setCheckEligibility}\n              />\n            </Col>\n          </Row>\n        )}\n      </Card>\n    );\n  };\n\n  return (\n    <main>\n      <div className={styles.wallet}>\n        <WalletMultiButtonDynamic />\n      </div>\n\n      <div className={styles.center}>\n        <PageContent />\n      </div>\n\n      <Modal\n        title=\"Your minted NFT:\"\n        visible={isShowNftOpen}\n        onCancel={() => setShowNftOpen(false)}\n        footer={null}\n      >\n        <ShowNft nfts={mintsCreated} />\n      </Modal>\n\n      <Modal\n        title=\"Initializer\"\n        visible={isInitializerOpen}\n        onCancel={() => setInitializerOpen(false)}\n        footer={null}\n      >\n        <InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n      </Modal>\n    </main>\n  );\n};\n\nexport default MintNFTs2;"
        }
    ]
}