{
    "sourceFile": "pages/MintNFTs2js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1731230664270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731230863549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\n import dynamic from \"next/dynamic\";\n import { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\n import { useUmi } from \"../utils/useUmi\";\n-import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\"\n+import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\";\n import styles from \"../styles/Home.module.css\";\n import { guardChecker } from \"../utils/checkAllowed\";\n import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\n import { ButtonList } from \"../components/mintButton\";\n@@ -35,9 +35,8 @@\n   const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n   const [candyGuard, setCandyGuard] = useState<CandyGuard>();\n   const toast = useToast();\n \n-\n   useEffect(() => {\n     (async () => {\n       if (checkEligibility) {\n         if (!candyMachineId) {\n@@ -57,14 +56,14 @@\n \n         let candyMachine;\n         try {\n           candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\n-          //verify CM Version\n-          if (candyMachine.version != AccountVersion.V2){\n+          // Verify CM Version\n+          if (candyMachine.version !== AccountVersion.V2) {\n             toast({\n               id: \"wrong-account-version\",\n               title: \"Wrong candy machine account version!\",\n-              description: \"Please use latest sugar to create your candy machine. Need Account Version 2!\",\n+              description: \"Please use the latest sugar to create your candy machine. Need Account Version 2!\",\n               status: \"error\",\n               duration: 999999,\n               isClosable: true,\n             });\n@@ -102,22 +101,19 @@\n         if (!candyGuard) {\n           return;\n         }\n         setCandyGuard(candyGuard);\n-        if (firstRun){\n-          setfirstRun(false)\n+        if (firstRun) {\n+          setfirstRun(false);\n         }\n       }\n     })();\n   }, [umi, checkEligibility]);\n \n   return { candyMachine, candyGuard };\n-\n-\n };\n \n-\n-export default function Home() {\n+const Home = () => {\n   const umi = useUmi();\n   const solanaTime = useSolanaTime();\n   const toast = useToast();\n   const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\n@@ -131,22 +127,22 @@\n   ]);\n   const [firstRun, setFirstRun] = useState(true);\n   const [checkEligibility, setCheckEligibility] = useState<boolean>(true);\n \n-\n   if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n-    console.error(\"No candy machine in .env!\")\n+    console.error(\"No candy machine in .env!\");\n     if (!toast.isActive('no-cm')) {\n       toast({\n         id: 'no-cm',\n         title: 'No candy machine in .env!',\n         description: \"Add your candy machine address to the .env file!\",\n         status: 'error',\n         duration: 999999,\n         isClosable: true,\n-      })\n+      });\n     }\n   }\n+\n   const candyMachineId: PublicKey = useMemo(() => {\n     if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n       return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\n     } else {\n@@ -157,13 +153,13 @@\n         description: \"Add your candy machine address to the .env file!\",\n         status: 'error',\n         duration: 999999,\n         isClosable: true,\n-      })\n+      });\n       return publicKey(\"11111111111111111111111111111111\");\n     }\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n+\n   const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\n \n   useEffect(() => {\n     const checkEligibilityFunc = async () => {\n@@ -192,21 +188,19 @@\n       setLoading(false);\n     };\n \n     checkEligibilityFunc();\n-    // On purpose: not check for candyMachine, candyGuard, solanaTime\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [umi, checkEligibility, firstRun]);\n \n   const PageContent = () => {\n     return (\n       <>\n         <style jsx global>\n           {`\n-      body {\n-          background: #2d3748; \n-       }\n-   `}\n+            body {\n+              background: #2d3748; \n+            }\n+          `}\n         </style>\n         <Card>\n           <CardHeader>\n             <Flex minWidth='max-content' alignItems='center' gap='2'>\n@@ -214,10 +208,10 @@\n                 <Heading size='md'>{headerText}</Heading>\n               </Box>\n               {loading ? (<></>) : (\n                 <Flex justifyContent=\"flex-end\" marginLeft=\"auto\">\n-                  <Box background={\"teal.100\"} borderRadius={\"5px\"} minWidth={\"50px\"} minHeight={\"50px\"} p={2} >\n-                    <VStack >\n+                  <Box background={\"teal.100\"} borderRadius={\"5px\"} minWidth={\"50px\"} minHeight={\"50px\"} p={2}>\n+                    <VStack>\n                       <Text fontSize={\"sm\"}>Available NFTs:</Text>\n                       <Text fontWeight={\"semibold\"}>{Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)}</Text>\n                     </VStack>\n                   </Box>\n@@ -227,12 +221,9 @@\n           </CardHeader>\n \n           <CardBody>\n             <Center>\n-              <Box\n-                rounded={'lg'}\n-                mt={-12}\n-                pos={'relative'}>\n+              <Box rounded={'lg'} mt={-12} pos={'relative'}>\n                 <Image\n                   rounded={'lg'}\n                   height={230}\n                   objectFit={'cover'}\n@@ -264,9 +255,9 @@\n                 />\n               )}\n             </Stack>\n           </CardBody>\n-        </Card >\n+        </Card>\n         {umi.identity.publicKey === candyMachine?.authority ? (\n           <>\n             <Center>\n               <Button backgroundColor={\"red.200\"} marginTop={\"10\"} onClick={onInitializerOpen}>Initialize Everything!</Button>\n@@ -276,18 +267,17 @@\n               <ModalContent maxW=\"600px\">\n                 <ModalHeader>Initializer</ModalHeader>\n                 <ModalCloseButton />\n                 <ModalBody>\n-                  < InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n+                  <InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n                 </ModalBody>\n               </ModalContent>\n             </Modal>\n+          </>\n+        ) : (\n+          <></>\n+        )}\n \n-          </>)\n-          :\n-          (<></>)\n-        }\n-\n         <Modal isOpen={isShowNftOpen} onClose={onShowNftClose}>\n           <ModalOverlay />\n           <ModalContent>\n             <ModalHeader>Your minted NFT:</ModalHeader>\n@@ -311,5 +301,7 @@\n         <PageContent key=\"content\" />\n       </div>\n     </main>\n   );\n-}\n+};\n+\n+export default Home;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731231187053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,306 @@\n+import {\n+  PublicKey,\n+  publicKey,\n+  Umi,\n+} from \"@metaplex-foundation/umi\";\n+import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\n+import dynamic from \"next/dynamic\";\n+import { useEffect, useMemo, useState } from \"react\";\n+import { useUmi } from \"../utils/useUmi\";\n+import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\";\n+import styles from \"../styles/Home.module.css\";\n+import { guardChecker } from \"../utils/checkAllowed\";\n+import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\n+import { ButtonList } from \"../components/mintButton\";\n+import { ShowNft } from \"../components/showNft\";\n+import { InitializeModal } from \"../components/initializeModal\";\n+import { image, headerText } from \"../settings\";\n+import { useSolanaTime } from \"@/utils/SolanaTimeContext\";\n+\n+const WalletMultiButtonDynamic = dynamic(\n+  async () =>\n+    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\n+  { ssr: false }\n+);\n+\n+const useCandyMachine = (\n+  umi,\n+  candyMachineId,\n+  checkEligibility,\n+  setCheckEligibility,\n+  firstRun,\n+  setFirstRun\n+) => {\n+  const [candyMachine, setCandyMachine] = useState();\n+  const [candyGuard, setCandyGuard] = useState();\n+  const toast = useToast();\n+\n+  useEffect(() => {\n+    (async () => {\n+      if (checkEligibility) {\n+        if (!candyMachineId) {\n+          console.error(\"No candy machine in .env!\");\n+          if (!toast.isActive(\"no-cm\")) {\n+            toast({\n+              id: \"no-cm\",\n+              title: \"No candy machine in .env!\",\n+              description: \"Add your candy machine address to the .env file!\",\n+              status: \"error\",\n+              duration: 999999,\n+              isClosable: true,\n+            });\n+          }\n+          return;\n+        }\n+\n+        let candyMachine;\n+        try {\n+          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\n+          // Verify CM Version\n+          if (candyMachine.version !== AccountVersion.V2) {\n+            toast({\n+              id: \"wrong-account-version\",\n+              title: \"Wrong candy machine account version!\",\n+              description: \"Please use the latest sugar to create your candy machine. Need Account Version 2!\",\n+              status: \"error\",\n+              duration: 999999,\n+              isClosable: true,\n+            });\n+            return;\n+          }\n+        } catch (e) {\n+          console.error(e);\n+          toast({\n+            id: \"no-cm-found\",\n+            title: \"The CM from .env is invalid\",\n+            description: \"Are you using the correct environment?\",\n+            status: \"error\",\n+            duration: 999999,\n+            isClosable: true,\n+          });\n+        }\n+        setCandyMachine(candyMachine);\n+        if (!candyMachine) {\n+          return;\n+        }\n+        let candyGuard;\n+        try {\n+          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\n+        } catch (e) {\n+          console.error(e);\n+          toast({\n+            id: \"no-guard-found\",\n+            title: \"No Candy Guard found!\",\n+            description: \"Do you have one assigned?\",\n+            status: \"error\",\n+            duration: 999999,\n+            isClosable: true,\n+          });\n+        }\n+        if (!candyGuard) {\n+          return;\n+        }\n+        setCandyGuard(candyGuard);\n+        if (firstRun) {\n+          setFirstRun(false);\n+        }\n+      }\n+    })();\n+  }, [umi, checkEligibility]);\n+\n+  return { candyMachine, candyGuard };\n+};\n+\n+const Home = () => {\n+  const umi = useUmi();\n+  const solanaTime = useSolanaTime();\n+  const toast = useToast();\n+  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\n+  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\n+  const [mintsCreated, setMintsCreated] = useState();\n+  const [isAllowed, setIsAllowed] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const [ownedTokens, setOwnedTokens] = useState();\n+  const [guards, setGuards] = useState([\n+    { label: \"startDefault\", allowed: false, maxAmount: 0 },\n+  ]);\n+  const [firstRun, setFirstRun] = useState(true);\n+  const [checkEligibility, setCheckEligibility] = useState(true);\n+\n+  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n+    console.error(\"No candy machine in .env!\");\n+    if (!toast.isActive('no-cm')) {\n+      toast({\n+        id: 'no-cm',\n+        title: 'No candy machine in .env!',\n+        description: \"Add your candy machine address to the .env file!\",\n+        status: 'error',\n+        duration: 999999,\n+        isClosable: true,\n+      });\n+    }\n+  }\n+\n+  const candyMachineId = useMemo(() => {\n+    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n+      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\n+    } else {\n+      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!`);\n+      toast({\n+        id: 'no-cm',\n+        title: 'No candy machine in .env!',\n+        description: \"Add your candy machine address to the .env file!\",\n+        status: 'error',\n+        duration: 999999,\n+        isClosable: true,\n+      });\n+      return publicKey(\"11111111111111111111111111111111\");\n+    }\n+  }, []);\n+\n+  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\n+\n+  useEffect(() => {\n+    const checkEligibilityFunc = async () => {\n+      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\n+        return;\n+      }\n+      setFirstRun(false);\n+      \n+      const { guardReturn, ownedTokens } = await guardChecker(\n+        umi, candyGuard, candyMachine, solanaTime\n+      );\n+\n+      setOwnedTokens(ownedTokens);\n+      setGuards(guardReturn);\n+      setIsAllowed(false);\n+\n+      let allowed = false;\n+      for (const guard of guardReturn) {\n+        if (guard.allowed) {\n+          allowed = true;\n+          break;\n+        }\n+      }\n+\n+      setIsAllowed(allowed);\n+      setLoading(false);\n+    };\n+\n+    checkEligibilityFunc();\n+  }, [umi, checkEligibility, firstRun]);\n+\n+  const PageContent = () => {\n+    return (\n+      <>\n+        <style jsx global>\n+          {`\n+            body {\n+              background: #2d3748; \n+            }\n+          `}\n+        </style>\n+        <Card>\n+          <CardHeader>\n+            <Flex minWidth='max-content' alignItems='center' gap='2'>\n+              <Box>\n+                <Heading size='md'>{headerText}</Heading>\n+              </Box>\n+              {loading ? (<></>) : (\n+                <Flex justifyContent=\"flex-end\" marginLeft=\"auto\">\n+                  <Box background={\"teal.100\"} borderRadius={\"5px\"} minWidth={\"50px\"} minHeight={\"50px\"} p={2}>\n+                    <VStack>\n+                      <Text fontSize={\"sm\"}>Available NFTs:</Text>\n+                      <Text fontWeight={\"semibold\"}>{Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)}</Text>\n+                    </VStack>\n+                  </Box>\n+                </Flex>\n+              )}\n+            </Flex>\n+          </CardHeader>\n+\n+          <CardBody>\n+            <Center>\n+              <Box rounded={'lg'} mt={-12} pos={'relative'}>\n+                <Image\n+                  rounded={'lg'}\n+                  height={230}\n+                  objectFit={'cover'}\n+                  alt={\"project Image\"}\n+                  src={image}\n+                />\n+              </Box>\n+            </Center>\n+            <Stack divider={<StackDivider />} spacing='8'>\n+              {loading ? (\n+                <div>\n+                  <Divider my=\"10px\" />\n+                  <Skeleton height=\"30px\" my=\"10px\" />\n+                  <Skeleton height=\"30px\" my=\"10px\" />\n+                  <Skeleton height=\"30px\" my=\"10px\" />\n+                </div>\n+              ) : (\n+                <ButtonList\n+                  guardList={guards}\n+                  candyMachine={candyMachine}\n+                  candyGuard={candyGuard}\n+                  umi={umi}\n+                  ownedTokens={ownedTokens}\n+                  setGuardList={setGuards}\n+                  mintsCreated={mintsCreated}\n+                  setMintsCreated={setMintsCreated}\n+                  onOpen={onShowNftOpen}\n+                  setCheckEligibility={setCheckEligibility}\n+                />\n+              )}\n+            </Stack>\n+          </CardBody>\n+        </Card>\n+        {umi.identity.publicKey === candyMachine?.authority ? (\n+          <>\n+            <Center>\n+              <Button backgroundColor={\"red.200\"} marginTop={\"10\"} onClick={onInitializerOpen}>Initialize Everything!</Button>\n+            </Center>\n+            <Modal isOpen={isInitializerOpen} onClose={onInitializerClose}>\n+              <ModalOverlay />\n+              <ModalContent maxW=\"600px\">\n+                <ModalHeader>Initializer</ModalHeader>\n+                <ModalCloseButton />\n+                <ModalBody>\n+                  <InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n+                </ModalBody>\n+              </ModalContent>\n+            </Modal>\n+          </>\n+        ) : (\n+          <></>\n+        )}\n+\n+        <Modal isOpen={isShowNftOpen} onClose={onShowNftClose}>\n+          <ModalOverlay />\n+          <ModalContent>\n+            <ModalHeader>Your minted NFT:</ModalHeader>\n+            <ModalCloseButton />\n+            <ModalBody>\n+              <ShowNft nfts={mintsCreated} />\n+            </ModalBody>\n+          </ModalContent>\n+        </Modal>\n+      </>\n+    );\n+  };\n+\n+  return (\n+    <main>\n+      <div className={styles.wallet}>\n+        <WalletMultiButtonDynamic />\n+      </div>\n+\n+      <div className={styles.center}>\n+        <PageContent key=\"content\" />\n+      </div>\n+    </main>\n+  );\n+};\n+\n+export default Home;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731231259250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,306 @@\n+import {\n+  PublicKey,\n+  publicKey,\n+  Umi,\n+} from \"@metaplex-foundation/umi\";\n+import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\n+import dynamic from \"next/dynamic\";\n+import { useEffect, useMemo, useState } from \"react\";\n+import { useUmi } from \"../utils/useUmi\";\n+import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\";\n+import styles from \"../styles/Home.module.css\";\n+import { guardChecker } from \"../utils/checkAllowed\";\n+import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\n+import { ButtonList } from \"./components/mintButton\";\n+import { ShowNft } from \"../components/showNft\";\n+import { InitializeModal } from \"../components/initializeModal\";\n+import { image, headerText } from \"../settings\";\n+import { useSolanaTime } from \"@/utils/SolanaTimeContext\";\n+\n+const WalletMultiButtonDynamic = dynamic(\n+  async () =>\n+    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\n+  { ssr: false }\n+);\n+\n+const useCandyMachine = (\n+  umi,\n+  candyMachineId,\n+  checkEligibility,\n+  setCheckEligibility,\n+  firstRun,\n+  setFirstRun\n+) => {\n+  const [candyMachine, setCandyMachine] = useState();\n+  const [candyGuard, setCandyGuard] = useState();\n+  const toast = useToast();\n+\n+  useEffect(() => {\n+    (async () => {\n+      if (checkEligibility) {\n+        if (!candyMachineId) {\n+          console.error(\"No candy machine in .env!\");\n+          if (!toast.isActive(\"no-cm\")) {\n+            toast({\n+              id: \"no-cm\",\n+              title: \"No candy machine in .env!\",\n+              description: \"Add your candy machine address to the .env file!\",\n+              status: \"error\",\n+              duration: 999999,\n+              isClosable: true,\n+            });\n+          }\n+          return;\n+        }\n+\n+        let candyMachine;\n+        try {\n+          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\n+          // Verify CM Version\n+          if (candyMachine.version !== AccountVersion.V2) {\n+            toast({\n+              id: \"wrong-account-version\",\n+              title: \"Wrong candy machine account version!\",\n+              description: \"Please use the latest sugar to create your candy machine. Need Account Version 2!\",\n+              status: \"error\",\n+              duration: 999999,\n+              isClosable: true,\n+            });\n+            return;\n+          }\n+        } catch (e) {\n+          console.error(e);\n+          toast({\n+            id: \"no-cm-found\",\n+            title: \"The CM from .env is invalid\",\n+            description: \"Are you using the correct environment?\",\n+            status: \"error\",\n+            duration: 999999,\n+            isClosable: true,\n+          });\n+        }\n+        setCandyMachine(candyMachine);\n+        if (!candyMachine) {\n+          return;\n+        }\n+        let candyGuard;\n+        try {\n+          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\n+        } catch (e) {\n+          console.error(e);\n+          toast({\n+            id: \"no-guard-found\",\n+            title: \"No Candy Guard found!\",\n+            description: \"Do you have one assigned?\",\n+            status: \"error\",\n+            duration: 999999,\n+            isClosable: true,\n+          });\n+        }\n+        if (!candyGuard) {\n+          return;\n+        }\n+        setCandyGuard(candyGuard);\n+        if (firstRun) {\n+          setFirstRun(false);\n+        }\n+      }\n+    })();\n+  }, [umi, checkEligibility]);\n+\n+  return { candyMachine, candyGuard };\n+};\n+\n+const Home = () => {\n+  const umi = useUmi();\n+  const solanaTime = useSolanaTime();\n+  const toast = useToast();\n+  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\n+  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\n+  const [mintsCreated, setMintsCreated] = useState();\n+  const [isAllowed, setIsAllowed] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const [ownedTokens, setOwnedTokens] = useState();\n+  const [guards, setGuards] = useState([\n+    { label: \"startDefault\", allowed: false, maxAmount: 0 },\n+  ]);\n+  const [firstRun, setFirstRun] = useState(true);\n+  const [checkEligibility, setCheckEligibility] = useState(true);\n+\n+  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n+    console.error(\"No candy machine in .env!\");\n+    if (!toast.isActive('no-cm')) {\n+      toast({\n+        id: 'no-cm',\n+        title: 'No candy machine in .env!',\n+        description: \"Add your candy machine address to the .env file!\",\n+        status: 'error',\n+        duration: 999999,\n+        isClosable: true,\n+      });\n+    }\n+  }\n+\n+  const candyMachineId = useMemo(() => {\n+    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n+      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\n+    } else {\n+      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!`);\n+      toast({\n+        id: 'no-cm',\n+        title: 'No candy machine in .env!',\n+        description: \"Add your candy machine address to the .env file!\",\n+        status: 'error',\n+        duration: 999999,\n+        isClosable: true,\n+      });\n+      return publicKey(\"11111111111111111111111111111111\");\n+    }\n+  }, []);\n+\n+  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\n+\n+  useEffect(() => {\n+    const checkEligibilityFunc = async () => {\n+      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\n+        return;\n+      }\n+      setFirstRun(false);\n+      \n+      const { guardReturn, ownedTokens } = await guardChecker(\n+        umi, candyGuard, candyMachine, solanaTime\n+      );\n+\n+      setOwnedTokens(ownedTokens);\n+      setGuards(guardReturn);\n+      setIsAllowed(false);\n+\n+      let allowed = false;\n+      for (const guard of guardReturn) {\n+        if (guard.allowed) {\n+          allowed = true;\n+          break;\n+        }\n+      }\n+\n+      setIsAllowed(allowed);\n+      setLoading(false);\n+    };\n+\n+    checkEligibilityFunc();\n+  }, [umi, checkEligibility, firstRun]);\n+\n+  const PageContent = () => {\n+    return (\n+      <>\n+        <style jsx global>\n+          {`\n+            body {\n+              background: #2d3748; \n+            }\n+          `}\n+        </style>\n+        <Card>\n+          <CardHeader>\n+            <Flex minWidth='max-content' alignItems='center' gap='2'>\n+              <Box>\n+                <Heading size='md'>{headerText}</Heading>\n+              </Box>\n+              {loading ? (<></>) : (\n+                <Flex justifyContent=\"flex-end\" marginLeft=\"auto\">\n+                  <Box background={\"teal.100\"} borderRadius={\"5px\"} minWidth={\"50px\"} minHeight={\"50px\"} p={2}>\n+                    <VStack>\n+                      <Text fontSize={\"sm\"}>Available NFTs:</Text>\n+                      <Text fontWeight={\"semibold\"}>{Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)}</Text>\n+                    </VStack>\n+                  </Box>\n+                </Flex>\n+              )}\n+            </Flex>\n+          </CardHeader>\n+\n+          <CardBody>\n+            <Center>\n+              <Box rounded={'lg'} mt={-12} pos={'relative'}>\n+                <Image\n+                  rounded={'lg'}\n+                  height={230}\n+                  objectFit={'cover'}\n+                  alt={\"project Image\"}\n+                  src={image}\n+                />\n+              </Box>\n+            </Center>\n+            <Stack divider={<StackDivider />} spacing='8'>\n+              {loading ? (\n+                <div>\n+                  <Divider my=\"10px\" />\n+                  <Skeleton height=\"30px\" my=\"10px\" />\n+                  <Skeleton height=\"30px\" my=\"10px\" />\n+                  <Skeleton height=\"30px\" my=\"10px\" />\n+                </div>\n+              ) : (\n+                <ButtonList\n+                  guardList={guards}\n+                  candyMachine={candyMachine}\n+                  candyGuard={candyGuard}\n+                  umi={umi}\n+                  ownedTokens={ownedTokens}\n+                  setGuardList={setGuards}\n+                  mintsCreated={mintsCreated}\n+                  setMintsCreated={setMintsCreated}\n+                  onOpen={onShowNftOpen}\n+                  setCheckEligibility={setCheckEligibility}\n+                />\n+              )}\n+            </Stack>\n+          </CardBody>\n+        </Card>\n+        {umi.identity.publicKey === candyMachine?.authority ? (\n+          <>\n+            <Center>\n+              <Button backgroundColor={\"red.200\"} marginTop={\"10\"} onClick={onInitializerOpen}>Initialize Everything!</Button>\n+            </Center>\n+            <Modal isOpen={isInitializerOpen} onClose={onInitializerClose}>\n+              <ModalOverlay />\n+              <ModalContent maxW=\"600px\">\n+                <ModalHeader>Initializer</ModalHeader>\n+                <ModalCloseButton />\n+                <ModalBody>\n+                  <InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n+                </ModalBody>\n+              </ModalContent>\n+            </Modal>\n+          </>\n+        ) : (\n+          <></>\n+        )}\n+\n+        <Modal isOpen={isShowNftOpen} onClose={onShowNftClose}>\n+          <ModalOverlay />\n+          <ModalContent>\n+            <ModalHeader>Your minted NFT:</ModalHeader>\n+            <ModalCloseButton />\n+            <ModalBody>\n+              <ShowNft nfts={mintsCreated} />\n+            </ModalBody>\n+          </ModalContent>\n+        </Modal>\n+      </>\n+    );\n+  };\n+\n+  return (\n+    <main>\n+      <div className={styles.wallet}>\n+        <WalletMultiButtonDynamic />\n+      </div>\n+\n+      <div className={styles.center}>\n+        <PageContent key=\"content\" />\n+      </div>\n+    </main>\n+  );\n+};\n+\n+export default Home;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731231270693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,17 +5,17 @@\n } from \"@metaplex-foundation/umi\";\n import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\n import dynamic from \"next/dynamic\";\n import { useEffect, useMemo, useState } from \"react\";\n-import { useUmi } from \"../utils/useUmi\";\n+import { useUmi } from \"./utils/useUmi\";\n import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\";\n-import styles from \"../styles/Home.module.css\";\n-import { guardChecker } from \"../utils/checkAllowed\";\n+import styles from \"./styles/Home.module.css\";\n+import { guardChecker } from \"./utils/checkAllowed\";\n import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\n import { ButtonList } from \"./components/mintButton\";\n-import { ShowNft } from \"../components/showNft\";\n-import { InitializeModal } from \"../components/initializeModal\";\n-import { image, headerText } from \"../settings\";\n+import { ShowNft } from \"./components/showNft\";\n+import { InitializeModal } from \"./components/initializeModal\";\n+import { image, headerText } from \"./settings\";\n import { useSolanaTime } from \"@/utils/SolanaTimeContext\";\n \n const WalletMultiButtonDynamic = dynamic(\n   async () =>\n@@ -302,618 +302,5 @@\n     </main>\n   );\n };\n \n-export default Home;\n-import {\n-  PublicKey,\n-  publicKey,\n-  Umi,\n-} from \"@metaplex-foundation/umi\";\n-import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\n-import dynamic from \"next/dynamic\";\n-import { useEffect, useMemo, useState } from \"react\";\n-import { useUmi } from \"../utils/useUmi\";\n-import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\";\n-import styles from \"../styles/Home.module.css\";\n-import { guardChecker } from \"../utils/checkAllowed\";\n-import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\n-import { ButtonList } from \"../components/mintButton\";\n-import { ShowNft } from \"../components/showNft\";\n-import { InitializeModal } from \"../components/initializeModal\";\n-import { image, headerText } from \"../settings\";\n-import { useSolanaTime } from \"@/utils/SolanaTimeContext\";\n-\n-const WalletMultiButtonDynamic = dynamic(\n-  async () =>\n-    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\n-  { ssr: false }\n-);\n-\n-const useCandyMachine = (\n-  umi,\n-  candyMachineId,\n-  checkEligibility,\n-  setCheckEligibility,\n-  firstRun,\n-  setFirstRun\n-) => {\n-  const [candyMachine, setCandyMachine] = useState();\n-  const [candyGuard, setCandyGuard] = useState();\n-  const toast = useToast();\n-\n-  useEffect(() => {\n-    (async () => {\n-      if (checkEligibility) {\n-        if (!candyMachineId) {\n-          console.error(\"No candy machine in .env!\");\n-          if (!toast.isActive(\"no-cm\")) {\n-            toast({\n-              id: \"no-cm\",\n-              title: \"No candy machine in .env!\",\n-              description: \"Add your candy machine address to the .env file!\",\n-              status: \"error\",\n-              duration: 999999,\n-              isClosable: true,\n-            });\n-          }\n-          return;\n-        }\n-\n-        let candyMachine;\n-        try {\n-          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\n-          // Verify CM Version\n-          if (candyMachine.version !== AccountVersion.V2) {\n-            toast({\n-              id: \"wrong-account-version\",\n-              title: \"Wrong candy machine account version!\",\n-              description: \"Please use the latest sugar to create your candy machine. Need Account Version 2!\",\n-              status: \"error\",\n-              duration: 999999,\n-              isClosable: true,\n-            });\n-            return;\n-          }\n-        } catch (e) {\n-          console.error(e);\n-          toast({\n-            id: \"no-cm-found\",\n-            title: \"The CM from .env is invalid\",\n-            description: \"Are you using the correct environment?\",\n-            status: \"error\",\n-            duration: 999999,\n-            isClosable: true,\n-          });\n-        }\n-        setCandyMachine(candyMachine);\n-        if (!candyMachine) {\n-          return;\n-        }\n-        let candyGuard;\n-        try {\n-          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\n-        } catch (e) {\n-          console.error(e);\n-          toast({\n-            id: \"no-guard-found\",\n-            title: \"No Candy Guard found!\",\n-            description: \"Do you have one assigned?\",\n-            status: \"error\",\n-            duration: 999999,\n-            isClosable: true,\n-          });\n-        }\n-        if (!candyGuard) {\n-          return;\n-        }\n-        setCandyGuard(candyGuard);\n-        if (firstRun) {\n-          setFirstRun(false);\n-        }\n-      }\n-    })();\n-  }, [umi, checkEligibility]);\n-\n-  return { candyMachine, candyGuard };\n-};\n-\n-const Home = () => {\n-  const umi = useUmi();\n-  const solanaTime = useSolanaTime();\n-  const toast = useToast();\n-  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\n-  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\n-  const [mintsCreated, setMintsCreated] = useState();\n-  const [isAllowed, setIsAllowed] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const [ownedTokens, setOwnedTokens] = useState();\n-  const [guards, setGuards] = useState([\n-    { label: \"startDefault\", allowed: false, maxAmount: 0 },\n-  ]);\n-  const [firstRun, setFirstRun] = useState(true);\n-  const [checkEligibility, setCheckEligibility] = useState(true);\n-\n-  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n-    console.error(\"No candy machine in .env!\");\n-    if (!toast.isActive('no-cm')) {\n-      toast({\n-        id: 'no-cm',\n-        title: 'No candy machine in .env!',\n-        description: \"Add your candy machine address to the .env file!\",\n-        status: 'error',\n-        duration: 999999,\n-        isClosable: true,\n-      });\n-    }\n-  }\n-\n-  const candyMachineId = useMemo(() => {\n-    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n-      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\n-    } else {\n-      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!`);\n-      toast({\n-        id: 'no-cm',\n-        title: 'No candy machine in .env!',\n-        description: \"Add your candy machine address to the .env file!\",\n-        status: 'error',\n-        duration: 999999,\n-        isClosable: true,\n-      });\n-      return publicKey(\"11111111111111111111111111111111\");\n-    }\n-  }, []);\n-\n-  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\n-\n-  useEffect(() => {\n-    const checkEligibilityFunc = async () => {\n-      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\n-        return;\n-      }\n-      setFirstRun(false);\n-      \n-      const { guardReturn, ownedTokens } = await guardChecker(\n-        umi, candyGuard, candyMachine, solanaTime\n-      );\n-\n-      setOwnedTokens(ownedTokens);\n-      setGuards(guardReturn);\n-      setIsAllowed(false);\n-\n-      let allowed = false;\n-      for (const guard of guardReturn) {\n-        if (guard.allowed) {\n-          allowed = true;\n-          break;\n-        }\n-      }\n-\n-      setIsAllowed(allowed);\n-      setLoading(false);\n-    };\n-\n-    checkEligibilityFunc();\n-  }, [umi, checkEligibility, firstRun]);\n-\n-  const PageContent = () => {\n-    return (\n-      <>\n-        <style jsx global>\n-          {`\n-            body {\n-              background: #2d3748; \n-            }\n-          `}\n-        </style>\n-        <Card>\n-          <CardHeader>\n-            <Flex minWidth='max-content' alignItems='center' gap='2'>\n-              <Box>\n-                <Heading size='md'>{headerText}</Heading>\n-              </Box>\n-              {loading ? (<></>) : (\n-                <Flex justifyContent=\"flex-end\" marginLeft=\"auto\">\n-                  <Box background={\"teal.100\"} borderRadius={\"5px\"} minWidth={\"50px\"} minHeight={\"50px\"} p={2}>\n-                    <VStack>\n-                      <Text fontSize={\"sm\"}>Available NFTs:</Text>\n-                      <Text fontWeight={\"semibold\"}>{Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)}</Text>\n-                    </VStack>\n-                  </Box>\n-                </Flex>\n-              )}\n-            </Flex>\n-          </CardHeader>\n-\n-          <CardBody>\n-            <Center>\n-              <Box rounded={'lg'} mt={-12} pos={'relative'}>\n-                <Image\n-                  rounded={'lg'}\n-                  height={230}\n-                  objectFit={'cover'}\n-                  alt={\"project Image\"}\n-                  src={image}\n-                />\n-              </Box>\n-            </Center>\n-            <Stack divider={<StackDivider />} spacing='8'>\n-              {loading ? (\n-                <div>\n-                  <Divider my=\"10px\" />\n-                  <Skeleton height=\"30px\" my=\"10px\" />\n-                  <Skeleton height=\"30px\" my=\"10px\" />\n-                  <Skeleton height=\"30px\" my=\"10px\" />\n-                </div>\n-              ) : (\n-                <ButtonList\n-                  guardList={guards}\n-                  candyMachine={candyMachine}\n-                  candyGuard={candyGuard}\n-                  umi={umi}\n-                  ownedTokens={ownedTokens}\n-                  setGuardList={setGuards}\n-                  mintsCreated={mintsCreated}\n-                  setMintsCreated={setMintsCreated}\n-                  onOpen={onShowNftOpen}\n-                  setCheckEligibility={setCheckEligibility}\n-                />\n-              )}\n-            </Stack>\n-          </CardBody>\n-        </Card>\n-        {umi.identity.publicKey === candyMachine?.authority ? (\n-          <>\n-            <Center>\n-              <Button backgroundColor={\"red.200\"} marginTop={\"10\"} onClick={onInitializerOpen}>Initialize Everything!</Button>\n-            </Center>\n-            <Modal isOpen={isInitializerOpen} onClose={onInitializerClose}>\n-              <ModalOverlay />\n-              <ModalContent maxW=\"600px\">\n-                <ModalHeader>Initializer</ModalHeader>\n-                <ModalCloseButton />\n-                <ModalBody>\n-                  <InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n-                </ModalBody>\n-              </ModalContent>\n-            </Modal>\n-          </>\n-        ) : (\n-          <></>\n-        )}\n-\n-        <Modal isOpen={isShowNftOpen} onClose={onShowNftClose}>\n-          <ModalOverlay />\n-          <ModalContent>\n-            <ModalHeader>Your minted NFT:</ModalHeader>\n-            <ModalCloseButton />\n-            <ModalBody>\n-              <ShowNft nfts={mintsCreated} />\n-            </ModalBody>\n-          </ModalContent>\n-        </Modal>\n-      </>\n-    );\n-  };\n-\n-  return (\n-    <main>\n-      <div className={styles.wallet}>\n-        <WalletMultiButtonDynamic />\n-      </div>\n-\n-      <div className={styles.center}>\n-        <PageContent key=\"content\" />\n-      </div>\n-    </main>\n-  );\n-};\n-\n-export default Home;\n-import {\n-  PublicKey,\n-  publicKey,\n-  Umi,\n-} from \"@metaplex-foundation/umi\";\n-import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\n-import dynamic from \"next/dynamic\";\n-import { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\n-import { useUmi } from \"../utils/useUmi\";\n-import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\";\n-import styles from \"../styles/Home.module.css\";\n-import { guardChecker } from \"../utils/checkAllowed\";\n-import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\n-import { ButtonList } from \"../components/mintButton\";\n-import { GuardReturn } from \"../utils/checkerHelper\";\n-import { ShowNft } from \"../components/showNft\";\n-import { InitializeModal } from \"../components/initializeModal\";\n-import { image, headerText } from \"../settings\";\n-import { useSolanaTime } from \"@/utils/SolanaTimeContext\";\n-\n-const WalletMultiButtonDynamic = dynamic(\n-  async () =>\n-    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\n-  { ssr: false }\n-);\n-\n-const useCandyMachine = (\n-  umi: Umi,\n-  candyMachineId: string,\n-  checkEligibility: boolean,\n-  setCheckEligibility: Dispatch<SetStateAction<boolean>>,\n-  firstRun: boolean,\n-  setfirstRun: Dispatch<SetStateAction<boolean>>\n-) => {\n-  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n-  const [candyGuard, setCandyGuard] = useState<CandyGuard>();\n-  const toast = useToast();\n-\n-  useEffect(() => {\n-    (async () => {\n-      if (checkEligibility) {\n-        if (!candyMachineId) {\n-          console.error(\"No candy machine in .env!\");\n-          if (!toast.isActive(\"no-cm\")) {\n-            toast({\n-              id: \"no-cm\",\n-              title: \"No candy machine in .env!\",\n-              description: \"Add your candy machine address to the .env file!\",\n-              status: \"error\",\n-              duration: 999999,\n-              isClosable: true,\n-            });\n-          }\n-          return;\n-        }\n-\n-        let candyMachine;\n-        try {\n-          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\n-          // Verify CM Version\n-          if (candyMachine.version !== AccountVersion.V2) {\n-            toast({\n-              id: \"wrong-account-version\",\n-              title: \"Wrong candy machine account version!\",\n-              description: \"Please use the latest sugar to create your candy machine. Need Account Version 2!\",\n-              status: \"error\",\n-              duration: 999999,\n-              isClosable: true,\n-            });\n-            return;\n-          }\n-        } catch (e) {\n-          console.error(e);\n-          toast({\n-            id: \"no-cm-found\",\n-            title: \"The CM from .env is invalid\",\n-            description: \"Are you using the correct environment?\",\n-            status: \"error\",\n-            duration: 999999,\n-            isClosable: true,\n-          });\n-        }\n-        setCandyMachine(candyMachine);\n-        if (!candyMachine) {\n-          return;\n-        }\n-        let candyGuard;\n-        try {\n-          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\n-        } catch (e) {\n-          console.error(e);\n-          toast({\n-            id: \"no-guard-found\",\n-            title: \"No Candy Guard found!\",\n-            description: \"Do you have one assigned?\",\n-            status: \"error\",\n-            duration: 999999,\n-            isClosable: true,\n-          });\n-        }\n-        if (!candyGuard) {\n-          return;\n-        }\n-        setCandyGuard(candyGuard);\n-        if (firstRun) {\n-          setfirstRun(false);\n-        }\n-      }\n-    })();\n-  }, [umi, checkEligibility]);\n-\n-  return { candyMachine, candyGuard };\n-};\n-\n-const Home = () => {\n-  const umi = useUmi();\n-  const solanaTime = useSolanaTime();\n-  const toast = useToast();\n-  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\n-  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\n-  const [mintsCreated, setMintsCreated] = useState<{ mint: PublicKey, offChainMetadata: JsonMetadata | undefined }[] | undefined>();\n-  const [isAllowed, setIsAllowed] = useState<boolean>(false);\n-  const [loading, setLoading] = useState(true);\n-  const [ownedTokens, setOwnedTokens] = useState<DigitalAssetWithToken[]>();\n-  const [guards, setGuards] = useState<GuardReturn[]>([\n-    { label: \"startDefault\", allowed: false, maxAmount: 0 },\n-  ]);\n-  const [firstRun, setFirstRun] = useState(true);\n-  const [checkEligibility, setCheckEligibility] = useState<boolean>(true);\n-\n-  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n-    console.error(\"No candy machine in .env!\");\n-    if (!toast.isActive('no-cm')) {\n-      toast({\n-        id: 'no-cm',\n-        title: 'No candy machine in .env!',\n-        description: \"Add your candy machine address to the .env file!\",\n-        status: 'error',\n-        duration: 999999,\n-        isClosable: true,\n-      });\n-    }\n-  }\n-\n-  const candyMachineId: PublicKey = useMemo(() => {\n-    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n-      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\n-    } else {\n-      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!`);\n-      toast({\n-        id: 'no-cm',\n-        title: 'No candy machine in .env!',\n-        description: \"Add your candy machine address to the .env file!\",\n-        status: 'error',\n-        duration: 999999,\n-        isClosable: true,\n-      });\n-      return publicKey(\"11111111111111111111111111111111\");\n-    }\n-  }, []);\n-\n-  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\n-\n-  useEffect(() => {\n-    const checkEligibilityFunc = async () => {\n-      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\n-        return;\n-      }\n-      setFirstRun(false);\n-      \n-      const { guardReturn, ownedTokens } = await guardChecker(\n-        umi, candyGuard, candyMachine, solanaTime\n-      );\n-\n-      setOwnedTokens(ownedTokens);\n-      setGuards(guardReturn);\n-      setIsAllowed(false);\n-\n-      let allowed = false;\n-      for (const guard of guardReturn) {\n-        if (guard.allowed) {\n-          allowed = true;\n-          break;\n-        }\n-      }\n-\n-      setIsAllowed(allowed);\n-      setLoading(false);\n-    };\n-\n-    checkEligibilityFunc();\n-  }, [umi, checkEligibility, firstRun]);\n-\n-  const PageContent = () => {\n-    return (\n-      <>\n-        <style jsx global>\n-          {`\n-            body {\n-              background: #2d3748; \n-            }\n-          `}\n-        </style>\n-        <Card>\n-          <CardHeader>\n-            <Flex minWidth='max-content' alignItems='center' gap='2'>\n-              <Box>\n-                <Heading size='md'>{headerText}</Heading>\n-              </Box>\n-              {loading ? (<></>) : (\n-                <Flex justifyContent=\"flex-end\" marginLeft=\"auto\">\n-                  <Box background={\"teal.100\"} borderRadius={\"5px\"} minWidth={\"50px\"} minHeight={\"50px\"} p={2}>\n-                    <VStack>\n-                      <Text fontSize={\"sm\"}>Available NFTs:</Text>\n-                      <Text fontWeight={\"semibold\"}>{Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)}</Text>\n-                    </VStack>\n-                  </Box>\n-                </Flex>\n-              )}\n-            </Flex>\n-          </CardHeader>\n-\n-          <CardBody>\n-            <Center>\n-              <Box rounded={'lg'} mt={-12} pos={'relative'}>\n-                <Image\n-                  rounded={'lg'}\n-                  height={230}\n-                  objectFit={'cover'}\n-                  alt={\"project Image\"}\n-                  src={image}\n-                />\n-              </Box>\n-            </Center>\n-            <Stack divider={<StackDivider />} spacing='8'>\n-              {loading ? (\n-                <div>\n-                  <Divider my=\"10px\" />\n-                  <Skeleton height=\"30px\" my=\"10px\" />\n-                  <Skeleton height=\"30px\" my=\"10px\" />\n-                  <Skeleton height=\"30px\" my=\"10px\" />\n-                </div>\n-              ) : (\n-                <ButtonList\n-                  guardList={guards}\n-                  candyMachine={candyMachine}\n-                  candyGuard={candyGuard}\n-                  umi={umi}\n-                  ownedTokens={ownedTokens}\n-                  setGuardList={setGuards}\n-                  mintsCreated={mintsCreated}\n-                  setMintsCreated={setMintsCreated}\n-                  onOpen={onShowNftOpen}\n-                  setCheckEligibility={setCheckEligibility}\n-                />\n-              )}\n-            </Stack>\n-          </CardBody>\n-        </Card>\n-        {umi.identity.publicKey === candyMachine?.authority ? (\n-          <>\n-            <Center>\n-              <Button backgroundColor={\"red.200\"} marginTop={\"10\"} onClick={onInitializerOpen}>Initialize Everything!</Button>\n-            </Center>\n-            <Modal isOpen={isInitializerOpen} onClose={onInitializerClose}>\n-              <ModalOverlay />\n-              <ModalContent maxW=\"600px\">\n-                <ModalHeader>Initializer</ModalHeader>\n-                <ModalCloseButton />\n-                <ModalBody>\n-                  <InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n-                </ModalBody>\n-              </ModalContent>\n-            </Modal>\n-          </>\n-        ) : (\n-          <></>\n-        )}\n-\n-        <Modal isOpen={isShowNftOpen} onClose={onShowNftClose}>\n-          <ModalOverlay />\n-          <ModalContent>\n-            <ModalHeader>Your minted NFT:</ModalHeader>\n-            <ModalCloseButton />\n-            <ModalBody>\n-              <ShowNft nfts={mintsCreated} />\n-            </ModalBody>\n-          </ModalContent>\n-        </Modal>\n-      </>\n-    );\n-  };\n-\n-  return (\n-    <main>\n-      <div className={styles.wallet}>\n-        <WalletMultiButtonDynamic />\n-      </div>\n-\n-      <div className={styles.center}>\n-        <PageContent key=\"content\" />\n-      </div>\n-    </main>\n-  );\n-};\n-\n export default Home;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731231316594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,306 @@\n+import {\n+  PublicKey,\n+  publicKey,\n+  Umi,\n+} from \"@metaplex-foundation/umi\";\n+import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\n+import dynamic from \"next/dynamic\";\n+import { useEffect, useMemo, useState } from \"react\";\n+import { useUmi } from \"./utils/useUmi\";\n+import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\";\n+import styles from \"./styles/Home.module.css\";\n+import { guardChecker } from \"./utils/checkAllowed\";\n+import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\n+import { ButtonList } from \"./components/mintButton\";\n+import { ShowNft } from \"./components/showNft\";\n+import { InitializeModal } from \"./components/initializeModal\";\n+import { image, headerText } from \"settings\";\n+import { useSolanaTime } from \"@/utils/SolanaTimeContext\";\n+\n+const WalletMultiButtonDynamic = dynamic(\n+  async () =>\n+    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\n+  { ssr: false }\n+);\n+\n+const useCandyMachine = (\n+  umi,\n+  candyMachineId,\n+  checkEligibility,\n+  setCheckEligibility,\n+  firstRun,\n+  setFirstRun\n+) => {\n+  const [candyMachine, setCandyMachine] = useState();\n+  const [candyGuard, setCandyGuard] = useState();\n+  const toast = useToast();\n+\n+  useEffect(() => {\n+    (async () => {\n+      if (checkEligibility) {\n+        if (!candyMachineId) {\n+          console.error(\"No candy machine in .env!\");\n+          if (!toast.isActive(\"no-cm\")) {\n+            toast({\n+              id: \"no-cm\",\n+              title: \"No candy machine in .env!\",\n+              description: \"Add your candy machine address to the .env file!\",\n+              status: \"error\",\n+              duration: 999999,\n+              isClosable: true,\n+            });\n+          }\n+          return;\n+        }\n+\n+        let candyMachine;\n+        try {\n+          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\n+          // Verify CM Version\n+          if (candyMachine.version !== AccountVersion.V2) {\n+            toast({\n+              id: \"wrong-account-version\",\n+              title: \"Wrong candy machine account version!\",\n+              description: \"Please use the latest sugar to create your candy machine. Need Account Version 2!\",\n+              status: \"error\",\n+              duration: 999999,\n+              isClosable: true,\n+            });\n+            return;\n+          }\n+        } catch (e) {\n+          console.error(e);\n+          toast({\n+            id: \"no-cm-found\",\n+            title: \"The CM from .env is invalid\",\n+            description: \"Are you using the correct environment?\",\n+            status: \"error\",\n+            duration: 999999,\n+            isClosable: true,\n+          });\n+        }\n+        setCandyMachine(candyMachine);\n+        if (!candyMachine) {\n+          return;\n+        }\n+        let candyGuard;\n+        try {\n+          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\n+        } catch (e) {\n+          console.error(e);\n+          toast({\n+            id: \"no-guard-found\",\n+            title: \"No Candy Guard found!\",\n+            description: \"Do you have one assigned?\",\n+            status: \"error\",\n+            duration: 999999,\n+            isClosable: true,\n+          });\n+        }\n+        if (!candyGuard) {\n+          return;\n+        }\n+        setCandyGuard(candyGuard);\n+        if (firstRun) {\n+          setFirstRun(false);\n+        }\n+      }\n+    })();\n+  }, [umi, checkEligibility]);\n+\n+  return { candyMachine, candyGuard };\n+};\n+\n+const Home = () => {\n+  const umi = useUmi();\n+  const solanaTime = useSolanaTime();\n+  const toast = useToast();\n+  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\n+  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\n+  const [mintsCreated, setMintsCreated] = useState();\n+  const [isAllowed, setIsAllowed] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const [ownedTokens, setOwnedTokens] = useState();\n+  const [guards, setGuards] = useState([\n+    { label: \"startDefault\", allowed: false, maxAmount: 0 },\n+  ]);\n+  const [firstRun, setFirstRun] = useState(true);\n+  const [checkEligibility, setCheckEligibility] = useState(true);\n+\n+  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n+    console.error(\"No candy machine in .env!\");\n+    if (!toast.isActive('no-cm')) {\n+      toast({\n+        id: 'no-cm',\n+        title: 'No candy machine in .env!',\n+        description: \"Add your candy machine address to the .env file!\",\n+        status: 'error',\n+        duration: 999999,\n+        isClosable: true,\n+      });\n+    }\n+  }\n+\n+  const candyMachineId = useMemo(() => {\n+    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n+      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\n+    } else {\n+      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!`);\n+      toast({\n+        id: 'no-cm',\n+        title: 'No candy machine in .env!',\n+        description: \"Add your candy machine address to the .env file!\",\n+        status: 'error',\n+        duration: 999999,\n+        isClosable: true,\n+      });\n+      return publicKey(\"11111111111111111111111111111111\");\n+    }\n+  }, []);\n+\n+  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\n+\n+  useEffect(() => {\n+    const checkEligibilityFunc = async () => {\n+      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\n+        return;\n+      }\n+      setFirstRun(false);\n+      \n+      const { guardReturn, ownedTokens } = await guardChecker(\n+        umi, candyGuard, candyMachine, solanaTime\n+      );\n+\n+      setOwnedTokens(ownedTokens);\n+      setGuards(guardReturn);\n+      setIsAllowed(false);\n+\n+      let allowed = false;\n+      for (const guard of guardReturn) {\n+        if (guard.allowed) {\n+          allowed = true;\n+          break;\n+        }\n+      }\n+\n+      setIsAllowed(allowed);\n+      setLoading(false);\n+    };\n+\n+    checkEligibilityFunc();\n+  }, [umi, checkEligibility, firstRun]);\n+\n+  const PageContent = () => {\n+    return (\n+      <>\n+        <style jsx global>\n+          {`\n+            body {\n+              background: #2d3748; \n+            }\n+          `}\n+        </style>\n+        <Card>\n+          <CardHeader>\n+            <Flex minWidth='max-content' alignItems='center' gap='2'>\n+              <Box>\n+                <Heading size='md'>{headerText}</Heading>\n+              </Box>\n+              {loading ? (<></>) : (\n+                <Flex justifyContent=\"flex-end\" marginLeft=\"auto\">\n+                  <Box background={\"teal.100\"} borderRadius={\"5px\"} minWidth={\"50px\"} minHeight={\"50px\"} p={2}>\n+                    <VStack>\n+                      <Text fontSize={\"sm\"}>Available NFTs:</Text>\n+                      <Text fontWeight={\"semibold\"}>{Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)}</Text>\n+                    </VStack>\n+                  </Box>\n+                </Flex>\n+              )}\n+            </Flex>\n+          </CardHeader>\n+\n+          <CardBody>\n+            <Center>\n+              <Box rounded={'lg'} mt={-12} pos={'relative'}>\n+                <Image\n+                  rounded={'lg'}\n+                  height={230}\n+                  objectFit={'cover'}\n+                  alt={\"project Image\"}\n+                  src={image}\n+                />\n+              </Box>\n+            </Center>\n+            <Stack divider={<StackDivider />} spacing='8'>\n+              {loading ? (\n+                <div>\n+                  <Divider my=\"10px\" />\n+                  <Skeleton height=\"30px\" my=\"10px\" />\n+                  <Skeleton height=\"30px\" my=\"10px\" />\n+                  <Skeleton height=\"30px\" my=\"10px\" />\n+                </div>\n+              ) : (\n+                <ButtonList\n+                  guardList={guards}\n+                  candyMachine={candyMachine}\n+                  candyGuard={candyGuard}\n+                  umi={umi}\n+                  ownedTokens={ownedTokens}\n+                  setGuardList={setGuards}\n+                  mintsCreated={mintsCreated}\n+                  setMintsCreated={setMintsCreated}\n+                  onOpen={onShowNftOpen}\n+                  setCheckEligibility={setCheckEligibility}\n+                />\n+              )}\n+            </Stack>\n+          </CardBody>\n+        </Card>\n+        {umi.identity.publicKey === candyMachine?.authority ? (\n+          <>\n+            <Center>\n+              <Button backgroundColor={\"red.200\"} marginTop={\"10\"} onClick={onInitializerOpen}>Initialize Everything!</Button>\n+            </Center>\n+            <Modal isOpen={isInitializerOpen} onClose={onInitializerClose}>\n+              <ModalOverlay />\n+              <ModalContent maxW=\"600px\">\n+                <ModalHeader>Initializer</ModalHeader>\n+                <ModalCloseButton />\n+                <ModalBody>\n+                  <InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n+                </ModalBody>\n+              </ModalContent>\n+            </Modal>\n+          </>\n+        ) : (\n+          <></>\n+        )}\n+\n+        <Modal isOpen={isShowNftOpen} onClose={onShowNftClose}>\n+          <ModalOverlay />\n+          <ModalContent>\n+            <ModalHeader>Your minted NFT:</ModalHeader>\n+            <ModalCloseButton />\n+            <ModalBody>\n+              <ShowNft nfts={mintsCreated} />\n+            </ModalBody>\n+          </ModalContent>\n+        </Modal>\n+      </>\n+    );\n+  };\n+\n+  return (\n+    <main>\n+      <div className={styles.wallet}>\n+        <WalletMultiButtonDynamic />\n+      </div>\n+\n+      <div className={styles.center}>\n+        <PageContent key=\"content\" />\n+      </div>\n+    </main>\n+  );\n+};\n+\n+export default Home;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731231351835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\n import { ButtonList } from \"./components/mintButton\";\n import { ShowNft } from \"./components/showNft\";\n import { InitializeModal } from \"./components/initializeModal\";\n-import { image, headerText } from \"settings\";\n+import { image, headerText } from \"./settings\";\n import { useSolanaTime } from \"@/utils/SolanaTimeContext\";\n \n const WalletMultiButtonDynamic = dynamic(\n   async () =>\n"
                },
                {
                    "date": 1731233870301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,15 +9,17 @@\n import { useUmi } from \"./utils/useUmi\";\n import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\";\n import styles from \"./styles/Home.module.css\";\n import { guardChecker } from \"./utils/checkAllowed\";\n-import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\n+import { Button, Modal, Typography, Spin, Card, Row, Col } from 'antd';\n import { ButtonList } from \"./components/mintButton\";\n import { ShowNft } from \"./components/showNft\";\n import { InitializeModal } from \"./components/initializeModal\";\n import { image, headerText } from \"./settings\";\n import { useSolanaTime } from \"@/utils/SolanaTimeContext\";\n \n+const { Title, Text } = Typography;\n+\n const WalletMultiButtonDynamic = dynamic(\n   async () =>\n     (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\n   { ssr: false }\n@@ -32,53 +34,28 @@\n   setFirstRun\n ) => {\n   const [candyMachine, setCandyMachine] = useState();\n   const [candyGuard, setCandyGuard] = useState();\n-  const toast = useToast();\n-\n+  \n   useEffect(() => {\n     (async () => {\n       if (checkEligibility) {\n         if (!candyMachineId) {\n           console.error(\"No candy machine in .env!\");\n-          if (!toast.isActive(\"no-cm\")) {\n-            toast({\n-              id: \"no-cm\",\n-              title: \"No candy machine in .env!\",\n-              description: \"Add your candy machine address to the .env file!\",\n-              status: \"error\",\n-              duration: 999999,\n-              isClosable: true,\n-            });\n-          }\n           return;\n         }\n \n         let candyMachine;\n         try {\n           candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\n           // Verify CM Version\n           if (candyMachine.version !== AccountVersion.V2) {\n-            toast({\n-              id: \"wrong-account-version\",\n-              title: \"Wrong candy machine account version!\",\n-              description: \"Please use the latest sugar to create your candy machine. Need Account Version 2!\",\n-              status: \"error\",\n-              duration: 999999,\n-              isClosable: true,\n-            });\n+            console.error(\"Wrong candy machine account version!\");\n             return;\n           }\n         } catch (e) {\n           console.error(e);\n-          toast({\n-            id: \"no-cm-found\",\n-            title: \"The CM from .env is invalid\",\n-            description: \"Are you using the correct environment?\",\n-            status: \"error\",\n-            duration: 999999,\n-            isClosable: true,\n-          });\n+          return;\n         }\n         setCandyMachine(candyMachine);\n         if (!candyMachine) {\n           return;\n@@ -87,16 +64,8 @@\n         try {\n           candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\n         } catch (e) {\n           console.error(e);\n-          toast({\n-            id: \"no-guard-found\",\n-            title: \"No Candy Guard found!\",\n-            description: \"Do you have one assigned?\",\n-            status: \"error\",\n-            duration: 999999,\n-            isClosable: true,\n-          });\n         }\n         if (!candyGuard) {\n           return;\n         }\n@@ -113,11 +82,8 @@\n \n const Home = () => {\n   const umi = useUmi();\n   const solanaTime = useSolanaTime();\n-  const toast = useToast();\n-  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\n-  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\n   const [mintsCreated, setMintsCreated] = useState();\n   const [isAllowed, setIsAllowed] = useState(false);\n   const [loading, setLoading] = useState(true);\n   const [ownedTokens, setOwnedTokens] = useState();\n@@ -125,36 +91,20 @@\n     { label: \"startDefault\", allowed: false, maxAmount: 0 },\n   ]);\n   const [firstRun, setFirstRun] = useState(true);\n   const [checkEligibility, setCheckEligibility] = useState(true);\n+  const [isShowNftOpen, setShowNftOpen] = useState(false);\n+  const [isInitializerOpen, setInitializerOpen] = useState(false);\n \n   if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n     console.error(\"No candy machine in .env!\");\n-    if (!toast.isActive('no-cm')) {\n-      toast({\n-        id: 'no-cm',\n-        title: 'No candy machine in .env!',\n-        description: \"Add your candy machine address to the .env file!\",\n-        status: 'error',\n-        duration: 999999,\n-        isClosable: true,\n-      });\n-    }\n   }\n \n   const candyMachineId = useMemo(() => {\n     if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n       return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\n     } else {\n       console.error(`NO CANDY MACHINE IN .env FILE DEFINED!`);\n-      toast({\n-        id: 'no-cm',\n-        title: 'No candy machine in .env!',\n-        description: \"Add your candy machine address to the .env file!\",\n-        status: 'error',\n-        duration: 999999,\n-        isClosable: true,\n-      });\n       return publicKey(\"11111111111111111111111111111111\");\n     }\n   }, []);\n \n@@ -191,103 +141,34 @@\n   }, [umi, checkEligibility, firstRun]);\n \n   const PageContent = () => {\n     return (\n-      <>\n-        <style jsx global>\n-          {`\n-            body {\n-              background: #2d3748; \n-            }\n-          `}\n-        </style>\n-        <Card>\n-          <CardHeader>\n-            <Flex minWidth='max-content' alignItems='center' gap='2'>\n-              <Box>\n-                <Heading size='md'>{headerText}</Heading>\n-              </Box>\n-              {loading ? (<></>) : (\n-                <Flex justifyContent=\"flex-end\" marginLeft=\"auto\">\n-                  <Box background={\"teal.100\"} borderRadius={\"5px\"} minWidth={\"50px\"} minHeight={\"50px\"} p={2}>\n-                    <VStack>\n-                      <Text fontSize={\"sm\"}>Available NFTs:</Text>\n-                      <Text fontWeight={\"semibold\"}>{Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)}</Text>\n-                    </VStack>\n-                  </Box>\n-                </Flex>\n-              )}\n-            </Flex>\n-          </CardHeader>\n-\n-          <CardBody>\n-            <Center>\n-              <Box rounded={'lg'} mt={-12} pos={'relative'}>\n-                <Image\n-                  rounded={'lg'}\n-                  height={230}\n-                  objectFit={'cover'}\n-                  alt={\"project Image\"}\n-                  src={image}\n-                />\n-              </Box>\n-            </Center>\n-            <Stack divider={<StackDivider />} spacing='8'>\n-              {loading ? (\n-                <div>\n-                  <Divider my=\"10px\" />\n-                  <Skeleton height=\"30px\" my=\"10px\" />\n-                  <Skeleton height=\"30px\" my=\"10px\" />\n-                  <Skeleton height=\"30px\" my=\"10px\" />\n-                </div>\n-              ) : (\n-                <ButtonList\n-                  guardList={guards}\n-                  candyMachine={candyMachine}\n-                  candyGuard={candyGuard}\n-                  umi={umi}\n-                  ownedTokens={ownedTokens}\n-                  setGuardList={setGuards}\n-                  mintsCreated={mintsCreated}\n-                  setMintsCreated={setMintsCreated}\n-                  onOpen={onShowNftOpen}\n-                  setCheckEligibility={setCheckEligibility}\n-                />\n-              )}\n-            </Stack>\n-          </CardBody>\n-        </Card>\n-        {umi.identity.publicKey === candyMachine?.authority ? (\n-          <>\n-            <Center>\n-              <Button backgroundColor={\"red.200\"} marginTop={\"10\"} onClick={onInitializerOpen}>Initialize Everything!</Button>\n-            </Center>\n-            <Modal isOpen={isInitializerOpen} onClose={onInitializerClose}>\n-              <ModalOverlay />\n-              <ModalContent maxW=\"600px\">\n-                <ModalHeader>Initializer</ModalHeader>\n-                <ModalCloseButton />\n-                <ModalBody>\n-                  <InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n-                </ModalBody>\n-              </ModalContent>\n-            </Modal>\n-          </>\n+      <Card>\n+        <Title level={3}>{headerText}</Title>\n+        {loading ? (\n+          <Spin />\n         ) : (\n-          <></>\n+          <Row justify=\"space-between\" align=\"middle\">\n+            <Col>\n+              <Text>Available NFTs: {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)}</Text>\n+            </Col>\n+            <Col>\n+              <ButtonList\n+                guardList={guards}\n+                candyMachine={candyMachine}\n+                candyGuard={candyGuard}\n+                umi={umi}\n+                ownedTokens={ownedTokens}\n+                setGuardList={setGuards}\n+                mintsCreated={mintsCreated}\n+                setMintsCreated={setMintsCreated}\n+                onOpen={() => setShowNftOpen(true)}\n+                setCheckEligibility={setCheckEligibility}\n+              />\n+            </Col>\n+          </Row>\n         )}\n-\n-        <Modal isOpen={isShowNftOpen} onClose={onShowNftClose}>\n-          <ModalOverlay />\n-          <ModalContent>\n-            <ModalHeader>Your minted NFT:</ModalHeader>\n-            <ModalCloseButton />\n-            <ModalBody>\n-              <ShowNft nfts={mintsCreated} />\n-            </ModalBody>\n-          </ModalContent>\n-        </Modal>\n-      </>\n+      </Card>\n     );\n   };\n \n   return (\n@@ -296,10 +177,28 @@\n         <WalletMultiButtonDynamic />\n       </div>\n \n       <div className={styles.center}>\n-        <PageContent key=\"content\" />\n+        <PageContent />\n       </div>\n+\n+      <Modal\n+        title=\"Your minted NFT:\"\n+        visible={isShowNftOpen}\n+        onCancel={() => setShowNftOpen(false)}\n+        footer={null}\n+      >\n+        <ShowNft nfts={mintsCreated} />\n+      </Modal>\n+\n+      <Modal\n+        title=\"Initializer\"\n+        visible={isInitializerOpen}\n+        onCancel={() => setInitializerOpen(false)}\n+        footer={null}\n+      >\n+        <InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n+      </Modal>\n     </main>\n   );\n };\n \n"
                },
                {
                    "date": 1731234395150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,16 @@\n import dynamic from \"next/dynamic\";\n import { useEffect, useMemo, useState } from \"react\";\n import { useUmi } from \"./utils/useUmi\";\n import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\";\n-import styles from \"./styles/Home.module.css\";\n+import styles from \"./mintnft.css\";\n import { guardChecker } from \"./utils/checkAllowed\";\n import { Button, Modal, Typography, Spin, Card, Row, Col } from 'antd';\n import { ButtonList } from \"./components/mintButton\";\n import { ShowNft } from \"./components/showNft\";\n import { InitializeModal } from \"./components/initializeModal\";\n import { image, headerText } from \"./settings\";\n-import { useSolanaTime } from \"@/utils/SolanaTimeContext\";\n+import { useSolanaTime } from \"./utils/SolanaTimeContext\";\n \n const { Title, Text } = Typography;\n \n const WalletMultiButtonDynamic = dynamic(\n@@ -201,311 +201,5 @@\n     </main>\n   );\n };\n \n-export default Home;\n-import {\n-  PublicKey,\n-  publicKey,\n-  Umi,\n-} from \"@metaplex-foundation/umi\";\n-import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\n-import dynamic from \"next/dynamic\";\n-import { useEffect, useMemo, useState } from \"react\";\n-import { useUmi } from \"./utils/useUmi\";\n-import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\";\n-import styles from \"./styles/Home.module.css\";\n-import { guardChecker } from \"./utils/checkAllowed\";\n-import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\n-import { ButtonList } from \"./components/mintButton\";\n-import { ShowNft } from \"./components/showNft\";\n-import { InitializeModal } from \"./components/initializeModal\";\n-import { image, headerText } from \"./settings\";\n-import { useSolanaTime } from \"@/utils/SolanaTimeContext\";\n-\n-const WalletMultiButtonDynamic = dynamic(\n-  async () =>\n-    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\n-  { ssr: false }\n-);\n-\n-const useCandyMachine = (\n-  umi,\n-  candyMachineId,\n-  checkEligibility,\n-  setCheckEligibility,\n-  firstRun,\n-  setFirstRun\n-) => {\n-  const [candyMachine, setCandyMachine] = useState();\n-  const [candyGuard, setCandyGuard] = useState();\n-  const toast = useToast();\n-\n-  useEffect(() => {\n-    (async () => {\n-      if (checkEligibility) {\n-        if (!candyMachineId) {\n-          console.error(\"No candy machine in .env!\");\n-          if (!toast.isActive(\"no-cm\")) {\n-            toast({\n-              id: \"no-cm\",\n-              title: \"No candy machine in .env!\",\n-              description: \"Add your candy machine address to the .env file!\",\n-              status: \"error\",\n-              duration: 999999,\n-              isClosable: true,\n-            });\n-          }\n-          return;\n-        }\n-\n-        let candyMachine;\n-        try {\n-          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\n-          // Verify CM Version\n-          if (candyMachine.version !== AccountVersion.V2) {\n-            toast({\n-              id: \"wrong-account-version\",\n-              title: \"Wrong candy machine account version!\",\n-              description: \"Please use the latest sugar to create your candy machine. Need Account Version 2!\",\n-              status: \"error\",\n-              duration: 999999,\n-              isClosable: true,\n-            });\n-            return;\n-          }\n-        } catch (e) {\n-          console.error(e);\n-          toast({\n-            id: \"no-cm-found\",\n-            title: \"The CM from .env is invalid\",\n-            description: \"Are you using the correct environment?\",\n-            status: \"error\",\n-            duration: 999999,\n-            isClosable: true,\n-          });\n-        }\n-        setCandyMachine(candyMachine);\n-        if (!candyMachine) {\n-          return;\n-        }\n-        let candyGuard;\n-        try {\n-          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\n-        } catch (e) {\n-          console.error(e);\n-          toast({\n-            id: \"no-guard-found\",\n-            title: \"No Candy Guard found!\",\n-            description: \"Do you have one assigned?\",\n-            status: \"error\",\n-            duration: 999999,\n-            isClosable: true,\n-          });\n-        }\n-        if (!candyGuard) {\n-          return;\n-        }\n-        setCandyGuard(candyGuard);\n-        if (firstRun) {\n-          setFirstRun(false);\n-        }\n-      }\n-    })();\n-  }, [umi, checkEligibility]);\n-\n-  return { candyMachine, candyGuard };\n-};\n-\n-const Home = () => {\n-  const umi = useUmi();\n-  const solanaTime = useSolanaTime();\n-  const toast = useToast();\n-  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\n-  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\n-  const [mintsCreated, setMintsCreated] = useState();\n-  const [isAllowed, setIsAllowed] = useState(false);\n-  const [loading, setLoading] = useState(true);\n-  const [ownedTokens, setOwnedTokens] = useState();\n-  const [guards, setGuards] = useState([\n-    { label: \"startDefault\", allowed: false, maxAmount: 0 },\n-  ]);\n-  const [firstRun, setFirstRun] = useState(true);\n-  const [checkEligibility, setCheckEligibility] = useState(true);\n-\n-  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n-    console.error(\"No candy machine in .env!\");\n-    if (!toast.isActive('no-cm')) {\n-      toast({\n-        id: 'no-cm',\n-        title: 'No candy machine in .env!',\n-        description: \"Add your candy machine address to the .env file!\",\n-        status: 'error',\n-        duration: 999999,\n-        isClosable: true,\n-      });\n-    }\n-  }\n-\n-  const candyMachineId = useMemo(() => {\n-    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n-      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\n-    } else {\n-      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!`);\n-      toast({\n-        id: 'no-cm',\n-        title: 'No candy machine in .env!',\n-        description: \"Add your candy machine address to the .env file!\",\n-        status: 'error',\n-        duration: 999999,\n-        isClosable: true,\n-      });\n-      return publicKey(\"11111111111111111111111111111111\");\n-    }\n-  }, []);\n-\n-  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\n-\n-  useEffect(() => {\n-    const checkEligibilityFunc = async () => {\n-      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\n-        return;\n-      }\n-      setFirstRun(false);\n-      \n-      const { guardReturn, ownedTokens } = await guardChecker(\n-        umi, candyGuard, candyMachine, solanaTime\n-      );\n-\n-      setOwnedTokens(ownedTokens);\n-      setGuards(guardReturn);\n-      setIsAllowed(false);\n-\n-      let allowed = false;\n-      for (const guard of guardReturn) {\n-        if (guard.allowed) {\n-          allowed = true;\n-          break;\n-        }\n-      }\n-\n-      setIsAllowed(allowed);\n-      setLoading(false);\n-    };\n-\n-    checkEligibilityFunc();\n-  }, [umi, checkEligibility, firstRun]);\n-\n-  const PageContent = () => {\n-    return (\n-      <>\n-        <style jsx global>\n-          {`\n-            body {\n-              background: #2d3748; \n-            }\n-          `}\n-        </style>\n-        <Card>\n-          <CardHeader>\n-            <Flex minWidth='max-content' alignItems='center' gap='2'>\n-              <Box>\n-                <Heading size='md'>{headerText}</Heading>\n-              </Box>\n-              {loading ? (<></>) : (\n-                <Flex justifyContent=\"flex-end\" marginLeft=\"auto\">\n-                  <Box background={\"teal.100\"} borderRadius={\"5px\"} minWidth={\"50px\"} minHeight={\"50px\"} p={2}>\n-                    <VStack>\n-                      <Text fontSize={\"sm\"}>Available NFTs:</Text>\n-                      <Text fontWeight={\"semibold\"}>{Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)}</Text>\n-                    </VStack>\n-                  </Box>\n-                </Flex>\n-              )}\n-            </Flex>\n-          </CardHeader>\n-\n-          <CardBody>\n-            <Center>\n-              <Box rounded={'lg'} mt={-12} pos={'relative'}>\n-                <Image\n-                  rounded={'lg'}\n-                  height={230}\n-                  objectFit={'cover'}\n-                  alt={\"project Image\"}\n-                  src={image}\n-                />\n-              </Box>\n-            </Center>\n-            <Stack divider={<StackDivider />} spacing='8'>\n-              {loading ? (\n-                <div>\n-                  <Divider my=\"10px\" />\n-                  <Skeleton height=\"30px\" my=\"10px\" />\n-                  <Skeleton height=\"30px\" my=\"10px\" />\n-                  <Skeleton height=\"30px\" my=\"10px\" />\n-                </div>\n-              ) : (\n-                <ButtonList\n-                  guardList={guards}\n-                  candyMachine={candyMachine}\n-                  candyGuard={candyGuard}\n-                  umi={umi}\n-                  ownedTokens={ownedTokens}\n-                  setGuardList={setGuards}\n-                  mintsCreated={mintsCreated}\n-                  setMintsCreated={setMintsCreated}\n-                  onOpen={onShowNftOpen}\n-                  setCheckEligibility={setCheckEligibility}\n-                />\n-              )}\n-            </Stack>\n-          </CardBody>\n-        </Card>\n-        {umi.identity.publicKey === candyMachine?.authority ? (\n-          <>\n-            <Center>\n-              <Button backgroundColor={\"red.200\"} marginTop={\"10\"} onClick={onInitializerOpen}>Initialize Everything!</Button>\n-            </Center>\n-            <Modal isOpen={isInitializerOpen} onClose={onInitializerClose}>\n-              <ModalOverlay />\n-              <ModalContent maxW=\"600px\">\n-                <ModalHeader>Initializer</ModalHeader>\n-                <ModalCloseButton />\n-                <ModalBody>\n-                  <InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n-                </ModalBody>\n-              </ModalContent>\n-            </Modal>\n-          </>\n-        ) : (\n-          <></>\n-        )}\n-\n-        <Modal isOpen={isShowNftOpen} onClose={onShowNftClose}>\n-          <ModalOverlay />\n-          <ModalContent>\n-            <ModalHeader>Your minted NFT:</ModalHeader>\n-            <ModalCloseButton />\n-            <ModalBody>\n-              <ShowNft nfts={mintsCreated} />\n-            </ModalBody>\n-          </ModalContent>\n-        </Modal>\n-      </>\n-    );\n-  };\n-\n-  return (\n-    <main>\n-      <div className={styles.wallet}>\n-        <WalletMultiButtonDynamic />\n-      </div>\n-\n-      <div className={styles.center}>\n-        <PageContent key=\"content\" />\n-      </div>\n-    </main>\n-  );\n-};\n-\n export default Home;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731234644256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,5 +201,5 @@\n     </main>\n   );\n };\n \n-export default Home;\n\\ No newline at end of file\n+export default MintNFTs2;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731234713931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,205 @@\n+import {\n+  PublicKey,\n+  publicKey,\n+  Umi,\n+} from \"@metaplex-foundation/umi\";\n+import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\n+import dynamic from \"next/dynamic\";\n+import { useEffect, useMemo, useState } from \"react\";\n+import { useUmi } from \"./utils/useUmi\";\n+import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\";\n+import styles from \"./mintnft.css\";\n+import { guardChecker } from \"./utils/checkAllowed\";\n+import { Button, Modal, Typography, Spin, Card, Row, Col } from 'antd';\n+import { ButtonList } from \"./components/mintButton\";\n+import { ShowNft } from \"./components/showNft\";\n+import { InitializeModal } from \"./components/initializeModal\";\n+import { image, headerText } from \"./settings\";\n+import { useSolanaTime } from \"./utils/SolanaTimeContext\";\n+\n+const { Title, Text } = Typography;\n+\n+const WalletMultiButtonDynamic = dynamic(\n+  async () =>\n+    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\n+  { ssr: false }\n+);\n+\n+const useCandyMachine = (\n+  umi,\n+  candyMachineId,\n+  checkEligibility,\n+  setCheckEligibility,\n+  firstRun,\n+  setFirstRun\n+) => {\n+  const [candyMachine, setCandyMachine] = useState();\n+  const [candyGuard, setCandyGuard] = useState();\n+  \n+  useEffect(() => {\n+    (async () => {\n+      if (checkEligibility) {\n+        if (!candyMachineId) {\n+          console.error(\"No candy machine in .env!\");\n+          return;\n+        }\n+\n+        let candyMachine;\n+        try {\n+          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\n+          // Verify CM Version\n+          if (candyMachine.version !== AccountVersion.V2) {\n+            console.error(\"Wrong candy machine account version!\");\n+            return;\n+          }\n+        } catch (e) {\n+          console.error(e);\n+          return;\n+        }\n+        setCandyMachine(candyMachine);\n+        if (!candyMachine) {\n+          return;\n+        }\n+        let candyGuard;\n+        try {\n+          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\n+        } catch (e) {\n+          console.error(e);\n+        }\n+        if (!candyGuard) {\n+          return;\n+        }\n+        setCandyGuard(candyGuard);\n+        if (firstRun) {\n+          setFirstRun(false);\n+        }\n+      }\n+    })();\n+  }, [umi, checkEligibility]);\n+\n+  return { candyMachine, candyGuard };\n+};\n+\n+const MintNFTs2 = () => {\n+  const umi = useUmi();\n+  const solanaTime = useSolanaTime();\n+  const [mintsCreated, setMintsCreated] = useState();\n+  const [isAllowed, setIsAllowed] = useState(false);\n+  const [loading, setLoading] = useState(true);\n+  const [ownedTokens, setOwnedTokens] = useState();\n+  const [guards, setGuards] = useState([\n+    { label: \"startDefault\", allowed: false, maxAmount: 0 },\n+  ]);\n+  const [firstRun, setFirstRun] = useState(true);\n+  const [checkEligibility, setCheckEligibility] = useState(true);\n+  const [isShowNftOpen, setShowNftOpen] = useState(false);\n+  const [isInitializerOpen, setInitializerOpen] = useState(false);\n+\n+  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n+    console.error(\"No candy machine in .env!\");\n+  }\n+\n+  const candyMachineId = useMemo(() => {\n+    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n+      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\n+    } else {\n+      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!`);\n+      return publicKey(\"11111111111111111111111111111111\");\n+    }\n+  }, []);\n+\n+  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\n+\n+  useEffect(() => {\n+    const checkEligibilityFunc = async () => {\n+      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\n+        return;\n+      }\n+      setFirstRun(false);\n+      \n+      const { guardReturn, ownedTokens } = await guardChecker(\n+        umi, candyGuard, candyMachine, solanaTime\n+      );\n+\n+      setOwnedTokens(ownedTokens);\n+      setGuards(guardReturn);\n+      setIsAllowed(false);\n+\n+      let allowed = false;\n+      for (const guard of guardReturn) {\n+        if (guard.allowed) {\n+          allowed = true;\n+          break;\n+        }\n+      }\n+\n+      setIsAllowed(allowed);\n+      setLoading(false);\n+    };\n+\n+    checkEligibilityFunc();\n+  }, [umi, checkEligibility, firstRun]);\n+\n+  const PageContent = () => {\n+    return (\n+      <Card>\n+        <Title level={3}>{headerText}</Title>\n+        {loading ? (\n+          <Spin />\n+        ) : (\n+          <Row justify=\"space-between\" align=\"middle\">\n+            <Col>\n+              <Text>Available NFTs: {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)}</Text>\n+            </Col>\n+            <Col>\n+              <ButtonList\n+                guardList={guards}\n+                candyMachine={candyMachine}\n+                candyGuard={candyGuard}\n+                umi={umi}\n+                ownedTokens={ownedTokens}\n+                setGuardList={setGuards}\n+                mintsCreated={mintsCreated}\n+                setMintsCreated={setMintsCreated}\n+                onOpen={() => setShowNftOpen(true)}\n+                setCheckEligibility={setCheckEligibility}\n+              />\n+            </Col>\n+          </Row>\n+        )}\n+      </Card>\n+    );\n+  };\n+\n+  return (\n+    <main>\n+      <div className={styles.wallet}>\n+        <WalletMultiButtonDynamic />\n+      </div>\n+\n+      <div className={styles.center}>\n+        <PageContent />\n+      </div>\n+\n+      <Modal\n+        title=\"Your minted NFT:\"\n+        visible={isShowNftOpen}\n+        onCancel={() => setShowNftOpen(false)}\n+        footer={null}\n+      >\n+        <ShowNft nfts={mintsCreated} />\n+      </Modal>\n+\n+      <Modal\n+        title=\"Initializer\"\n+        visible={isInitializerOpen}\n+        onCancel={() => setInitializerOpen(false)}\n+        footer={null}\n+      >\n+        <InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n+      </Modal>\n+    </main>\n+  );\n+};\n+\n+export default MintNFTs2;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731230664270,
            "name": "Commit-0",
            "content": "import {\n  PublicKey,\n  publicKey,\n  Umi,\n} from \"@metaplex-foundation/umi\";\nimport { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\nimport dynamic from \"next/dynamic\";\nimport { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\nimport { useUmi } from \"../utils/useUmi\";\nimport { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\"\nimport styles from \"../styles/Home.module.css\";\nimport { guardChecker } from \"../utils/checkAllowed\";\nimport { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\nimport { ButtonList } from \"../components/mintButton\";\nimport { GuardReturn } from \"../utils/checkerHelper\";\nimport { ShowNft } from \"../components/showNft\";\nimport { InitializeModal } from \"../components/initializeModal\";\nimport { image, headerText } from \"../settings\";\nimport { useSolanaTime } from \"@/utils/SolanaTimeContext\";\n\nconst WalletMultiButtonDynamic = dynamic(\n  async () =>\n    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\n  { ssr: false }\n);\n\nconst useCandyMachine = (\n  umi: Umi,\n  candyMachineId: string,\n  checkEligibility: boolean,\n  setCheckEligibility: Dispatch<SetStateAction<boolean>>,\n  firstRun: boolean,\n  setfirstRun: Dispatch<SetStateAction<boolean>>\n) => {\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n  const [candyGuard, setCandyGuard] = useState<CandyGuard>();\n  const toast = useToast();\n\n\n  useEffect(() => {\n    (async () => {\n      if (checkEligibility) {\n        if (!candyMachineId) {\n          console.error(\"No candy machine in .env!\");\n          if (!toast.isActive(\"no-cm\")) {\n            toast({\n              id: \"no-cm\",\n              title: \"No candy machine in .env!\",\n              description: \"Add your candy machine address to the .env file!\",\n              status: \"error\",\n              duration: 999999,\n              isClosable: true,\n            });\n          }\n          return;\n        }\n\n        let candyMachine;\n        try {\n          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\n          //verify CM Version\n          if (candyMachine.version != AccountVersion.V2){\n            toast({\n              id: \"wrong-account-version\",\n              title: \"Wrong candy machine account version!\",\n              description: \"Please use latest sugar to create your candy machine. Need Account Version 2!\",\n              status: \"error\",\n              duration: 999999,\n              isClosable: true,\n            });\n            return;\n          }\n        } catch (e) {\n          console.error(e);\n          toast({\n            id: \"no-cm-found\",\n            title: \"The CM from .env is invalid\",\n            description: \"Are you using the correct environment?\",\n            status: \"error\",\n            duration: 999999,\n            isClosable: true,\n          });\n        }\n        setCandyMachine(candyMachine);\n        if (!candyMachine) {\n          return;\n        }\n        let candyGuard;\n        try {\n          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\n        } catch (e) {\n          console.error(e);\n          toast({\n            id: \"no-guard-found\",\n            title: \"No Candy Guard found!\",\n            description: \"Do you have one assigned?\",\n            status: \"error\",\n            duration: 999999,\n            isClosable: true,\n          });\n        }\n        if (!candyGuard) {\n          return;\n        }\n        setCandyGuard(candyGuard);\n        if (firstRun){\n          setfirstRun(false)\n        }\n      }\n    })();\n  }, [umi, checkEligibility]);\n\n  return { candyMachine, candyGuard };\n\n\n};\n\n\nexport default function Home() {\n  const umi = useUmi();\n  const solanaTime = useSolanaTime();\n  const toast = useToast();\n  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\n  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\n  const [mintsCreated, setMintsCreated] = useState<{ mint: PublicKey, offChainMetadata: JsonMetadata | undefined }[] | undefined>();\n  const [isAllowed, setIsAllowed] = useState<boolean>(false);\n  const [loading, setLoading] = useState(true);\n  const [ownedTokens, setOwnedTokens] = useState<DigitalAssetWithToken[]>();\n  const [guards, setGuards] = useState<GuardReturn[]>([\n    { label: \"startDefault\", allowed: false, maxAmount: 0 },\n  ]);\n  const [firstRun, setFirstRun] = useState(true);\n  const [checkEligibility, setCheckEligibility] = useState<boolean>(true);\n\n\n  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n    console.error(\"No candy machine in .env!\")\n    if (!toast.isActive('no-cm')) {\n      toast({\n        id: 'no-cm',\n        title: 'No candy machine in .env!',\n        description: \"Add your candy machine address to the .env file!\",\n        status: 'error',\n        duration: 999999,\n        isClosable: true,\n      })\n    }\n  }\n  const candyMachineId: PublicKey = useMemo(() => {\n    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\n      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\n    } else {\n      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!`);\n      toast({\n        id: 'no-cm',\n        title: 'No candy machine in .env!',\n        description: \"Add your candy machine address to the .env file!\",\n        status: 'error',\n        duration: 999999,\n        isClosable: true,\n      })\n      return publicKey(\"11111111111111111111111111111111\");\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\n\n  useEffect(() => {\n    const checkEligibilityFunc = async () => {\n      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\n        return;\n      }\n      setFirstRun(false);\n      \n      const { guardReturn, ownedTokens } = await guardChecker(\n        umi, candyGuard, candyMachine, solanaTime\n      );\n\n      setOwnedTokens(ownedTokens);\n      setGuards(guardReturn);\n      setIsAllowed(false);\n\n      let allowed = false;\n      for (const guard of guardReturn) {\n        if (guard.allowed) {\n          allowed = true;\n          break;\n        }\n      }\n\n      setIsAllowed(allowed);\n      setLoading(false);\n    };\n\n    checkEligibilityFunc();\n    // On purpose: not check for candyMachine, candyGuard, solanaTime\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [umi, checkEligibility, firstRun]);\n\n  const PageContent = () => {\n    return (\n      <>\n        <style jsx global>\n          {`\n      body {\n          background: #2d3748; \n       }\n   `}\n        </style>\n        <Card>\n          <CardHeader>\n            <Flex minWidth='max-content' alignItems='center' gap='2'>\n              <Box>\n                <Heading size='md'>{headerText}</Heading>\n              </Box>\n              {loading ? (<></>) : (\n                <Flex justifyContent=\"flex-end\" marginLeft=\"auto\">\n                  <Box background={\"teal.100\"} borderRadius={\"5px\"} minWidth={\"50px\"} minHeight={\"50px\"} p={2} >\n                    <VStack >\n                      <Text fontSize={\"sm\"}>Available NFTs:</Text>\n                      <Text fontWeight={\"semibold\"}>{Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)}</Text>\n                    </VStack>\n                  </Box>\n                </Flex>\n              )}\n            </Flex>\n          </CardHeader>\n\n          <CardBody>\n            <Center>\n              <Box\n                rounded={'lg'}\n                mt={-12}\n                pos={'relative'}>\n                <Image\n                  rounded={'lg'}\n                  height={230}\n                  objectFit={'cover'}\n                  alt={\"project Image\"}\n                  src={image}\n                />\n              </Box>\n            </Center>\n            <Stack divider={<StackDivider />} spacing='8'>\n              {loading ? (\n                <div>\n                  <Divider my=\"10px\" />\n                  <Skeleton height=\"30px\" my=\"10px\" />\n                  <Skeleton height=\"30px\" my=\"10px\" />\n                  <Skeleton height=\"30px\" my=\"10px\" />\n                </div>\n              ) : (\n                <ButtonList\n                  guardList={guards}\n                  candyMachine={candyMachine}\n                  candyGuard={candyGuard}\n                  umi={umi}\n                  ownedTokens={ownedTokens}\n                  setGuardList={setGuards}\n                  mintsCreated={mintsCreated}\n                  setMintsCreated={setMintsCreated}\n                  onOpen={onShowNftOpen}\n                  setCheckEligibility={setCheckEligibility}\n                />\n              )}\n            </Stack>\n          </CardBody>\n        </Card >\n        {umi.identity.publicKey === candyMachine?.authority ? (\n          <>\n            <Center>\n              <Button backgroundColor={\"red.200\"} marginTop={\"10\"} onClick={onInitializerOpen}>Initialize Everything!</Button>\n            </Center>\n            <Modal isOpen={isInitializerOpen} onClose={onInitializerClose}>\n              <ModalOverlay />\n              <ModalContent maxW=\"600px\">\n                <ModalHeader>Initializer</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                  < InitializeModal umi={umi} candyMachine={candyMachine} candyGuard={candyGuard} />\n                </ModalBody>\n              </ModalContent>\n            </Modal>\n\n          </>)\n          :\n          (<></>)\n        }\n\n        <Modal isOpen={isShowNftOpen} onClose={onShowNftClose}>\n          <ModalOverlay />\n          <ModalContent>\n            <ModalHeader>Your minted NFT:</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n              <ShowNft nfts={mintsCreated} />\n            </ModalBody>\n          </ModalContent>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <main>\n      <div className={styles.wallet}>\n        <WalletMultiButtonDynamic />\n      </div>\n\n      <div className={styles.center}>\n        <PageContent key=\"content\" />\n      </div>\n    </main>\n  );\n}\n"
        }
    ]
}