{
    "sourceFile": "pages/components/initializeModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1731240228700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731240264108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import { createLutForCandyMachineAndGuard } from \"../utils/createLutForCandyGuard\";\n+import {\n+  Button,\n+  Modal,\n+  InputNumber,\n+  Typography,\n+  Row,\n+  Col,\n+  notification,\n+} from \"antd\";\n+import {\n+  CandyGuard,\n+  CandyMachine,\n+  getMerkleRoot,\n+} from \"@metaplex-foundation/mpl-candy-machine\";\n+import {\n+  Umi,\n+  publicKey,\n+  sol,\n+  some,\n+  transactionBuilder,\n+} from \"@metaplex-foundation/umi\";\n+import {\n+  transferSol,\n+  addMemo,\n+  setComputeUnitPrice,\n+  setComputeUnitLimit,\n+} from \"@metaplex-foundation/mpl-toolbox\";\n+import React, { useEffect, useState } from \"react\";\n+import { allowLists } from \".././allowlist\";\n+import { getRequiredCU } from \"../utils/mintHelper\";\n+\n+const { Text } = Typography;\n+\n+const InitializeModal = ({ umi, candyMachine, candyGuard, visible, onClose }) => {\n+  const [computeUnitPrice, setComputeUnitPriceState] = useState(0);\n+  const [computeUnitLimit, setComputeUnitLimitState] = useState(0);\n+  const [solAmount, setSolAmount] = useState(0);\n+\n+  const handleCreateLUT = async () => {\n+    try {\n+      await createLutForCandyMachineAndGuard(umi, candyMachine, candyGuard, computeUnitPrice, computeUnitLimit, solAmount);\n+      notification.success({\n+        message: \"LUT Created Successfully\",\n+        description: \"The LUT for the Candy Machine and Guard has been created.\",\n+      });\n+      onClose();\n+    } catch (error) {\n+      notification.error({\n+        message: \"Error Creating LUT\",\n+        description: error.message,\n+      });\n+    }\n+  };\n+\n+  return (\n+    <Modal\n+      title=\"Initialize Candy Machine\"\n+      visible={visible}\n+      onCancel={onClose}\n+      footer={[\n+        <Button key=\"cancel\" onClick={onClose}>\n+          Cancel\n+        </Button>,\n+        <Button key=\"submit\" type=\"primary\" onClick={handleCreateLUT}>\n+          Create LUT\n+        </Button>,\n+      ]}\n+    >\n+      <Row gutter={16}>\n+        <Col span={12}>\n+          <Text>Compute Unit Price:</Text>\n+          <InputNumber\n+            min={0}\n+            value={computeUnitPrice}\n+            onChange={(value) => setComputeUnitPriceState(value)}\n+          />\n+        </Col>\n+        <Col span={12}>\n+          <Text>Compute Unit Limit:</Text>\n+          <InputNumber\n+            min={0}\n+            value={computeUnitLimit}\n+            onChange={(value) => setComputeUnitLimitState(value)}\n+          />\n+        </Col>\n+      </Row>\n+      <Row gutter={16} style={{ marginTop: 16 }}>\n+        <Col span={24}>\n+          <Text>Sol Amount:</Text>\n+          <InputNumber\n+            min={0}\n+            value={solAmount}\n+            onChange={(value) => setSolAmount(value)}\n+          />\n+        </Col>\n+      </Row>\n+    </Modal>\n+  );\n+};\n+\n+export default InitializeModal;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731241100743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,26 +10,13 @@\n } from \"antd\";\n import {\n   CandyGuard,\n   CandyMachine,\n-  getMerkleRoot,\n } from \"@metaplex-foundation/mpl-candy-machine\";\n import {\n   Umi,\n-  publicKey,\n-  sol,\n-  some,\n-  transactionBuilder,\n } from \"@metaplex-foundation/umi\";\n-import {\n-  transferSol,\n-  addMemo,\n-  setComputeUnitPrice,\n-  setComputeUnitLimit,\n-} from \"@metaplex-foundation/mpl-toolbox\";\n-import React, { useEffect, useState } from \"react\";\n-import { allowLists } from \".././allowlist\";\n-import { getRequiredCU } from \"../utils/mintHelper\";\n+import React, { useState } from \"react\";\n \n const { Text } = Typography;\n \n const InitializeModal = ({ umi, candyMachine, candyGuard, visible, onClose }) => {\n@@ -38,9 +25,10 @@\n   const [solAmount, setSolAmount] = useState(0);\n \n   const handleCreateLUT = async () => {\n     try {\n-      await createLutForCandyMachineAndGuard(umi, candyMachine, candyGuard, computeUnitPrice, computeUnitLimit, solAmount);\n+      // 确保只传递 5 个参数\n+      await createLutForCandyMachineAndGuard(umi, null, candyMachine, candyGuard, umi.identity.publicKey);\n       notification.success({\n         message: \"LUT Created Successfully\",\n         description: \"The LUT for the Candy Machine and Guard has been created.\",\n       });\n@@ -98,107 +86,5 @@\n     </Modal>\n   );\n };\n \n-export default InitializeModal;\n-import { createLutForCandyMachineAndGuard } from \"../utils/createLutForCandyGuard\";\n-import {\n-  Button,\n-  Modal,\n-  InputNumber,\n-  Typography,\n-  Row,\n-  Col,\n-  notification,\n-} from \"antd\";\n-import {\n-  CandyGuard,\n-  CandyMachine,\n-  getMerkleRoot,\n-} from \"@metaplex-foundation/mpl-candy-machine\";\n-import {\n-  Umi,\n-  publicKey,\n-  sol,\n-  some,\n-  transactionBuilder,\n-} from \"@metaplex-foundation/umi\";\n-import {\n-  transferSol,\n-  addMemo,\n-  setComputeUnitPrice,\n-  setComputeUnitLimit,\n-} from \"@metaplex-foundation/mpl-toolbox\";\n-import React, { useEffect, useState } from \"react\";\n-import { allowLists } from \"@/allowlist\";\n-import { getRequiredCU } from \"@/utils/mintHelper\";\n-\n-const { Text } = Typography;\n-\n-const InitializeModal = ({ umi, candyMachine, candyGuard, visible, onClose }) => {\n-  const [computeUnitPrice, setComputeUnitPriceState] = useState(0);\n-  const [computeUnitLimit, setComputeUnitLimitState] = useState(0);\n-  const [solAmount, setSolAmount] = useState(0);\n-\n-  const handleCreateLUT = async () => {\n-    try {\n-      await createLutForCandyMachineAndGuard(umi, candyMachine, candyGuard, computeUnitPrice, computeUnitLimit, solAmount);\n-      notification.success({\n-        message: \"LUT Created Successfully\",\n-        description: \"The LUT for the Candy Machine and Guard has been created.\",\n-      });\n-      onClose();\n-    } catch (error) {\n-      notification.error({\n-        message: \"Error Creating LUT\",\n-        description: error.message,\n-      });\n-    }\n-  };\n-\n-  return (\n-    <Modal\n-      title=\"Initialize Candy Machine\"\n-      visible={visible}\n-      onCancel={onClose}\n-      footer={[\n-        <Button key=\"cancel\" onClick={onClose}>\n-          Cancel\n-        </Button>,\n-        <Button key=\"submit\" type=\"primary\" onClick={handleCreateLUT}>\n-          Create LUT\n-        </Button>,\n-      ]}\n-    >\n-      <Row gutter={16}>\n-        <Col span={12}>\n-          <Text>Compute Unit Price:</Text>\n-          <InputNumber\n-            min={0}\n-            value={computeUnitPrice}\n-            onChange={(value) => setComputeUnitPriceState(value)}\n-          />\n-        </Col>\n-        <Col span={12}>\n-          <Text>Compute Unit Limit:</Text>\n-          <InputNumber\n-            min={0}\n-            value={computeUnitLimit}\n-            onChange={(value) => setComputeUnitLimitState(value)}\n-          />\n-        </Col>\n-      </Row>\n-      <Row gutter={16} style={{ marginTop: 16 }}>\n-        <Col span={24}>\n-          <Text>Sol Amount:</Text>\n-          <InputNumber\n-            min={0}\n-            value={solAmount}\n-            onChange={(value) => setSolAmount(value)}\n-          />\n-        </Col>\n-      </Row>\n-    </Modal>\n-  );\n-};\n-\n export default InitializeModal;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731240228700,
            "name": "Commit-0",
            "content": "import { createLutForCandyMachineAndGuard } from \"../utils/createLutForCandyGuard\";\nimport {\n  Button,\n  Modal,\n  InputNumber,\n  Typography,\n  Row,\n  Col,\n  notification,\n} from \"antd\";\nimport {\n  CandyGuard,\n  CandyMachine,\n  getMerkleRoot,\n} from \"@metaplex-foundation/mpl-candy-machine\";\nimport {\n  Umi,\n  publicKey,\n  sol,\n  some,\n  transactionBuilder,\n} from \"@metaplex-foundation/umi\";\nimport {\n  transferSol,\n  addMemo,\n  setComputeUnitPrice,\n  setComputeUnitLimit,\n} from \"@metaplex-foundation/mpl-toolbox\";\nimport React, { useEffect, useState } from \"react\";\nimport { allowLists } from \"@/allowlist\";\nimport { getRequiredCU } from \"@/utils/mintHelper\";\n\nconst { Text } = Typography;\n\nconst InitializeModal = ({ umi, candyMachine, candyGuard, visible, onClose }) => {\n  const [computeUnitPrice, setComputeUnitPriceState] = useState(0);\n  const [computeUnitLimit, setComputeUnitLimitState] = useState(0);\n  const [solAmount, setSolAmount] = useState(0);\n\n  const handleCreateLUT = async () => {\n    try {\n      await createLutForCandyMachineAndGuard(umi, candyMachine, candyGuard, computeUnitPrice, computeUnitLimit, solAmount);\n      notification.success({\n        message: \"LUT Created Successfully\",\n        description: \"The LUT for the Candy Machine and Guard has been created.\",\n      });\n      onClose();\n    } catch (error) {\n      notification.error({\n        message: \"Error Creating LUT\",\n        description: error.message,\n      });\n    }\n  };\n\n  return (\n    <Modal\n      title=\"Initialize Candy Machine\"\n      visible={visible}\n      onCancel={onClose}\n      footer={[\n        <Button key=\"cancel\" onClick={onClose}>\n          Cancel\n        </Button>,\n        <Button key=\"submit\" type=\"primary\" onClick={handleCreateLUT}>\n          Create LUT\n        </Button>,\n      ]}\n    >\n      <Row gutter={16}>\n        <Col span={12}>\n          <Text>Compute Unit Price:</Text>\n          <InputNumber\n            min={0}\n            value={computeUnitPrice}\n            onChange={(value) => setComputeUnitPriceState(value)}\n          />\n        </Col>\n        <Col span={12}>\n          <Text>Compute Unit Limit:</Text>\n          <InputNumber\n            min={0}\n            value={computeUnitLimit}\n            onChange={(value) => setComputeUnitLimitState(value)}\n          />\n        </Col>\n      </Row>\n      <Row gutter={16} style={{ marginTop: 16 }}>\n        <Col span={24}>\n          <Text>Sol Amount:</Text>\n          <InputNumber\n            min={0}\n            value={solAmount}\n            onChange={(value) => setSolAmount(value)}\n          />\n        </Col>\n      </Row>\n    </Modal>\n  );\n};\n\nexport default InitializeModal;"
        }
    ]
}