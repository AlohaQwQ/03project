{
    "sourceFile": "pages/MintNFTs.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1731166093701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731166100522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -365,13 +365,13 @@\n               />\n             </Content>\n \n             <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"communityIntro\" /></p>\n-          <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"collaboration\" /></p>\n-          <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"mission\" /></p>\n-          <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\n-          <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\n-          <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\n+            <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"collaboration\" /></p>\n+            <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"mission\" /></p>\n+            <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\n+            <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\n+            <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\n             <p style={{ marginTop: '3%' }}>\n               <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}>Twitter</a>\n               <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}>Telegram</a>\n             </p>\n"
                },
                {
                    "date": 1731166315233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,10 +371,10 @@\n             <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\n             <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\n             <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\n             <p style={{ marginTop: '3%' }}>\n-              <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}>Twitter</a>\n-              <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}>Telegram</a>\n+              <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}><FormattedMessage id=\"twitter\" /></a>\n+              <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}><FormattedMessage id=\"telegram\" /></a>\n             </p>\n           </div>\n         </Content>\n         <Content style={{ display: 'flex', alignItems: 'center' }}>\n@@ -401,9 +401,9 @@\n             src={stopMint ? \"/resources/images/status-live.png\" : \"/resources/images/status-stop.png\"} // 根据 StopMint 状态选择图片\n             style={{ width: '25px', height: 'auto' }} // 设置图片宽度自适应\n             preview={false} // 禁用预览\n           />\n-          <p style={{ fontSize: '20px', marginLeft: '11%' }}>Presale</p> {/* 添加右边距以增加间隔 */}\n+          <p style={{ fontSize: '20px', marginLeft: '11%' }}><FormattedMessage id=\"presale\" /></p> {/* 添加右边距以增加间隔 */}\n         </Content>\n \n         <div style={{ marginTop: '1%', display: 'flex', flex: 1, gap: '1%' }}> {/* 使用 Flexbox 布局 */}\n           <Content\n@@ -415,10 +415,10 @@\n               borderRadius: '8px', // 设置圆角\n             }}\n           >\n             <div style={{ textAlign: 'left', width: '100%' }}>\n-              <p style={{ fontSize: '16px', marginBottom: '5%' }}>Mint price</p>\n-              <p style={{ fontSize: '24px', fontWeight: 'bold' }}>3SOL</p> {/* 设置字体大小和加粗 */}\n+              <p style={{ fontSize: '16px', marginBottom: '5%' }}><FormattedMessage id=\"mintPrice\" /></p>\n+              <p style={{ fontSize: '24px', fontWeight: 'bold' }}><FormattedMessage id=\"mintPriceValue\" /></p>{/* 设置字体大小和加粗 */}\n             </div>\n           </Content>\n           <Content\n             style={{\n@@ -432,17 +432,17 @@\n             }}\n           >\n             <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\n               <div style={{ textAlign: 'left' }}>\n-                <p style={{ fontSize: '16px', marginBottom: '12%' }} > Availability</p>\n-                <p style={{ fontSize: '24px', fontWeight: 'bold' }} > Presale only</p>\n+                <p style={{ fontSize: '16px', marginBottom: '12%' }} ><FormattedMessage id=\"availability\" /></p>\n+                <p style={{ fontSize: '24px', fontWeight: 'bold' }} ><FormattedMessage id=\"presaleOnly\" /></p>\n               </div>\n               <Button\n                 onClick={canMint && disableMint ? onClick : null} // 当 canMint 为 true 且 disableMint 为 false 时，点击事件为 onClick\n                 disabled={!canMint || !disableMint} // 根据 canMint 和 disableMint 设置按钮禁用状态\n                 className={`mint-button ${!disableMint ? 'disabled' : ''}`} // 根据 disableMint 设置类名\n               >\n-                {!disableMint ? 'Not Mint' : canMint ? 'Mint' : 'Minted'}\n+                <FormattedMessage id={!disableMint ? 'notMint' : canMint ? 'mint' : 'minted'} />\n               </Button>\n             </div>\n           </Content>\n         </div >\n"
                }
            ],
            "date": 1731166093701,
            "name": "Commit-0",
            "content": "import styles from \"../styles/Home.module.css\";\nimport { useMetaplex } from \"./useMetaplex\";\nimport React, { useState } from \"react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  AppstoreOutlined,\n  BarChartOutlined,\n  CloudOutlined,\n  ShopOutlined,\n  TeamOutlined,\n  UploadOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n} from '@ant-design/icons';\nimport { Button, Card, Row, Col, Spin, Layout, Modal, Menu, Image } from 'antd';\nimport { FormattedMessage } from 'react-intl';\n\nconst { Header, Sider, Content, Footer } = Layout;\n\nconst MintNFTs = ({ onClusterChange }) => {\n  const { metaplex } = useMetaplex();\n  const wallet = useWallet();\n\n  const [nft, setNft] = useState(null);\n\n  const [disableMint, setDisableMint] = useState(true);\n  const [canMint, setCanMint] = useState(true);\n  const [stopMint, setStopMint] = useState(true);\n\n  const candyMachineAddress = new PublicKey(\"BB622ucoRBPB1QCCBVxNvwVbYXzDpyPm8RsUShC9iGqG\");//Soe1xuE4EU81KsnuJ66SJkiSyGvDfNzPAk1g4qi6KjF BB622ucoRBPB1QCCBVxNvwVbYXzDpyPm8RsUShC9iGqG\n\n  let candyMachine;\n  let walletBalance;\n\n  const addListener = async () => {\n    // 检查 candyMachine.candyGuard 是否为 null\n    if (candyMachine.candyGuard) {\n      // 添加监听器以监控 candy guard 的变化\n      metaplex.connection.onAccountChange(candyMachine.candyGuard.address, () => checkEligibility());\n    } else {\n      console.error(\"candyMachine.candyGuard 为 null\");\n      // 处理错误情况\n    }\n\n    // add a listener to monitor changes to the user's wallet\n    metaplex.connection.onAccountChange(metaplex.identity().publicKey,\n      () => checkEligibility()\n    );\n\n    // add a listener to reevaluate if the user is allowed to mint if startDate is reached\n    const slot = await metaplex.connection.getSlot();\n    const solanaTime = await metaplex.connection.getBlockTime(slot);\n    if (candyMachine.candyGuard && candyMachine.candyGuard.guards != null) {\n      const startDateGuard = candyMachine.candyGuard.guards.startDate;\n      if (startDateGuard != null) {\n        const candyStartDate = startDateGuard.date.toString(10);\n        const refreshTime = candyStartDate - solanaTime.toString(10);\n        if (refreshTime > 0) {\n          setTimeout(() => checkEligibility(), refreshTime * 1000);\n        }\n      }\n\n      // also reevaluate eligibility after endDate is reached\n      const endDateGuard = candyMachine.candyGuard.guards.endDate;\n      if (endDateGuard != null) {\n        const candyEndDate = endDateGuard.date.toString(10);\n        const refreshTime = solanaTime.toString(10) - candyEndDate;\n        if (refreshTime > 0) {\n          setTimeout(() => checkEligibility(), refreshTime * 1000);\n        }\n      }\n    }\n\n  };\n\n  const handleError = (error) => {\n    console.error(\"error：\" + error);\n  };\n\n  const checkEligibility = async () => {\n    try {\n\n      //wallet not connected?\n      if (!wallet.connected) {\n        setDisableMint(false);\n        console.error(\"wallet not connect\");\n        return;\n      }\n\n      // read candy machine state from chain\n      candyMachine = await metaplex\n        .candyMachines()\n        .findByAddress({ address: candyMachineAddress });\n\n      // enough items available?\n      if (\n        candyMachine.itemsMinted.toString(10) -\n        candyMachine.itemsAvailable.toString(10) >\n        0\n      ) {\n        console.error(\"not enough items available\");\n        setDisableMint(false);\n        setStopMint(false);\n        return;\n      }\n\n      // guard checks have to be done for the relevant guard group! Example is for the default groups defined in Part 1 of the CM guide\n      let guard = null;\n\n      // 检查 candyMachine.candyGuard 是否为 null\n      if (candyMachine.candyGuard) {\n        guard = candyMachine.candyGuard.guards;\n        // 继续处理 guard\n      } else {\n        console.error(\"candyMachine.candyGuard 为 null\");\n        // 处理错误情况\n      }\n\n      // Calculate current time based on Solana BlockTime which the on chain program is using - startTime and endTime guards will need that\n      const slot = await metaplex.connection.getSlot();\n      const solanaTime = await metaplex.connection.getBlockTime(slot);\n\n      if (guard && guard.startDate != null) {\n        const candyStartDate = guard.startDate.date.toString(10);\n        if (solanaTime < candyStartDate) {\n          console.error(\"startDate: CM not live yet\");\n          setDisableMint(false);\n          return;\n        }\n      } else {\n        console.error(\"guard 为 null 或 startDate 不存在\");\n        // 处理错误情况\n      }\n\n      if (guard && guard.endDate != null) {\n        const candyEndDate = guard.endDate.date.toString(10);\n        if (solanaTime > candyEndDate) {\n          console.error(\"endDate: CM not live anymore\");\n          setDisableMint(false);\n          return;\n        }\n      }\n\n      if (guard && guard.addressGate != null) {\n        if (metaplex.identity().publicKey.toBase58() != guard.addressGate.address.toBase58()) {\n          console.error(\"addressGate: You are not allowed to mint\");\n          setDisableMint(false);\n          return;\n        }\n      }\n\n      if (guard && guard.mintLimit != null) {\n        const mitLimitCounter = metaplex.candyMachines().pdas().mintLimitCounter({\n          id: guard.mintLimit.id,\n          user: metaplex.identity().publicKey,\n          candyMachine: candyMachine.address,\n          candyGuard: candyMachine.candyGuard.address,\n        });\n        //Read Data from chain\n        const mintedAmountBuffer = await metaplex.connection.getAccountInfo(mitLimitCounter, \"processed\");\n        let mintedAmount;\n        if (mintedAmountBuffer != null) {\n          mintedAmount = mintedAmountBuffer.data.readUintLE(0, 1);\n        }\n        if (mintedAmount != null && mintedAmount >= guard.mintLimit.limit) {\n          console.error(\"mintLimit: mintLimit reached!\");\n          setDisableMint(false);\n          return;\n        }\n      }\n\n      if (guard && guard.solPayment != null) {\n        walletBalance = await metaplex.connection.getBalance(\n          metaplex.identity().publicKey\n        );\n\n        const costInLamports = guard.solPayment.amount.basisPoints.toString(10);\n\n        if (costInLamports > walletBalance) {\n          console.error(\"solPayment: Not enough SOL!\");\n          setDisableMint(false);\n          return;\n        }\n      }\n\n      if (guard && guard.freezeSolPayment != null) {\n        walletBalance = await metaplex.connection.getBalance(\n          metaplex.identity().publicKey\n        );\n\n        const costInLamports = guard.freezeSolPayment.amount.basisPoints.toString(10);\n\n        if (costInLamports > walletBalance) {\n          console.error(\"freezeSolPayment: Not enough SOL!\");\n          setDisableMint(false);\n          return;\n        }\n      }\n\n      if (guard && guard.nftGate != null) {\n        const ownedNfts = await metaplex.nfts().findAllByOwner({ owner: metaplex.identity().publicKey });\n        const nftsInCollection = ownedNfts.filter(obj => {\n          return (obj.collection?.address.toBase58() === guard.nftGate.requiredCollection.toBase58()) && (obj.collection?.verified === true);\n        });\n        if (nftsInCollection.length < 1) {\n          console.error(\"nftGate: The user has no NFT to pay with!\");\n          setDisableMint(false);\n          setCanMint(false);\n          return;\n        }\n      }\n\n      if (guard && guard.nftBurn != null) {\n        const ownedNfts = await metaplex.nfts().findAllByOwner({ owner: metaplex.identity().publicKey });\n        const nftsInCollection = ownedNfts.filter(obj => {\n          return (obj.collection?.address.toBase58() === guard.nftBurn.requiredCollection.toBase58()) && (obj.collection?.verified === true);\n        });\n        if (nftsInCollection.length < 1) {\n          console.error(\"nftBurn: The user has no NFT to pay with!\");\n          setDisableMint(false);\n          setCanMint(false);\n          return;\n        }\n      }\n\n      if (guard && guard.nftPayment != null) {\n        const ownedNfts = await metaplex.nfts().findAllByOwner({ owner: metaplex.identity().publicKey });\n        const nftsInCollection = ownedNfts.filter(obj => {\n          return (obj.collection?.address.toBase58() === guard.nftPayment.requiredCollection.toBase58()) && (obj.collection?.verified === true);\n        });\n        if (nftsInCollection.length < 1) {\n          console.error(\"nftPayment: The user has no NFT to pay with!\");\n          setDisableMint(false);\n          setCanMint(false);\n          return;\n        }\n      }\n\n      if (guard && guard.redeemedAmount != null) {\n        if (guard.redeemedAmount.maximum.toString(10) <= candyMachine.itemsMinted.toString(10)) {\n          console.error(\"redeemedAmount: Too many NFTs have already been minted!\");\n          setDisableMint(false);\n          return;\n        }\n      }\n\n      if (guard && guard.tokenBurn != null) {\n        const ata = await metaplex.tokens().pdas().associatedTokenAccount({ mint: guard.tokenBurn.mint, owner: metaplex.identity().publicKey });\n        const balance = await metaplex.connection.getTokenAccountBalance(ata);\n        if (balance < guard.tokenBurn.amount.basisPoints.toNumber()) {\n          console.error(\"tokenBurn: Not enough SPL tokens to burn!\");\n          setDisableMint(false);\n          return;\n        }\n      }\n\n      if (guard && guard.tokenGate != null) {\n        const ata = await metaplex.tokens().pdas().associatedTokenAccount({ mint: guard.tokenGate.mint, owner: metaplex.identity().publicKey });\n        const balance = await metaplex.connection.getTokenAccountBalance(ata);\n        if (balance < guard.tokenGate.amount.basisPoints.toNumber()) {\n          console.error(\"tokenGate: Not enough SPL tokens!\");\n          setDisableMint(false);\n          return;\n        }\n      }\n\n      if (guard && guard.tokenPayment != null) {\n        const ata = await metaplex.tokens().pdas().associatedTokenAccount({ mint: guard.tokenPayment.mint, owner: metaplex.identity().publicKey });\n        const balance = await metaplex.connection.getTokenAccountBalance(ata);\n        if (balance < guard.tokenPayment.amount.basisPoints.toNumber()) {\n          console.error(\"tokenPayment: Not enough SPL tokens to pay!\");\n          setDisableMint(false);\n          return;\n        }\n        if (guard && guard.freezeTokenPayment != null) {\n          const ata = await metaplex.tokens().pdas().associatedTokenAccount({ mint: guard.freezeTokenPayment.mint, owner: metaplex.identity().publicKey });\n          const balance = await metaplex.connection.getTokenAccountBalance(ata);\n          if (balance < guard.tokenPayment.amount.basisPoints.toNumber()) {\n            console.error(\"freezeTokenPayment: Not enough SPL tokens to pay!\");\n            setDisableMint(false);\n            return;\n          }\n        }\n      }\n\n      //good to go! Allow them to mint\n      setDisableMint(true);\n      setCanMint(true);\n      console.info(\"Can mint!\");\n    } catch (error) {\n      handleError(error); // 调用自定义错误处理\n    }\n  };\n\n  // show and do nothing if no wallet is connected\n  // if (!wallet.connected) {\n  //   return null;\n  // }\n  let onClick;\n  if (wallet.connected) {\n    console.log('disableMint:' + disableMint);\n    console.log('canMint:' + canMint);\n    // if it's the first time we are processing this function with a connected wallet we read the CM data and add Listeners\n    if (candyMachine === undefined) {\n      (async () => {\n        // read candy machine data to get the candy guards address\n        await checkEligibility();\n        // Add listeners to refresh CM data to reevaluate if minting is allowed after the candy guard updates or startDate is reached\n        addListener();\n      }\n      )();\n    }\n\n    onClick = async () => {\n      // Here the actual mint happens. Depending on the guards that you are using you have to run some pre validation beforehand \n      // Read more: https://docs.metaplex.com/programs/candy-machine/minting#minting-with-pre-validation\n      // const nftsMint = await metaplex.candyMachinesV2().findMintedNfts({ candyMachine });\n\n      // console.log('nftsMint:' + nftsMint);\n      try {\n        console.log('mint!');\n        const { nft } = await metaplex.candyMachines().mint({\n          candyMachine,\n          collectionUpdateAuthority: candyMachine.authorityAddress,\n          group: 'Public',\n        });\n        setNft(nft);\n      } catch (error) {\n        handleError(error); // 调用自定义错误处理\n      }\n    };\n  }\n\n  return (\n    <Layout style={{ position: 'relative', background: 'rgba(255, 255, 255, 0)' }}>\n      <Image\n        alt=\"img\"\n        src=\"/resources/images/mintback.png\" // 背景图路径\n        preview={false} // 禁用预览\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          objectFit: 'cover', // 确保图片覆盖整个区域\n          zIndex: -1 // 确保背景图在其他内容后面\n        }}\n      />\n      <div style={{ marginTop: '6%', marginLeft: 80, padding: 0, display: 'flex', flex: 1, gap: '1%', alignItems: 'center' }}> {/* 使用 Flexbox 布局 */}\n        <Content width=\"70%\" > {/* 设置为完全透明 */}\n          <div style={{ fontSize: '20px', flex: '0 0 70%' }}>\n            <Content style={{\n              display: 'flex', // 使用 Flexbox 布局\n              marginBottom: '3%'\n            }}> {/* 使用 Flexbox 布局 */}\n\n              <p style={{ fontSize: '60px' }}><FormattedMessage id=\"zeroSan\" /></p>\n              <Image\n                alt=\"account\"\n                src=\"/resources/images/account.png\"\n                style={{ width: '30px', height: 'auto', marginLeft: '30px' }} // 设置图片宽度自适应\n                preview={false} // 禁用预览\n              />\n            </Content>\n\n            <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"communityIntro\" /></p>\n          <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"collaboration\" /></p>\n          <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"mission\" /></p>\n          <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\n          <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\n          <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\n            <p style={{ marginTop: '3%' }}>\n              <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}>Twitter</a>\n              <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}>Telegram</a>\n            </p>\n          </div>\n        </Content>\n        <Content style={{ display: 'flex', alignItems: 'center' }}>\n          <Image\n            alt=\"03-logo\"\n            src=\"/resources/images/03-logo.png\"\n            style={{ width: '400px', height: 'auto' }} // 设置图片宽度自适应\n            preview={false} // 禁用预览\n          />\n        </Content>\n      </div>\n      <Footer style={{ textAlign: 'center', background: 'rgba(255, 255, 255, 0)', marginLeft: 80, marginTop: 80, padding: 0 }}>\n        <Content style={{\n          padding: 16,\n          height: 55,\n          width: '9%',\n          background: 'rgba(128, 128, 128, 0.5)', // 设置透明的灰色背景\n          borderRadius: '24px', // 设置圆角\n          display: 'flex', // 使用 Flexbox 布局\n          alignItems: 'center', // 垂直居中对齐\n        }}> {/* 使用 Flexbox 布局 */}\n          <Image\n            alt=\"status-live\"\n            src={stopMint ? \"/resources/images/status-live.png\" : \"/resources/images/status-stop.png\"} // 根据 StopMint 状态选择图片\n            style={{ width: '25px', height: 'auto' }} // 设置图片宽度自适应\n            preview={false} // 禁用预览\n          />\n          <p style={{ fontSize: '20px', marginLeft: '11%' }}>Presale</p> {/* 添加右边距以增加间隔 */}\n        </Content>\n\n        <div style={{ marginTop: '1%', display: 'flex', flex: 1, gap: '1%' }}> {/* 使用 Flexbox 布局 */}\n          <Content\n            style={{\n              padding: 40,\n              minHeight: 120,\n              flex: '0 0 30%',\n              background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\n              borderRadius: '8px', // 设置圆角\n            }}\n          >\n            <div style={{ textAlign: 'left', width: '100%' }}>\n              <p style={{ fontSize: '16px', marginBottom: '5%' }}>Mint price</p>\n              <p style={{ fontSize: '24px', fontWeight: 'bold' }}>3SOL</p> {/* 设置字体大小和加粗 */}\n            </div>\n          </Content>\n          <Content\n            style={{\n              padding: 40,\n              minHeight: 120,\n              flex: '0 0 30%',\n              background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\n              borderRadius: '8px', // 设置圆角\n              display: 'flex', // 使用 Flexbox 布局\n              flexDirection: 'column', // 垂直排列\n            }}\n          >\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\n              <div style={{ textAlign: 'left' }}>\n                <p style={{ fontSize: '16px', marginBottom: '12%' }} > Availability</p>\n                <p style={{ fontSize: '24px', fontWeight: 'bold' }} > Presale only</p>\n              </div>\n              <Button\n                onClick={canMint && disableMint ? onClick : null} // 当 canMint 为 true 且 disableMint 为 false 时，点击事件为 onClick\n                disabled={!canMint || !disableMint} // 根据 canMint 和 disableMint 设置按钮禁用状态\n                className={`mint-button ${!disableMint ? 'disabled' : ''}`} // 根据 disableMint 设置类名\n              >\n                {!disableMint ? 'Not Mint' : canMint ? 'Mint' : 'Minted'}\n              </Button>\n            </div>\n          </Content>\n        </div >\n      </Footer >\n    </Layout >\n  );\n};\n{/* \n  <div>\n    <h1>NFT Mint Address</h1>\n    <div>\n      <input\n        type=\"text\"\n        value={nft ? nft.mint.address.toBase58() : \"\"}\n        readOnly\n      />\n    </div>\n    {nft && (\n      <div className={styles.nftPreview}>\n        <h1>{nft.name}</h1>\n        <img\n          src={nft?.json?.image || \"/fallbackImage.jpg\"}\n          alt=\"The downloaded illustration of the provided NFT address.\"\n          className={styles.nftImage}\n        />\n      </div>\n    )}\n  </div> */}\nexport default MintNFTs; "
        }
    ]
}