{
    "sourceFile": "pages/MintNFTs3.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1731334646253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731334853121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,349 @@\n+import {\r\n+  PublicKey,\r\n+  publicKey,\r\n+  Umi,\r\n+} from \"@metaplex-foundation/umi\";\r\n+import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\r\n+import dynamic from \"next/dynamic\";\r\n+import { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\r\n+import { useUmi } from \"./utils/useUmi\";\r\n+import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\"\r\n+import { guardChecker } from \"./utils/checkAllowed\";\r\n+//import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\r\n+import { Center, Skeleton, useDisclosure, ModalHeader, ModalOverlay, Box, Divider, useToast, VStack, Flex } from '@chakra-ui/react';\r\n+import { ButtonList } from \"./components/mintButton\";\r\n+import { GuardReturn } from \"./utils/checkerHelper\";\r\n+import { ShowNft } from \"./components/showNft\";\r\n+import { InitializeModal } from \"./components/initializeModal\";\r\n+import { image, headerText } from \"./settings\";\r\n+import { useSolanaTime } from \"./utils/SolanaTimeContext\";\r\n+import { Button, Card, Row, Col, Spin, Layout, Modal, Menu, Image } from 'antd';\r\n+import { FormattedMessage } from 'react-intl';\r\n+const { Header, Sider, Content, Footer } = Layout;\r\n+\r\n+const WalletMultiButtonDynamic = dynamic(\r\n+  async () =>\r\n+    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\r\n+  { ssr: false }\r\n+);\r\n+\r\n+const useCandyMachine = (\r\n+  umi: Umi,\r\n+  candyMachineId: string,\r\n+  checkEligibility: boolean,\r\n+  setCheckEligibility: Dispatch<SetStateAction<boolean>>,\r\n+  firstRun: boolean,\r\n+  setfirstRun: Dispatch<SetStateAction<boolean>>\r\n+) => {\r\n+  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n+  const [candyGuard, setCandyGuard] = useState<CandyGuard>();\r\n+  const toast = useToast();\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    (async () => {\r\n+      if (checkEligibility) {\r\n+        if (!candyMachineId) {\r\n+          console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\");\r\n+          // if (!toast.isActive(\"no-cm\")) {\r\n+          //   toast({\r\n+          //     id: \"no-cm\",\r\n+          //     title: \"No candy machine in .env!\",\r\n+          //     description: \"Add your candy machine address to the .env file!\",\r\n+          //     status: \"error\",\r\n+          //     duration: 999999,\r\n+          //     isClosable: true,\r\n+          //   });\r\n+          // }\r\n+          return;\r\n+        }\r\n+\r\n+        let candyMachine;\r\n+        try {\r\n+          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\r\n+          //verify CM Version\r\n+          if (candyMachine.version != AccountVersion.V2) {\r\n+            console.error(\"Wrong candy machine account version!Please use latest sugar to create your candy machine. Need Account Version 2!\");\r\n+            // toast({\r\n+            //   id: \"wrong-account-version\",\r\n+            //   title: \"Wrong candy machine account version!\",\r\n+            //   description: \"Please use latest sugar to create your candy machine. Need Account Version 2!\",\r\n+            //   status: \"error\",\r\n+            //   duration: 999999,\r\n+            //   isClosable: true,\r\n+            // });\r\n+            return;\r\n+          }\r\n+        } catch (e) {\r\n+          console.error(\"The CM from .env is invalid!Are you using the correct environment?\" + e);\r\n+          // toast({\r\n+          //   id: \"no-cm-found\",\r\n+          //   title: \"The CM from .env is invalid\",\r\n+          //   description: \"Are you using the correct environment?\",\r\n+          //   status: \"error\",\r\n+          //   duration: 999999,\r\n+          //   isClosable: true,\r\n+          // });\r\n+        }\r\n+        setCandyMachine(candyMachine);\r\n+        if (!candyMachine) {\r\n+          return;\r\n+        }\r\n+        let candyGuard;\r\n+        try {\r\n+          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\r\n+        } catch (e) {\r\n+          console.error(\"No Candy Guard found!Do you have one assigned?\" + e);\r\n+          // toast({\r\n+          //   id: \"no-guard-found\",\r\n+          //   title: \"No Candy Guard found!\",\r\n+          //   description: \"Do you have one assigned?\",\r\n+          //   status: \"error\",\r\n+          //   duration: 999999,\r\n+          //   isClosable: true,\r\n+          // });\r\n+        }\r\n+        if (!candyGuard) {\r\n+          return;\r\n+        }\r\n+        setCandyGuard(candyGuard);\r\n+        if (firstRun) {\r\n+          setfirstRun(false)\r\n+        }\r\n+      }\r\n+    })();\r\n+  }, [umi, checkEligibility, candyMachineId, firstRun, setfirstRun, toast]);\r\n+\r\n+  return { candyMachine, candyGuard };\r\n+\r\n+\r\n+};\r\n+\r\n+\r\n+export default function Home() {\r\n+  const umi = useUmi();\r\n+  const solanaTime = useSolanaTime();\r\n+  const toast = useToast();\r\n+  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\r\n+  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\r\n+  const [mintsCreated, setMintsCreated] = useState<{ mint: PublicKey, offChainMetadata: JsonMetadata | undefined }[] | undefined>();\r\n+  const [isAllowed, setIsAllowed] = useState<boolean>(false);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [ownedTokens, setOwnedTokens] = useState<DigitalAssetWithToken[]>();\r\n+  const [guards, setGuards] = useState<GuardReturn[]>([\r\n+    { label: \"startDefault\", allowed: false, maxAmount: 0 },\r\n+  ]);\r\n+  const [firstRun, setFirstRun] = useState(true);\r\n+  const [checkEligibility, setCheckEligibility] = useState<boolean>(true);\r\n+  const [disableMint, setDisableMint] = useState(true);\r\n+  const [canMint, setCanMint] = useState(true);\r\n+  const [stopMint, setStopMint] = useState(true);\r\n+\r\n+  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n+    console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\")\r\n+    // if (!toast.isActive('no-cm')) {\r\n+    //   toast({\r\n+    //     id: 'no-cm',\r\n+    //     title: 'No candy machine in .env!',\r\n+    //     description: \"Add your candy machine address to the .env file!\",\r\n+    //     status: 'error',\r\n+    //     duration: 999999,\r\n+    //     isClosable: true,\r\n+    //   })\r\n+    // }\r\n+  }\r\n+  const candyMachineId: PublicKey = useMemo(() => {\r\n+    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n+      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\r\n+    } else {\r\n+      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!Add your candy machine address to the .env file!`);\r\n+      // toast({\r\n+      //   id: 'no-cm',\r\n+      //   title: 'No candy machine in .env!',\r\n+      //   description: \"Add your candy machine address to the .env file!\",\r\n+      //   status: 'error',\r\n+      //   duration: 999999,\r\n+      //   isClosable: true,\r\n+      // })\r\n+      return publicKey(\"11111111111111111111111111111111\");\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []);\r\n+  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\r\n+\r\n+  useEffect(() => {\r\n+    const checkEligibilityFunc = async () => {\r\n+      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\r\n+        return;\r\n+      }\r\n+      setFirstRun(false);\r\n+\r\n+      const { guardReturn, ownedTokens } = await guardChecker(\r\n+        umi, candyGuard, candyMachine, solanaTime\r\n+      );\r\n+\r\n+      setOwnedTokens(ownedTokens);\r\n+      setGuards(guardReturn);\r\n+      setIsAllowed(false);\r\n+\r\n+      let allowed = false;\r\n+      for (const guard of guardReturn) {\r\n+        if (guard.allowed) {\r\n+          allowed = true;\r\n+          break;\r\n+        }\r\n+      }\r\n+\r\n+      setIsAllowed(allowed);\r\n+      setLoading(false);\r\n+    };\r\n+\r\n+    checkEligibilityFunc();\r\n+    // On purpose: not check for candyMachine, candyGuard, solanaTime\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [umi, checkEligibility, firstRun]);\r\n+\r\n+  const PageContent = () => {\r\n+    return (\r\n+      <Layout style={{ position: 'relative', background: 'rgba(255, 255, 255, 0)' }}>\r\n+        <Image\r\n+          alt=\"img\"\r\n+          src=\"/resources/images/mintback.png\" // 背景图路径\r\n+          preview={false} // 禁用预览\r\n+          style={{\r\n+            position: 'absolute',\r\n+            top: 0,\r\n+            left: 0,\r\n+            right: 0,\r\n+            bottom: 0,\r\n+            objectFit: 'cover', // 确保图片覆盖整个区域\r\n+            zIndex: -1 // 确保背景图在其他内容后面\r\n+          }}\r\n+        />\r\n+        <div style={{ marginTop: '6%', marginLeft: 80, padding: 0, display: 'flex', flex: 1, gap: '1%', alignItems: 'center' }}> {/* 使用 Flexbox 布局 */}\r\n+          <Content style={{ width: \"60%\" }}> {/* 设置为完全透明 */}\r\n+            <div style={{ fontSize: '20px', flex: '0 0 70%' }}>\r\n+              <Content style={{\r\n+                display: 'flex', // 使用 Flexbox 布局\r\n+                marginBottom: '3%'\r\n+              }}> {/* 使用 Flexbox 布局 */}\r\n+\r\n+                <p style={{ fontSize: '60px' }}><FormattedMessage id=\"zeroSan\" /></p>\r\n+                <Image\r\n+                  alt=\"account\"\r\n+                  src=\"/resources/images/account.png\"\r\n+                  style={{ width: '30px', height: 'auto', marginLeft: '30px' }} // 设置图片宽度自适应\r\n+                  preview={false} // 禁用预览\r\n+                />\r\n+              </Content>\r\n+\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"communityIntro\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"collaboration\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"mission\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\r\n+              <p style={{ marginTop: '3%' }}>\r\n+                <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}><FormattedMessage id=\"twitter\" /></a>\r\n+                <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}><FormattedMessage id=\"telegram\" /></a>\r\n+              </p>\r\n+            </div>\r\n+          </Content>\r\n+          <Content style={{ width: \"30%\", display: 'flex', alignItems: 'center' }}>\r\n+            <Image\r\n+              alt=\"03-logo\"\r\n+              src=\"/resources/images/03-logo.png\"\r\n+              style={{ width: '400px', height: 'auto' }} // 设置图片宽度自适应\r\n+              preview={false} // 禁用预览\r\n+            />\r\n+          </Content>\r\n+        </div>\r\n+        <Footer style={{ textAlign: 'center', background: 'rgba(255, 255, 255, 0)', marginLeft: 80, marginTop: 80, padding: 0 }}>\r\n+          <Content style={{\r\n+            padding: 16,\r\n+            height: 55,\r\n+            width: '9%',\r\n+            background: 'rgba(128, 128, 128, 0.5)', // 设置透明的灰色背景\r\n+            borderRadius: '24px', // 设置圆角\r\n+            display: 'flex', // 使用 Flexbox 布局\r\n+            alignItems: 'center', // 垂直居中对齐\r\n+          }}> {/* 使用 Flexbox 布局 */}\r\n+            <Image\r\n+              alt=\"status-live\"\r\n+              src={stopMint ? \"/resources/images/status-live.png\" : \"/resources/images/status-stop.png\"} // 根据 StopMint 状态选择图片\r\n+              style={{ width: '25px', height: 'auto' }} // 设置图片宽度自适应\r\n+              preview={false} // 禁用预览\r\n+            />\r\n+            <p style={{ fontSize: '20px', marginLeft: '11%' }}><FormattedMessage id=\"presale\" /></p> {/* 添加右边距以增加间隔 */}\r\n+          </Content>\r\n+\r\n+          <div style={{ marginTop: '1%', display: 'flex', flex: 1, gap: '1%' }}> {/* 使用 Flexbox 布局 */}\r\n+            <Content\r\n+              style={{\r\n+                padding: 40,\r\n+                minHeight: 120,\r\n+                flex: '0 0 30%',\r\n+                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n+                borderRadius: '8px', // 设置圆角\r\n+              }}\r\n+            >\r\n+              <div style={{ textAlign: 'left', width: '100%' }}>\r\n+                <p style={{ fontSize: '16px', marginBottom: '5%' }}><FormattedMessage id=\"mintPrice\" /></p>\r\n+                <p style={{ fontSize: '24px', fontWeight: 'bold' }}><FormattedMessage id=\"mintPriceValue\" /></p>{/* 设置字体大小和加粗 */}\r\n+              </div>\r\n+            </Content>\r\n+            <Content\r\n+              style={{\r\n+                padding: 40,\r\n+                minHeight: 120,\r\n+                flex: '0 0 30%',\r\n+                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n+                borderRadius: '8px', // 设置圆角\r\n+                display: 'flex', // 使用 Flexbox 布局\r\n+                flexDirection: 'column', // 垂直排列\r\n+              }}\r\n+            >\r\n+              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n+                <div style={{ textAlign: 'left' }}>\r\n+                  <p style={{ fontSize: '16px', marginBottom: '12%' }} >\r\n+                    <FormattedMessage id=\"availability\" />\r\n+                    {/* {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)} */}\r\n+                  </p>\r\n+                  <p style={{ fontSize: '24px', fontWeight: 'bold' }} ><FormattedMessage id=\"presaleOnly\" /></p>\r\n+                </div>\r\n+                <ButtonList\r\n+                  guardList={guards}\r\n+                  candyMachine={candyMachine}\r\n+                  candyGuard={candyGuard}\r\n+                  umi={umi}\r\n+                  ownedTokens={ownedTokens}\r\n+                  setGuardList={setGuards}\r\n+                  mintsCreated={mintsCreated}\r\n+                  setMintsCreated={setMintsCreated}\r\n+                  onOpen={onShowNftOpen}\r\n+                  setCheckEligibility={setCheckEligibility}\r\n+                />\r\n+                {/* <Button\r\n+                  //onClick={canMint && disableMint ? onClick : null} // 当 canMint 为 true 且 disableMint 为 false 时，点击事件为 onClick\r\n+                  disabled={!canMint || !disableMint} // 根据 canMint 和 disableMint 设置按钮禁用状态\r\n+                  className={`mint-button ${!disableMint ? 'disabled' : ''}`} // 根据 disableMint 设置类名\r\n+                >\r\n+                  <FormattedMessage id={!disableMint ? 'notMint' : canMint ? 'mint' : 'minted'} />\r\n+                </Button> */}\r\n+              </div>\r\n+            </Content>\r\n+          </div >\r\n+        </Footer >\r\n+      </Layout >\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <main>\r\n+      {/* <div className='wallet'>\r\n+        <WalletMultiButtonDynamic />\r\n+      </div> */}\r\n+      <PageContent key=\"content\" />\r\n+    </main>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1731335489834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,349 @@\n+import {\r\n+  PublicKey,\r\n+  publicKey,\r\n+  Umi,\r\n+} from \"@metaplex-foundation/umi\";\r\n+import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\r\n+import dynamic from \"next/dynamic\";\r\n+import { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\r\n+import { useUmi } from \"./utils/useUmi\";\r\n+import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\"\r\n+import { guardChecker } from \"./utils/checkAllowed\";\r\n+//import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\r\n+import { Center, Skeleton, useDisclosure, ModalHeader, ModalOverlay, Box, Divider, useToast, VStack, Flex } from '@chakra-ui/react';\r\n+import { ButtonList } from \"./components/mintButton\";\r\n+import { GuardReturn } from \"./utils/checkerHelper\";\r\n+import { ShowNft } from \"./components/showNft\";\r\n+import { InitializeModal } from \"./components/initializeModal\";\r\n+import { image, headerText } from \"./settings\";\r\n+import { useSolanaTime } from \"./utils/SolanaTimeContext\";\r\n+import { Button, Card, Row, Col, Spin, Layout, Modal, Menu, Image } from 'antd';\r\n+import { FormattedMessage } from 'react-intl';\r\n+const { Header, Sider, Content, Footer } = Layout;\r\n+\r\n+const WalletMultiButtonDynamic = dynamic(\r\n+  async () =>\r\n+    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\r\n+  { ssr: false }\r\n+);\r\n+\r\n+const useCandyMachine = (\r\n+  umi: Umi,\r\n+  candyMachineId: string,\r\n+  checkEligibility: boolean,\r\n+  setCheckEligibility: Dispatch<SetStateAction<boolean>>,\r\n+  firstRun: boolean,\r\n+  setfirstRun: Dispatch<SetStateAction<boolean>>\r\n+) => {\r\n+  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n+  const [candyGuard, setCandyGuard] = useState<CandyGuard>();\r\n+  const toast = useToast();\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    (async () => {\r\n+      if (checkEligibility) {\r\n+        if (!candyMachineId) {\r\n+          console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\");\r\n+          // if (!toast.isActive(\"no-cm\")) {\r\n+          //   toast({\r\n+          //     id: \"no-cm\",\r\n+          //     title: \"No candy machine in .env!\",\r\n+          //     description: \"Add your candy machine address to the .env file!\",\r\n+          //     status: \"error\",\r\n+          //     duration: 999999,\r\n+          //     isClosable: true,\r\n+          //   });\r\n+          // }\r\n+          return;\r\n+        }\r\n+\r\n+        let candyMachine;\r\n+        try {\r\n+          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\r\n+          //verify CM Version\r\n+          if (candyMachine.version != AccountVersion.V2) {\r\n+            console.error(\"Wrong candy machine account version!Please use latest sugar to create your candy machine. Need Account Version 2!\");\r\n+            // toast({\r\n+            //   id: \"wrong-account-version\",\r\n+            //   title: \"Wrong candy machine account version!\",\r\n+            //   description: \"Please use latest sugar to create your candy machine. Need Account Version 2!\",\r\n+            //   status: \"error\",\r\n+            //   duration: 999999,\r\n+            //   isClosable: true,\r\n+            // });\r\n+            return;\r\n+          }\r\n+        } catch (e) {\r\n+          console.error(\"The CM from .env is invalid!Are you using the correct environment?\" + e);\r\n+          // toast({\r\n+          //   id: \"no-cm-found\",\r\n+          //   title: \"The CM from .env is invalid\",\r\n+          //   description: \"Are you using the correct environment?\",\r\n+          //   status: \"error\",\r\n+          //   duration: 999999,\r\n+          //   isClosable: true,\r\n+          // });\r\n+        }\r\n+        setCandyMachine(candyMachine);\r\n+        if (!candyMachine) {\r\n+          return;\r\n+        }\r\n+        let candyGuard;\r\n+        try {\r\n+          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\r\n+        } catch (e) {\r\n+          console.error(\"No Candy Guard found!Do you have one assigned?\" + e);\r\n+          // toast({\r\n+          //   id: \"no-guard-found\",\r\n+          //   title: \"No Candy Guard found!\",\r\n+          //   description: \"Do you have one assigned?\",\r\n+          //   status: \"error\",\r\n+          //   duration: 999999,\r\n+          //   isClosable: true,\r\n+          // });\r\n+        }\r\n+        if (!candyGuard) {\r\n+          return;\r\n+        }\r\n+        setCandyGuard(candyGuard);\r\n+        if (firstRun) {\r\n+          setfirstRun(false)\r\n+        }\r\n+      }\r\n+    })();\r\n+  }, [umi, checkEligibility, candyMachineId, firstRun, setfirstRun, toast]);\r\n+\r\n+  return { candyMachine, candyGuard };\r\n+\r\n+\r\n+};\r\n+\r\n+\r\n+export default function Home() {\r\n+  const umi = useUmi();\r\n+  const solanaTime = useSolanaTime();\r\n+  const toast = useToast();\r\n+  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\r\n+  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\r\n+  const [mintsCreated, setMintsCreated] = useState<{ mint: PublicKey, offChainMetadata: JsonMetadata | undefined }[] | undefined>();\r\n+  const [isAllowed, setIsAllowed] = useState<boolean>(false);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [ownedTokens, setOwnedTokens] = useState<DigitalAssetWithToken[]>();\r\n+  const [guards, setGuards] = useState<GuardReturn[]>([\r\n+    { label: \"startDefault\", allowed: false, maxAmount: 0 },\r\n+  ]);\r\n+  const [firstRun, setFirstRun] = useState(true);\r\n+  const [checkEligibility, setCheckEligibility] = useState<boolean>(true);\r\n+  const [disableMint, setDisableMint] = useState(true);\r\n+  const [canMint, setCanMint] = useState(true);\r\n+  const [stopMint, setStopMint] = useState(true);\r\n+\r\n+  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n+    console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\")\r\n+    // if (!toast.isActive('no-cm')) {\r\n+    //   toast({\r\n+    //     id: 'no-cm',\r\n+    //     title: 'No candy machine in .env!',\r\n+    //     description: \"Add your candy machine address to the .env file!\",\r\n+    //     status: 'error',\r\n+    //     duration: 999999,\r\n+    //     isClosable: true,\r\n+    //   })\r\n+    // }\r\n+  }\r\n+  const candyMachineId: PublicKey = useMemo(() => {\r\n+    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n+      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\r\n+    } else {\r\n+      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!Add your candy machine address to the .env file!`);\r\n+      // toast({\r\n+      //   id: 'no-cm',\r\n+      //   title: 'No candy machine in .env!',\r\n+      //   description: \"Add your candy machine address to the .env file!\",\r\n+      //   status: 'error',\r\n+      //   duration: 999999,\r\n+      //   isClosable: true,\r\n+      // })\r\n+      return publicKey(\"11111111111111111111111111111111\");\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []);\r\n+  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\r\n+\r\n+  useEffect(() => {\r\n+    const checkEligibilityFunc = async () => {\r\n+      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\r\n+        return;\r\n+      }\r\n+      setFirstRun(false);\r\n+\r\n+      const { guardReturn, ownedTokens } = await guardChecker(\r\n+        umi, candyGuard, candyMachine, solanaTime\r\n+      );\r\n+\r\n+      setOwnedTokens(ownedTokens);\r\n+      setGuards(guardReturn);\r\n+      setIsAllowed(false);\r\n+\r\n+      let allowed = false;\r\n+      for (const guard of guardReturn) {\r\n+        if (guard.allowed) {\r\n+          allowed = true;\r\n+          break;\r\n+        }\r\n+      }\r\n+\r\n+      setIsAllowed(allowed);\r\n+      setLoading(false);\r\n+    };\r\n+\r\n+    checkEligibilityFunc();\r\n+    // On purpose: not check for candyMachine, candyGuard, solanaTime\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [umi, checkEligibility, firstRun]);\r\n+\r\n+  const PageContent = () => {\r\n+    return (\r\n+      <Layout style={{ position: 'relative', background: 'rgba(255, 255, 255, 0)' }}>\r\n+        <Image\r\n+          alt=\"img\"\r\n+          src=\"/resources/images/mintback.png\" // 背景图路径\r\n+          preview={false} // 禁用预览\r\n+          style={{\r\n+            position: 'absolute',\r\n+            top: 0,\r\n+            left: 0,\r\n+            right: 0,\r\n+            bottom: 0,\r\n+            objectFit: 'cover', // 确保图片覆盖整个区域\r\n+            zIndex: -1 // 确保背景图在其他内容后面\r\n+          }}\r\n+        />\r\n+        <div style={{ marginTop: '6%', marginLeft: 80, padding: 0, display: 'flex', flex: 1, gap: '1%', alignItems: 'center' }}> {/* 使用 Flexbox 布局 */}\r\n+          <Content style={{ width: \"60%\" }}> {/* 设置为完全透明 */}\r\n+            <div style={{ fontSize: '20px', flex: '0 0 70%' }}>\r\n+              <Content style={{\r\n+                display: 'flex', // 使用 Flexbox 布局\r\n+                marginBottom: '3%'\r\n+              }}> {/* 使用 Flexbox 布局 */}\r\n+\r\n+                <p style={{ fontSize: '60px' }}><FormattedMessage id=\"zeroSan\" /></p>\r\n+                <Image\r\n+                  alt=\"account\"\r\n+                  src=\"/resources/images/account.png\"\r\n+                  style={{ width: '30px', height: 'auto', marginLeft: '30px' }} // 设置图片宽度自适应\r\n+                  preview={false} // 禁用预览\r\n+                />\r\n+              </Content>\r\n+\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"communityIntro\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"collaboration\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"mission\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\r\n+              <p style={{ marginTop: '3%' }}>\r\n+                <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}><FormattedMessage id=\"twitter\" /></a>\r\n+                <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}><FormattedMessage id=\"telegram\" /></a>\r\n+              </p>\r\n+            </div>\r\n+          </Content>\r\n+          <Content style={{ width: \"30%\", display: 'flex', alignItems: 'center' }}>\r\n+            <Image\r\n+              alt=\"03-logo\"\r\n+              src=\"/resources/images/03-logo.png\"\r\n+              style={{ width: '400px', height: 'auto' }} // 设置图片宽度自适应\r\n+              preview={false} // 禁用预览\r\n+            />\r\n+          </Content>\r\n+        </div>\r\n+        <Footer style={{ textAlign: 'center', background: 'rgba(255, 255, 255, 0)', marginLeft: 80, marginTop: 80, padding: 0 }}>\r\n+          <Content style={{\r\n+            padding: 16,\r\n+            height: 55,\r\n+            width: '9%',\r\n+            background: 'rgba(128, 128, 128, 0.5)', // 设置透明的灰色背景\r\n+            borderRadius: '24px', // 设置圆角\r\n+            display: 'flex', // 使用 Flexbox 布局\r\n+            alignItems: 'center', // 垂直居中对齐\r\n+          }}> {/* 使用 Flexbox 布局 */}\r\n+            <Image\r\n+              alt=\"status-live\"\r\n+              src={stopMint ? \"/resources/images/status-live.png\" : \"/resources/images/status-stop.png\"} // 根据 StopMint 状态选择图片\r\n+              style={{ width: '25px', height: 'auto' }} // 设置图片宽度自适应\r\n+              preview={false} // 禁用预览\r\n+            />\r\n+            <p style={{ fontSize: '20px', marginLeft: '11%' }}><FormattedMessage id=\"presale\" /></p> {/* 添加右边距以增加间隔 */}\r\n+          </Content>\r\n+\r\n+          <div style={{ marginTop: '1%', display: 'flex', flex: 1, gap: '1%' }}> {/* 使用 Flexbox 布局 */}\r\n+            <Content\r\n+              style={{\r\n+                padding: 40,\r\n+                minHeight: 120,\r\n+                flex: '0 0 30%',\r\n+                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n+                borderRadius: '8px', // 设置圆角\r\n+              }}\r\n+            >\r\n+              <div style={{ textAlign: 'left', width: '100%' }}>\r\n+                <p style={{ fontSize: '16px', marginBottom: '5%' }}><FormattedMessage id=\"mintPrice\" /></p>\r\n+                <p style={{ fontSize: '24px', fontWeight: 'bold' }}><FormattedMessage id=\"mintPriceValue\" /></p>{/* 设置字体大小和加粗 */}\r\n+              </div>\r\n+            </Content>\r\n+            <Content\r\n+              style={{\r\n+                padding: 40,\r\n+                minHeight: 120,\r\n+                flex: '0 0 30%',\r\n+                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n+                borderRadius: '8px', // 设置圆角\r\n+                display: 'flex', // 使用 Flexbox 布局\r\n+                flexDirection: 'column', // 垂直排列\r\n+              }}\r\n+            >\r\n+              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n+                <div style={{ textAlign: 'left' }}>\r\n+                  <p style={{ fontSize: '16px}} >\r\n+                    <FormattedMessage id=\"availability\" />\r\n+                    {/* {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)} */}\r\n+                  </p>\r\n+                  <p style={{ fontSize: '24px', fontWeight: 'bold' }} ><FormattedMessage id=\"presaleOnly\" /></p>\r\n+                </div>\r\n+                <ButtonList\r\n+                  guardList={guards}\r\n+                  candyMachine={candyMachine}\r\n+                  candyGuard={candyGuard}\r\n+                  umi={umi}\r\n+                  ownedTokens={ownedTokens}\r\n+                  setGuardList={setGuards}\r\n+                  mintsCreated={mintsCreated}\r\n+                  setMintsCreated={setMintsCreated}\r\n+                  onOpen={onShowNftOpen}\r\n+                  setCheckEligibility={setCheckEligibility}\r\n+                />\r\n+                {/* <Button\r\n+                  //onClick={canMint && disableMint ? onClick : null} // 当 canMint 为 true 且 disableMint 为 false 时，点击事件为 onClick\r\n+                  disabled={!canMint || !disableMint} // 根据 canMint 和 disableMint 设置按钮禁用状态\r\n+                  className={`mint-button ${!disableMint ? 'disabled' : ''}`} // 根据 disableMint 设置类名\r\n+                >\r\n+                  <FormattedMessage id={!disableMint ? 'notMint' : canMint ? 'mint' : 'minted'} />\r\n+                </Button> */}\r\n+              </div>\r\n+            </Content>\r\n+          </div >\r\n+        </Footer >\r\n+      </Layout >\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <main>\r\n+      {/* <div className='wallet'>\r\n+        <WalletMultiButtonDynamic />\r\n+      </div> */}\r\n+      <PageContent key=\"content\" />\r\n+    </main>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1731335496042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,9 +304,9 @@\n               }}\r\n             >\r\n               <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n                 <div style={{ textAlign: 'left' }}>\r\n-                  <p style={{ fontSize: '16px}} >\r\n+                  <p style={{ fontSize: '16px' }} >\r\n                     <FormattedMessage id=\"availability\" />\r\n                     {/* {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)} */}\r\n                   </p>\r\n                   <p style={{ fontSize: '24px', fontWeight: 'bold' }} ><FormattedMessage id=\"presaleOnly\" /></p>\r\n"
                },
                {
                    "date": 1731335505481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+import {\r\n+  PublicKey,\r\n+  publicKey,\r\n+  Umi,\r\n+} from \"@metaplex-foundation/umi\";\r\n+import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\r\n+import dynamic from \"next/dynamic\";\r\n+import { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\r\n+import { useUmi } from \"./utils/useUmi\";\r\n+import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\"\r\n+import { guardChecker } from \"./utils/checkAllowed\";\r\n+//import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\r\n+import { Center, Skeleton, useDisclosure, ModalHeader, ModalOverlay, Box, Divider, useToast, VStack, Flex } from '@chakra-ui/react';\r\n+import { ButtonList } from \"./components/mintButton\";\r\n+import { GuardReturn } from \"./utils/checkerHelper\";\r\n+import { ShowNft } from \"./components/showNft\";\r\n+import { InitializeModal } from \"./components/initializeModal\";\r\n+import { image, headerText } from \"./settings\";\r\n+import { useSolanaTime } from \"./utils/SolanaTimeContext\";\r\n+import { Button, Card, Row, Col, Spin, Layout, Modal, Menu, Image } from 'antd';\r\n+import { FormattedMessage } from 'react-intl';\r\n+const { Header, Sider, Content, Footer } = Layout;\r\n+\r\n+const WalletMultiButtonDynamic = dynamic(\r\n+  async () =>\r\n+    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\r\n+  { ssr: false }\r\n+);\r\n+\r\n+const useCandyMachine = (\r\n+  umi: Umi,\r\n+  candyMachineId: string,\r\n+  checkEligibility: boolean,\r\n+  setCheckEligibility: Dispatch<SetStateAction<boolean>>,\r\n+  firstRun: boolean,\r\n+  setfirstRun: Dispatch<SetStateAction<boolean>>\r\n+) => {\r\n+  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n+  const [candyGuard, setCandyGuard] = useState<CandyGuard>();\r\n+  const toast = useToast();\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    (async () => {\r\n+      if (checkEligibility) {\r\n+        if (!candyMachineId) {\r\n+          console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\");\r\n+          // if (!toast.isActive(\"no-cm\")) {\r\n+          //   toast({\r\n+          //     id: \"no-cm\",\r\n+          //     title: \"No candy machine in .env!\",\r\n+          //     description: \"Add your candy machine address to the .env file!\",\r\n+          //     status: \"error\",\r\n+          //     duration: 999999,\r\n+          //     isClosable: true,\r\n+          //   });\r\n+          // }\r\n+          return;\r\n+        }\r\n+\r\n+        let candyMachine;\r\n+        try {\r\n+          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\r\n+          //verify CM Version\r\n+          if (candyMachine.version != AccountVersion.V2) {\r\n+            console.error(\"Wrong candy machine account version!Please use latest sugar to create your candy machine. Need Account Version 2!\");\r\n+            // toast({\r\n+            //   id: \"wrong-account-version\",\r\n+            //   title: \"Wrong candy machine account version!\",\r\n+            //   description: \"Please use latest sugar to create your candy machine. Need Account Version 2!\",\r\n+            //   status: \"error\",\r\n+            //   duration: 999999,\r\n+            //   isClosable: true,\r\n+            // });\r\n+            return;\r\n+          }\r\n+        } catch (e) {\r\n+          console.error(\"The CM from .env is invalid!Are you using the correct environment?\" + e);\r\n+          // toast({\r\n+          //   id: \"no-cm-found\",\r\n+          //   title: \"The CM from .env is invalid\",\r\n+          //   description: \"Are you using the correct environment?\",\r\n+          //   status: \"error\",\r\n+          //   duration: 999999,\r\n+          //   isClosable: true,\r\n+          // });\r\n+        }\r\n+        setCandyMachine(candyMachine);\r\n+        if (!candyMachine) {\r\n+          return;\r\n+        }\r\n+        let candyGuard;\r\n+        try {\r\n+          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\r\n+        } catch (e) {\r\n+          console.error(\"No Candy Guard found!Do you have one assigned?\" + e);\r\n+          // toast({\r\n+          //   id: \"no-guard-found\",\r\n+          //   title: \"No Candy Guard found!\",\r\n+          //   description: \"Do you have one assigned?\",\r\n+          //   status: \"error\",\r\n+          //   duration: 999999,\r\n+          //   isClosable: true,\r\n+          // });\r\n+        }\r\n+        if (!candyGuard) {\r\n+          return;\r\n+        }\r\n+        setCandyGuard(candyGuard);\r\n+        if (firstRun) {\r\n+          setfirstRun(false)\r\n+        }\r\n+      }\r\n+    })();\r\n+  }, [umi, checkEligibility, candyMachineId, firstRun, setfirstRun, toast]);\r\n+\r\n+  return { candyMachine, candyGuard };\r\n+\r\n+\r\n+};\r\n+\r\n+\r\n+export default function Home() {\r\n+  const umi = useUmi();\r\n+  const solanaTime = useSolanaTime();\r\n+  const toast = useToast();\r\n+  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\r\n+  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\r\n+  const [mintsCreated, setMintsCreated] = useState<{ mint: PublicKey, offChainMetadata: JsonMetadata | undefined }[] | undefined>();\r\n+  const [isAllowed, setIsAllowed] = useState<boolean>(false);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [ownedTokens, setOwnedTokens] = useState<DigitalAssetWithToken[]>();\r\n+  const [guards, setGuards] = useState<GuardReturn[]>([\r\n+    { label: \"startDefault\", allowed: false, maxAmount: 0 },\r\n+  ]);\r\n+  const [firstRun, setFirstRun] = useState(true);\r\n+  const [checkEligibility, setCheckEligibility] = useState<boolean>(true);\r\n+  const [disableMint, setDisableMint] = useState(true);\r\n+  const [canMint, setCanMint] = useState(true);\r\n+  const [stopMint, setStopMint] = useState(true);\r\n+\r\n+  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n+    console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\")\r\n+    // if (!toast.isActive('no-cm')) {\r\n+    //   toast({\r\n+    //     id: 'no-cm',\r\n+    //     title: 'No candy machine in .env!',\r\n+    //     description: \"Add your candy machine address to the .env file!\",\r\n+    //     status: 'error',\r\n+    //     duration: 999999,\r\n+    //     isClosable: true,\r\n+    //   })\r\n+    // }\r\n+  }\r\n+  const candyMachineId: PublicKey = useMemo(() => {\r\n+    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n+      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\r\n+    } else {\r\n+      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!Add your candy machine address to the .env file!`);\r\n+      // toast({\r\n+      //   id: 'no-cm',\r\n+      //   title: 'No candy machine in .env!',\r\n+      //   description: \"Add your candy machine address to the .env file!\",\r\n+      //   status: 'error',\r\n+      //   duration: 999999,\r\n+      //   isClosable: true,\r\n+      // })\r\n+      return publicKey(\"11111111111111111111111111111111\");\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []);\r\n+  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\r\n+\r\n+  useEffect(() => {\r\n+    const checkEligibilityFunc = async () => {\r\n+      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\r\n+        return;\r\n+      }\r\n+      setFirstRun(false);\r\n+\r\n+      const { guardReturn, ownedTokens } = await guardChecker(\r\n+        umi, candyGuard, candyMachine, solanaTime\r\n+      );\r\n+\r\n+      setOwnedTokens(ownedTokens);\r\n+      setGuards(guardReturn);\r\n+      setIsAllowed(false);\r\n+\r\n+      let allowed = false;\r\n+      for (const guard of guardReturn) {\r\n+        if (guard.allowed) {\r\n+          allowed = true;\r\n+          break;\r\n+        }\r\n+      }\r\n+\r\n+      setIsAllowed(allowed);\r\n+      setLoading(false);\r\n+    };\r\n+\r\n+    checkEligibilityFunc();\r\n+    // On purpose: not check for candyMachine, candyGuard, solanaTime\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [umi, checkEligibility, firstRun]);\r\n+\r\n+  const PageContent = () => {\r\n+    return (\r\n+      <Layout style={{ position: 'relative', background: 'rgba(255, 255, 255, 0)' }}>\r\n+        <Image\r\n+          alt=\"img\"\r\n+          src=\"/resources/images/mintback.png\" // 背景图路径\r\n+          preview={false} // 禁用预览\r\n+          style={{\r\n+            position: 'absolute',\r\n+            top: 0,\r\n+            left: 0,\r\n+            right: 0,\r\n+            bottom: 0,\r\n+            objectFit: 'cover', // 确保图片覆盖整个区域\r\n+            zIndex: -1 // 确保背景图在其他内容后面\r\n+          }}\r\n+        />\r\n+        <div style={{ marginTop: '6%', marginLeft: 80, padding: 0, display: 'flex', flex: 1, gap: '1%', alignItems: 'center' }}> {/* 使用 Flexbox 布局 */}\r\n+          <Content style={{ width: \"60%\" }}> {/* 设置为完全透明 */}\r\n+            <div style={{ fontSize: '20px', flex: '0 0 70%' }}>\r\n+              <Content style={{\r\n+                display: 'flex', // 使用 Flexbox 布局\r\n+                marginBottom: '3%'\r\n+              }}> {/* 使用 Flexbox 布局 */}\r\n+\r\n+                <p style={{ fontSize: '60px' }}><FormattedMessage id=\"zeroSan\" /></p>\r\n+                <Image\r\n+                  alt=\"account\"\r\n+                  src=\"/resources/images/account.png\"\r\n+                  style={{ width: '30px', height: 'auto', marginLeft: '30px' }} // 设置图片宽度自适应\r\n+                  preview={false} // 禁用预览\r\n+                />\r\n+              </Content>\r\n+\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"communityIntro\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"collaboration\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"mission\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\r\n+              <p style={{ marginTop: '3%' }}>\r\n+                <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}><FormattedMessage id=\"twitter\" /></a>\r\n+                <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}><FormattedMessage id=\"telegram\" /></a>\r\n+              </p>\r\n+            </div>\r\n+          </Content>\r\n+          <Content style={{ width: \"30%\", display: 'flex', alignItems: 'center' }}>\r\n+            <Image\r\n+              alt=\"03-logo\"\r\n+              src=\"/resources/images/03-logo.png\"\r\n+              style={{ width: '400px', height: 'auto' }} // 设置图片宽度自适应\r\n+              preview={false} // 禁用预览\r\n+            />\r\n+          </Content>\r\n+        </div>\r\n+        <Footer style={{ textAlign: 'center', background: 'rgba(255, 255, 255, 0)', marginLeft: 80, marginTop: 80, padding: 0 }}>\r\n+          <Content style={{\r\n+            padding: 16,\r\n+            height: 55,\r\n+            width: '9%',\r\n+            background: 'rgba(128, 128, 128, 0.5)', // 设置透明的灰色背景\r\n+            borderRadius: '24px', // 设置圆角\r\n+            display: 'flex', // 使用 Flexbox 布局\r\n+            alignItems: 'center', // 垂直居中对齐\r\n+          }}> {/* 使用 Flexbox 布局 */}\r\n+            <Image\r\n+              alt=\"status-live\"\r\n+              src={stopMint ? \"/resources/images/status-live.png\" : \"/resources/images/status-stop.png\"} // 根据 StopMint 状态选择图片\r\n+              style={{ width: '25px', height: 'auto' }} // 设置图片宽度自适应\r\n+              preview={false} // 禁用预览\r\n+            />\r\n+            <p style={{ fontSize: '20px', marginLeft: '11%' }}><FormattedMessage id=\"presale\" /></p> {/* 添加右边距以增加间隔 */}\r\n+          </Content>\r\n+\r\n+          <div style={{ marginTop: '1%', display: 'flex', flex: 1, gap: '1%' }}> {/* 使用 Flexbox 布局 */}\r\n+            <Content\r\n+              style={{\r\n+                padding: 40,\r\n+                minHeight: 120,\r\n+                flex: '0 0 30%',\r\n+                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n+                borderRadius: '8px', // 设置圆角\r\n+              }}\r\n+            >\r\n+              <div style={{ textAlign: 'left', width: '100%' }}>\r\n+                <p style={{ fontSize: '16px', marginBottom: '5%' }}><FormattedMessage id=\"mintPrice\" /></p>\r\n+                <p style={{ fontSize: '24px', fontWeight: 'bold' }}><FormattedMessage id=\"mintPriceValue\" /></p>{/* 设置字体大小和加粗 */}\r\n+              </div>\r\n+            </Content>\r\n+            <Content\r\n+              style={{\r\n+                padding: 40,\r\n+                minHeight: 120,\r\n+                flex: '0 0 30%',\r\n+                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n+                borderRadius: '8px', // 设置圆角\r\n+                display: 'flex', // 使用 Flexbox 布局\r\n+                flexDirection: 'column', // 垂直排列\r\n+              }}\r\n+            >\r\n+              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n+                <div style={{ textAlign: 'left' }}>\r\n+                  <p style={{ fontSize: '16px', marginBottom: '12%' }} >\r\n+                    <FormattedMessage id=\"availability\" />\r\n+                    {/* {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)} */}\r\n+                  </p>\r\n+                  <p style={{ fontSize: '24px', fontWeight: 'bold' }} ><FormattedMessage id=\"presaleOnly\" /></p>\r\n+                </div>\r\n+\r\n+                {/* <Button\r\n+                  //onClick={canMint && disableMint ? onClick : null} // 当 canMint 为 true 且 disableMint 为 false 时，点击事件为 onClick\r\n+                  disabled={!canMint || !disableMint} // 根据 canMint 和 disableMint 设置按钮禁用状态\r\n+                  className={`mint-button ${!disableMint ? 'disabled' : ''}`} // 根据 disableMint 设置类名\r\n+                >\r\n+                  <FormattedMessage id={!disableMint ? 'notMint' : canMint ? 'mint' : 'minted'} />\r\n+                </Button> */}\r\n+              </div>\r\n+            </Content>\r\n+          </div >\r\n+        </Footer >\r\n+      </Layout >\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <main>\r\n+      {/* <div className='wallet'>\r\n+        <WalletMultiButtonDynamic />\r\n+      </div> */}\r\n+      <PageContent key=\"content\" />\r\n+    </main>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1731335525693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,349 @@\n+import {\r\n+  PublicKey,\r\n+  publicKey,\r\n+  Umi,\r\n+} from \"@metaplex-foundation/umi\";\r\n+import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\r\n+import dynamic from \"next/dynamic\";\r\n+import { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\r\n+import { useUmi } from \"./utils/useUmi\";\r\n+import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\"\r\n+import { guardChecker } from \"./utils/checkAllowed\";\r\n+//import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\r\n+import { Center, Skeleton, useDisclosure, ModalHeader, ModalOverlay, Box, Divider, useToast, VStack, Flex } from '@chakra-ui/react';\r\n+import { ButtonList } from \"./components/mintButton\";\r\n+import { GuardReturn } from \"./utils/checkerHelper\";\r\n+import { ShowNft } from \"./components/showNft\";\r\n+import { InitializeModal } from \"./components/initializeModal\";\r\n+import { image, headerText } from \"./settings\";\r\n+import { useSolanaTime } from \"./utils/SolanaTimeContext\";\r\n+import { Button, Card, Row, Col, Spin, Layout, Modal, Menu, Image } from 'antd';\r\n+import { FormattedMessage } from 'react-intl';\r\n+const { Header, Sider, Content, Footer } = Layout;\r\n+\r\n+const WalletMultiButtonDynamic = dynamic(\r\n+  async () =>\r\n+    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\r\n+  { ssr: false }\r\n+);\r\n+\r\n+const useCandyMachine = (\r\n+  umi: Umi,\r\n+  candyMachineId: string,\r\n+  checkEligibility: boolean,\r\n+  setCheckEligibility: Dispatch<SetStateAction<boolean>>,\r\n+  firstRun: boolean,\r\n+  setfirstRun: Dispatch<SetStateAction<boolean>>\r\n+) => {\r\n+  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n+  const [candyGuard, setCandyGuard] = useState<CandyGuard>();\r\n+  const toast = useToast();\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    (async () => {\r\n+      if (checkEligibility) {\r\n+        if (!candyMachineId) {\r\n+          console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\");\r\n+          // if (!toast.isActive(\"no-cm\")) {\r\n+          //   toast({\r\n+          //     id: \"no-cm\",\r\n+          //     title: \"No candy machine in .env!\",\r\n+          //     description: \"Add your candy machine address to the .env file!\",\r\n+          //     status: \"error\",\r\n+          //     duration: 999999,\r\n+          //     isClosable: true,\r\n+          //   });\r\n+          // }\r\n+          return;\r\n+        }\r\n+\r\n+        let candyMachine;\r\n+        try {\r\n+          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\r\n+          //verify CM Version\r\n+          if (candyMachine.version != AccountVersion.V2) {\r\n+            console.error(\"Wrong candy machine account version!Please use latest sugar to create your candy machine. Need Account Version 2!\");\r\n+            // toast({\r\n+            //   id: \"wrong-account-version\",\r\n+            //   title: \"Wrong candy machine account version!\",\r\n+            //   description: \"Please use latest sugar to create your candy machine. Need Account Version 2!\",\r\n+            //   status: \"error\",\r\n+            //   duration: 999999,\r\n+            //   isClosable: true,\r\n+            // });\r\n+            return;\r\n+          }\r\n+        } catch (e) {\r\n+          console.error(\"The CM from .env is invalid!Are you using the correct environment?\" + e);\r\n+          // toast({\r\n+          //   id: \"no-cm-found\",\r\n+          //   title: \"The CM from .env is invalid\",\r\n+          //   description: \"Are you using the correct environment?\",\r\n+          //   status: \"error\",\r\n+          //   duration: 999999,\r\n+          //   isClosable: true,\r\n+          // });\r\n+        }\r\n+        setCandyMachine(candyMachine);\r\n+        if (!candyMachine) {\r\n+          return;\r\n+        }\r\n+        let candyGuard;\r\n+        try {\r\n+          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\r\n+        } catch (e) {\r\n+          console.error(\"No Candy Guard found!Do you have one assigned?\" + e);\r\n+          // toast({\r\n+          //   id: \"no-guard-found\",\r\n+          //   title: \"No Candy Guard found!\",\r\n+          //   description: \"Do you have one assigned?\",\r\n+          //   status: \"error\",\r\n+          //   duration: 999999,\r\n+          //   isClosable: true,\r\n+          // });\r\n+        }\r\n+        if (!candyGuard) {\r\n+          return;\r\n+        }\r\n+        setCandyGuard(candyGuard);\r\n+        if (firstRun) {\r\n+          setfirstRun(false)\r\n+        }\r\n+      }\r\n+    })();\r\n+  }, [umi, checkEligibility, candyMachineId, firstRun, setfirstRun, toast]);\r\n+\r\n+  return { candyMachine, candyGuard };\r\n+\r\n+\r\n+};\r\n+\r\n+\r\n+export default function Home() {\r\n+  const umi = useUmi();\r\n+  const solanaTime = useSolanaTime();\r\n+  const toast = useToast();\r\n+  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\r\n+  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\r\n+  const [mintsCreated, setMintsCreated] = useState<{ mint: PublicKey, offChainMetadata: JsonMetadata | undefined }[] | undefined>();\r\n+  const [isAllowed, setIsAllowed] = useState<boolean>(false);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [ownedTokens, setOwnedTokens] = useState<DigitalAssetWithToken[]>();\r\n+  const [guards, setGuards] = useState<GuardReturn[]>([\r\n+    { label: \"startDefault\", allowed: false, maxAmount: 0 },\r\n+  ]);\r\n+  const [firstRun, setFirstRun] = useState(true);\r\n+  const [checkEligibility, setCheckEligibility] = useState<boolean>(true);\r\n+  const [disableMint, setDisableMint] = useState(true);\r\n+  const [canMint, setCanMint] = useState(true);\r\n+  const [stopMint, setStopMint] = useState(true);\r\n+\r\n+  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n+    console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\")\r\n+    // if (!toast.isActive('no-cm')) {\r\n+    //   toast({\r\n+    //     id: 'no-cm',\r\n+    //     title: 'No candy machine in .env!',\r\n+    //     description: \"Add your candy machine address to the .env file!\",\r\n+    //     status: 'error',\r\n+    //     duration: 999999,\r\n+    //     isClosable: true,\r\n+    //   })\r\n+    // }\r\n+  }\r\n+  const candyMachineId: PublicKey = useMemo(() => {\r\n+    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n+      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\r\n+    } else {\r\n+      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!Add your candy machine address to the .env file!`);\r\n+      // toast({\r\n+      //   id: 'no-cm',\r\n+      //   title: 'No candy machine in .env!',\r\n+      //   description: \"Add your candy machine address to the .env file!\",\r\n+      //   status: 'error',\r\n+      //   duration: 999999,\r\n+      //   isClosable: true,\r\n+      // })\r\n+      return publicKey(\"11111111111111111111111111111111\");\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []);\r\n+  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\r\n+\r\n+  useEffect(() => {\r\n+    const checkEligibilityFunc = async () => {\r\n+      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\r\n+        return;\r\n+      }\r\n+      setFirstRun(false);\r\n+\r\n+      const { guardReturn, ownedTokens } = await guardChecker(\r\n+        umi, candyGuard, candyMachine, solanaTime\r\n+      );\r\n+\r\n+      setOwnedTokens(ownedTokens);\r\n+      setGuards(guardReturn);\r\n+      setIsAllowed(false);\r\n+\r\n+      let allowed = false;\r\n+      for (const guard of guardReturn) {\r\n+        if (guard.allowed) {\r\n+          allowed = true;\r\n+          break;\r\n+        }\r\n+      }\r\n+\r\n+      setIsAllowed(allowed);\r\n+      setLoading(false);\r\n+    };\r\n+\r\n+    checkEligibilityFunc();\r\n+    // On purpose: not check for candyMachine, candyGuard, solanaTime\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [umi, checkEligibility, firstRun]);\r\n+\r\n+  const PageContent = () => {\r\n+    return (\r\n+      <Layout style={{ position: 'relative', background: 'rgba(255, 255, 255, 0)' }}>\r\n+        <Image\r\n+          alt=\"img\"\r\n+          src=\"/resources/images/mintback.png\" // 背景图路径\r\n+          preview={false} // 禁用预览\r\n+          style={{\r\n+            position: 'absolute',\r\n+            top: 0,\r\n+            left: 0,\r\n+            right: 0,\r\n+            bottom: 0,\r\n+            objectFit: 'cover', // 确保图片覆盖整个区域\r\n+            zIndex: -1 // 确保背景图在其他内容后面\r\n+          }}\r\n+        />\r\n+        <div style={{ marginTop: '6%', marginLeft: 80, padding: 0, display: 'flex', flex: 1, gap: '1%', alignItems: 'center' }}> {/* 使用 Flexbox 布局 */}\r\n+          <Content style={{ width: \"60%\" }}> {/* 设置为完全透明 */}\r\n+            <div style={{ fontSize: '20px', flex: '0 0 70%' }}>\r\n+              <Content style={{\r\n+                display: 'flex', // 使用 Flexbox 布局\r\n+                marginBottom: '3%'\r\n+              }}> {/* 使用 Flexbox 布局 */}\r\n+\r\n+                <p style={{ fontSize: '60px' }}><FormattedMessage id=\"zeroSan\" /></p>\r\n+                <Image\r\n+                  alt=\"account\"\r\n+                  src=\"/resources/images/account.png\"\r\n+                  style={{ width: '30px', height: 'auto', marginLeft: '30px' }} // 设置图片宽度自适应\r\n+                  preview={false} // 禁用预览\r\n+                />\r\n+              </Content>\r\n+\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"communityIntro\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"collaboration\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"mission\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\r\n+              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\r\n+              <p style={{ marginTop: '3%' }}>\r\n+                <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}><FormattedMessage id=\"twitter\" /></a>\r\n+                <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}><FormattedMessage id=\"telegram\" /></a>\r\n+              </p>\r\n+            </div>\r\n+          </Content>\r\n+          <Content style={{ width: \"30%\", display: 'flex', alignItems: 'center' }}>\r\n+            <Image\r\n+              alt=\"03-logo\"\r\n+              src=\"/resources/images/03-logo.png\"\r\n+              style={{ width: '400px', height: 'auto' }} // 设置图片宽度自适应\r\n+              preview={false} // 禁用预览\r\n+            />\r\n+          </Content>\r\n+        </div>\r\n+        <Footer style={{ textAlign: 'center', background: 'rgba(255, 255, 255, 0)', marginLeft: 80, marginTop: 80, padding: 0 }}>\r\n+          <Content style={{\r\n+            padding: 16,\r\n+            height: 55,\r\n+            width: '9%',\r\n+            background: 'rgba(128, 128, 128, 0.5)', // 设置透明的灰色背景\r\n+            borderRadius: '24px', // 设置圆角\r\n+            display: 'flex', // 使用 Flexbox 布局\r\n+            alignItems: 'center', // 垂直居中对齐\r\n+          }}> {/* 使用 Flexbox 布局 */}\r\n+            <Image\r\n+              alt=\"status-live\"\r\n+              src={stopMint ? \"/resources/images/status-live.png\" : \"/resources/images/status-stop.png\"} // 根据 StopMint 状态选择图片\r\n+              style={{ width: '25px', height: 'auto' }} // 设置图片宽度自适应\r\n+              preview={false} // 禁用预览\r\n+            />\r\n+            <p style={{ fontSize: '20px', marginLeft: '11%' }}><FormattedMessage id=\"presale\" /></p> {/* 添加右边距以增加间隔 */}\r\n+          </Content>\r\n+\r\n+          <div style={{ marginTop: '1%', display: 'flex', flex: 1, gap: '1%' }}> {/* 使用 Flexbox 布局 */}\r\n+            <Content\r\n+              style={{\r\n+                padding: 40,\r\n+                minHeight: 120,\r\n+                flex: '0 0 30%',\r\n+                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n+                borderRadius: '8px', // 设置圆角\r\n+              }}\r\n+            >\r\n+              <div style={{ textAlign: 'left', width: '100%' }}>\r\n+                <p style={{ fontSize: '16px', marginBottom: '5%' }}><FormattedMessage id=\"mintPrice\" /></p>\r\n+                <p style={{ fontSize: '24px', fontWeight: 'bold' }}><FormattedMessage id=\"mintPriceValue\" /></p>{/* 设置字体大小和加粗 */}\r\n+              </div>\r\n+            </Content>\r\n+            <Content\r\n+              style={{\r\n+                padding: 40,\r\n+                minHeight: 120,\r\n+                flex: '0 0 30%',\r\n+                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n+                borderRadius: '8px', // 设置圆角\r\n+                display: 'flex', // 使用 Flexbox 布局\r\n+                flexDirection: 'column', // 垂直排列\r\n+              }}\r\n+            >\r\n+              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n+                <div style={{ textAlign: 'left' }}>\r\n+                  <p style={{ fontSize: '16px', marginBottom: '12%' }} >\r\n+                    <FormattedMessage id=\"availability\" />\r\n+                    {/* {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)} */}\r\n+                  </p>\r\n+                  <p style={{ fontSize: '24px', fontWeight: 'bold' }} ><FormattedMessage id=\"presaleOnly\" /></p>\r\n+                </div>\r\n+                <ButtonList\r\n+                  guardList={guards}\r\n+                  candyMachine={candyMachine}\r\n+                  candyGuard={candyGuard}\r\n+                  umi={umi}\r\n+                  ownedTokens={ownedTokens}\r\n+                  setGuardList={setGuards}\r\n+                  mintsCreated={mintsCreated}\r\n+                  setMintsCreated={setMintsCreated}\r\n+                  onOpen={onShowNftOpen}\r\n+                  setCheckEligibility={setCheckEligibility}\r\n+                />\r\n+                <Button\r\n+                  //onClick={canMint && disableMint ? onClick : null} // 当 canMint 为 true 且 disableMint 为 false 时，点击事件为 onClick\r\n+                  disabled={!canMint || !disableMint} // 根据 canMint 和 disableMint 设置按钮禁用状态\r\n+                  className={`mint-button ${!disableMint ? 'disabled' : ''}`} // 根据 disableMint 设置类名\r\n+                >\r\n+                  <FormattedMessage id={!disableMint ? 'notMint' : canMint ? 'mint' : 'minted'} />\r\n+                </Button>\r\n+              </div>\r\n+            </Content>\r\n+          </div >\r\n+        </Footer >\r\n+      </Layout >\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <main>\r\n+      {/* <div className='wallet'>\r\n+        <WalletMultiButtonDynamic />\r\n+      </div> */}\r\n+      <PageContent key=\"content\" />\r\n+    </main>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1731335718210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,346 +322,8 @@\n                   setMintsCreated={setMintsCreated}\r\n                   onOpen={onShowNftOpen}\r\n                   setCheckEligibility={setCheckEligibility}\r\n                 />\r\n-                <Button\r\n-                  //onClick={canMint && disableMint ? onClick : null} // 当 canMint 为 true 且 disableMint 为 false 时，点击事件为 onClick\r\n-                  disabled={!canMint || !disableMint} // 根据 canMint 和 disableMint 设置按钮禁用状态\r\n-                  className={`mint-button ${!disableMint ? 'disabled' : ''}`} // 根据 disableMint 设置类名\r\n-                >\r\n-                  <FormattedMessage id={!disableMint ? 'notMint' : canMint ? 'mint' : 'minted'} />\r\n-                </Button>\r\n-              </div>\r\n-            </Content>\r\n-          </div >\r\n-        </Footer >\r\n-      </Layout >\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n-    <main>\r\n-      {/* <div className='wallet'>\r\n-        <WalletMultiButtonDynamic />\r\n-      </div> */}\r\n-      <PageContent key=\"content\" />\r\n-    </main>\r\n-  );\r\n-}\r\n-import {\r\n-  PublicKey,\r\n-  publicKey,\r\n-  Umi,\r\n-} from \"@metaplex-foundation/umi\";\r\n-import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\r\n-import dynamic from \"next/dynamic\";\r\n-import { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\r\n-import { useUmi } from \"./utils/useUmi\";\r\n-import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\"\r\n-import { guardChecker } from \"./utils/checkAllowed\";\r\n-//import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\r\n-import { Center, Skeleton, useDisclosure, ModalHeader, ModalOverlay, Box, Divider, useToast, VStack, Flex } from '@chakra-ui/react';\r\n-import { ButtonList } from \"./components/mintButton\";\r\n-import { GuardReturn } from \"./utils/checkerHelper\";\r\n-import { ShowNft } from \"./components/showNft\";\r\n-import { InitializeModal } from \"./components/initializeModal\";\r\n-import { image, headerText } from \"./settings\";\r\n-import { useSolanaTime } from \"./utils/SolanaTimeContext\";\r\n-import { Button, Card, Row, Col, Spin, Layout, Modal, Menu, Image } from 'antd';\r\n-import { FormattedMessage } from 'react-intl';\r\n-const { Header, Sider, Content, Footer } = Layout;\r\n-\r\n-const WalletMultiButtonDynamic = dynamic(\r\n-  async () =>\r\n-    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\r\n-  { ssr: false }\r\n-);\r\n-\r\n-const useCandyMachine = (\r\n-  umi: Umi,\r\n-  candyMachineId: string,\r\n-  checkEligibility: boolean,\r\n-  setCheckEligibility: Dispatch<SetStateAction<boolean>>,\r\n-  firstRun: boolean,\r\n-  setfirstRun: Dispatch<SetStateAction<boolean>>\r\n-) => {\r\n-  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n-  const [candyGuard, setCandyGuard] = useState<CandyGuard>();\r\n-  const toast = useToast();\r\n-\r\n-\r\n-  useEffect(() => {\r\n-    (async () => {\r\n-      if (checkEligibility) {\r\n-        if (!candyMachineId) {\r\n-          console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\");\r\n-          // if (!toast.isActive(\"no-cm\")) {\r\n-          //   toast({\r\n-          //     id: \"no-cm\",\r\n-          //     title: \"No candy machine in .env!\",\r\n-          //     description: \"Add your candy machine address to the .env file!\",\r\n-          //     status: \"error\",\r\n-          //     duration: 999999,\r\n-          //     isClosable: true,\r\n-          //   });\r\n-          // }\r\n-          return;\r\n-        }\r\n-\r\n-        let candyMachine;\r\n-        try {\r\n-          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\r\n-          //verify CM Version\r\n-          if (candyMachine.version != AccountVersion.V2) {\r\n-            console.error(\"Wrong candy machine account version!Please use latest sugar to create your candy machine. Need Account Version 2!\");\r\n-            // toast({\r\n-            //   id: \"wrong-account-version\",\r\n-            //   title: \"Wrong candy machine account version!\",\r\n-            //   description: \"Please use latest sugar to create your candy machine. Need Account Version 2!\",\r\n-            //   status: \"error\",\r\n-            //   duration: 999999,\r\n-            //   isClosable: true,\r\n-            // });\r\n-            return;\r\n-          }\r\n-        } catch (e) {\r\n-          console.error(\"The CM from .env is invalid!Are you using the correct environment?\" + e);\r\n-          // toast({\r\n-          //   id: \"no-cm-found\",\r\n-          //   title: \"The CM from .env is invalid\",\r\n-          //   description: \"Are you using the correct environment?\",\r\n-          //   status: \"error\",\r\n-          //   duration: 999999,\r\n-          //   isClosable: true,\r\n-          // });\r\n-        }\r\n-        setCandyMachine(candyMachine);\r\n-        if (!candyMachine) {\r\n-          return;\r\n-        }\r\n-        let candyGuard;\r\n-        try {\r\n-          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\r\n-        } catch (e) {\r\n-          console.error(\"No Candy Guard found!Do you have one assigned?\" + e);\r\n-          // toast({\r\n-          //   id: \"no-guard-found\",\r\n-          //   title: \"No Candy Guard found!\",\r\n-          //   description: \"Do you have one assigned?\",\r\n-          //   status: \"error\",\r\n-          //   duration: 999999,\r\n-          //   isClosable: true,\r\n-          // });\r\n-        }\r\n-        if (!candyGuard) {\r\n-          return;\r\n-        }\r\n-        setCandyGuard(candyGuard);\r\n-        if (firstRun) {\r\n-          setfirstRun(false)\r\n-        }\r\n-      }\r\n-    })();\r\n-  }, [umi, checkEligibility, candyMachineId, firstRun, setfirstRun, toast]);\r\n-\r\n-  return { candyMachine, candyGuard };\r\n-\r\n-\r\n-};\r\n-\r\n-\r\n-export default function Home() {\r\n-  const umi = useUmi();\r\n-  const solanaTime = useSolanaTime();\r\n-  const toast = useToast();\r\n-  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\r\n-  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\r\n-  const [mintsCreated, setMintsCreated] = useState<{ mint: PublicKey, offChainMetadata: JsonMetadata | undefined }[] | undefined>();\r\n-  const [isAllowed, setIsAllowed] = useState<boolean>(false);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [ownedTokens, setOwnedTokens] = useState<DigitalAssetWithToken[]>();\r\n-  const [guards, setGuards] = useState<GuardReturn[]>([\r\n-    { label: \"startDefault\", allowed: false, maxAmount: 0 },\r\n-  ]);\r\n-  const [firstRun, setFirstRun] = useState(true);\r\n-  const [checkEligibility, setCheckEligibility] = useState<boolean>(true);\r\n-  const [disableMint, setDisableMint] = useState(true);\r\n-  const [canMint, setCanMint] = useState(true);\r\n-  const [stopMint, setStopMint] = useState(true);\r\n-\r\n-  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n-    console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\")\r\n-    // if (!toast.isActive('no-cm')) {\r\n-    //   toast({\r\n-    //     id: 'no-cm',\r\n-    //     title: 'No candy machine in .env!',\r\n-    //     description: \"Add your candy machine address to the .env file!\",\r\n-    //     status: 'error',\r\n-    //     duration: 999999,\r\n-    //     isClosable: true,\r\n-    //   })\r\n-    // }\r\n-  }\r\n-  const candyMachineId: PublicKey = useMemo(() => {\r\n-    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n-      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\r\n-    } else {\r\n-      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!Add your candy machine address to the .env file!`);\r\n-      // toast({\r\n-      //   id: 'no-cm',\r\n-      //   title: 'No candy machine in .env!',\r\n-      //   description: \"Add your candy machine address to the .env file!\",\r\n-      //   status: 'error',\r\n-      //   duration: 999999,\r\n-      //   isClosable: true,\r\n-      // })\r\n-      return publicKey(\"11111111111111111111111111111111\");\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, []);\r\n-  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\r\n-\r\n-  useEffect(() => {\r\n-    const checkEligibilityFunc = async () => {\r\n-      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\r\n-        return;\r\n-      }\r\n-      setFirstRun(false);\r\n-\r\n-      const { guardReturn, ownedTokens } = await guardChecker(\r\n-        umi, candyGuard, candyMachine, solanaTime\r\n-      );\r\n-\r\n-      setOwnedTokens(ownedTokens);\r\n-      setGuards(guardReturn);\r\n-      setIsAllowed(false);\r\n-\r\n-      let allowed = false;\r\n-      for (const guard of guardReturn) {\r\n-        if (guard.allowed) {\r\n-          allowed = true;\r\n-          break;\r\n-        }\r\n-      }\r\n-\r\n-      setIsAllowed(allowed);\r\n-      setLoading(false);\r\n-    };\r\n-\r\n-    checkEligibilityFunc();\r\n-    // On purpose: not check for candyMachine, candyGuard, solanaTime\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [umi, checkEligibility, firstRun]);\r\n-\r\n-  const PageContent = () => {\r\n-    return (\r\n-      <Layout style={{ position: 'relative', background: 'rgba(255, 255, 255, 0)' }}>\r\n-        <Image\r\n-          alt=\"img\"\r\n-          src=\"/resources/images/mintback.png\" // 背景图路径\r\n-          preview={false} // 禁用预览\r\n-          style={{\r\n-            position: 'absolute',\r\n-            top: 0,\r\n-            left: 0,\r\n-            right: 0,\r\n-            bottom: 0,\r\n-            objectFit: 'cover', // 确保图片覆盖整个区域\r\n-            zIndex: -1 // 确保背景图在其他内容后面\r\n-          }}\r\n-        />\r\n-        <div style={{ marginTop: '6%', marginLeft: 80, padding: 0, display: 'flex', flex: 1, gap: '1%', alignItems: 'center' }}> {/* 使用 Flexbox 布局 */}\r\n-          <Content style={{ width: \"60%\" }}> {/* 设置为完全透明 */}\r\n-            <div style={{ fontSize: '20px', flex: '0 0 70%' }}>\r\n-              <Content style={{\r\n-                display: 'flex', // 使用 Flexbox 布局\r\n-                marginBottom: '3%'\r\n-              }}> {/* 使用 Flexbox 布局 */}\r\n-\r\n-                <p style={{ fontSize: '60px' }}><FormattedMessage id=\"zeroSan\" /></p>\r\n-                <Image\r\n-                  alt=\"account\"\r\n-                  src=\"/resources/images/account.png\"\r\n-                  style={{ width: '30px', height: 'auto', marginLeft: '30px' }} // 设置图片宽度自适应\r\n-                  preview={false} // 禁用预览\r\n-                />\r\n-              </Content>\r\n-\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"communityIntro\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"collaboration\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"mission\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\r\n-              <p style={{ marginTop: '3%' }}>\r\n-                <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}><FormattedMessage id=\"twitter\" /></a>\r\n-                <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}><FormattedMessage id=\"telegram\" /></a>\r\n-              </p>\r\n-            </div>\r\n-          </Content>\r\n-          <Content style={{ width: \"30%\", display: 'flex', alignItems: 'center' }}>\r\n-            <Image\r\n-              alt=\"03-logo\"\r\n-              src=\"/resources/images/03-logo.png\"\r\n-              style={{ width: '400px', height: 'auto' }} // 设置图片宽度自适应\r\n-              preview={false} // 禁用预览\r\n-            />\r\n-          </Content>\r\n-        </div>\r\n-        <Footer style={{ textAlign: 'center', background: 'rgba(255, 255, 255, 0)', marginLeft: 80, marginTop: 80, padding: 0 }}>\r\n-          <Content style={{\r\n-            padding: 16,\r\n-            height: 55,\r\n-            width: '9%',\r\n-            background: 'rgba(128, 128, 128, 0.5)', // 设置透明的灰色背景\r\n-            borderRadius: '24px', // 设置圆角\r\n-            display: 'flex', // 使用 Flexbox 布局\r\n-            alignItems: 'center', // 垂直居中对齐\r\n-          }}> {/* 使用 Flexbox 布局 */}\r\n-            <Image\r\n-              alt=\"status-live\"\r\n-              src={stopMint ? \"/resources/images/status-live.png\" : \"/resources/images/status-stop.png\"} // 根据 StopMint 状态选择图片\r\n-              style={{ width: '25px', height: 'auto' }} // 设置图片宽度自适应\r\n-              preview={false} // 禁用预览\r\n-            />\r\n-            <p style={{ fontSize: '20px', marginLeft: '11%' }}><FormattedMessage id=\"presale\" /></p> {/* 添加右边距以增加间隔 */}\r\n-          </Content>\r\n-\r\n-          <div style={{ marginTop: '1%', display: 'flex', flex: 1, gap: '1%' }}> {/* 使用 Flexbox 布局 */}\r\n-            <Content\r\n-              style={{\r\n-                padding: 40,\r\n-                minHeight: 120,\r\n-                flex: '0 0 30%',\r\n-                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n-                borderRadius: '8px', // 设置圆角\r\n-              }}\r\n-            >\r\n-              <div style={{ textAlign: 'left', width: '100%' }}>\r\n-                <p style={{ fontSize: '16px', marginBottom: '5%' }}><FormattedMessage id=\"mintPrice\" /></p>\r\n-                <p style={{ fontSize: '24px', fontWeight: 'bold' }}><FormattedMessage id=\"mintPriceValue\" /></p>{/* 设置字体大小和加粗 */}\r\n-              </div>\r\n-            </Content>\r\n-            <Content\r\n-              style={{\r\n-                padding: 40,\r\n-                minHeight: 120,\r\n-                flex: '0 0 30%',\r\n-                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n-                borderRadius: '8px', // 设置圆角\r\n-                display: 'flex', // 使用 Flexbox 布局\r\n-                flexDirection: 'column', // 垂直排列\r\n-              }}\r\n-            >\r\n-              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n-                <div style={{ textAlign: 'left' }}>\r\n-                  <p style={{ fontSize: '16px', marginBottom: '12%' }} >\r\n-                    <FormattedMessage id=\"availability\" />\r\n-                    {/* {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)} */}\r\n-                  </p>\r\n-                  <p style={{ fontSize: '24px', fontWeight: 'bold' }} ><FormattedMessage id=\"presaleOnly\" /></p>\r\n-                </div>\r\n-\r\n                 {/* <Button\r\n                   //onClick={canMint && disableMint ? onClick : null} // 当 canMint 为 true 且 disableMint 为 false 时，点击事件为 onClick\r\n                   disabled={!canMint || !disableMint} // 根据 canMint 和 disableMint 设置按钮禁用状态\r\n                   className={`mint-button ${!disableMint ? 'disabled' : ''}`} // 根据 disableMint 设置类名\r\n@@ -684,1053 +346,4 @@\n       <PageContent key=\"content\" />\r\n     </main>\r\n   );\r\n }\r\n-import {\r\n-  PublicKey,\r\n-  publicKey,\r\n-  Umi,\r\n-} from \"@metaplex-foundation/umi\";\r\n-import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\r\n-import dynamic from \"next/dynamic\";\r\n-import { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\r\n-import { useUmi } from \"./utils/useUmi\";\r\n-import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\"\r\n-import { guardChecker } from \"./utils/checkAllowed\";\r\n-//import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\r\n-import { Center, Skeleton, useDisclosure, ModalHeader, ModalOverlay, Box, Divider, useToast, VStack, Flex } from '@chakra-ui/react';\r\n-import { ButtonList } from \"./components/mintButton\";\r\n-import { GuardReturn } from \"./utils/checkerHelper\";\r\n-import { ShowNft } from \"./components/showNft\";\r\n-import { InitializeModal } from \"./components/initializeModal\";\r\n-import { image, headerText } from \"./settings\";\r\n-import { useSolanaTime } from \"./utils/SolanaTimeContext\";\r\n-import { Button, Card, Row, Col, Spin, Layout, Modal, Menu, Image } from 'antd';\r\n-import { FormattedMessage } from 'react-intl';\r\n-const { Header, Sider, Content, Footer } = Layout;\r\n-\r\n-const WalletMultiButtonDynamic = dynamic(\r\n-  async () =>\r\n-    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\r\n-  { ssr: false }\r\n-);\r\n-\r\n-const useCandyMachine = (\r\n-  umi: Umi,\r\n-  candyMachineId: string,\r\n-  checkEligibility: boolean,\r\n-  setCheckEligibility: Dispatch<SetStateAction<boolean>>,\r\n-  firstRun: boolean,\r\n-  setfirstRun: Dispatch<SetStateAction<boolean>>\r\n-) => {\r\n-  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n-  const [candyGuard, setCandyGuard] = useState<CandyGuard>();\r\n-  const toast = useToast();\r\n-\r\n-\r\n-  useEffect(() => {\r\n-    (async () => {\r\n-      if (checkEligibility) {\r\n-        if (!candyMachineId) {\r\n-          console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\");\r\n-          // if (!toast.isActive(\"no-cm\")) {\r\n-          //   toast({\r\n-          //     id: \"no-cm\",\r\n-          //     title: \"No candy machine in .env!\",\r\n-          //     description: \"Add your candy machine address to the .env file!\",\r\n-          //     status: \"error\",\r\n-          //     duration: 999999,\r\n-          //     isClosable: true,\r\n-          //   });\r\n-          // }\r\n-          return;\r\n-        }\r\n-\r\n-        let candyMachine;\r\n-        try {\r\n-          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\r\n-          //verify CM Version\r\n-          if (candyMachine.version != AccountVersion.V2) {\r\n-            console.error(\"Wrong candy machine account version!Please use latest sugar to create your candy machine. Need Account Version 2!\");\r\n-            // toast({\r\n-            //   id: \"wrong-account-version\",\r\n-            //   title: \"Wrong candy machine account version!\",\r\n-            //   description: \"Please use latest sugar to create your candy machine. Need Account Version 2!\",\r\n-            //   status: \"error\",\r\n-            //   duration: 999999,\r\n-            //   isClosable: true,\r\n-            // });\r\n-            return;\r\n-          }\r\n-        } catch (e) {\r\n-          console.error(\"The CM from .env is invalid!Are you using the correct environment?\" + e);\r\n-          // toast({\r\n-          //   id: \"no-cm-found\",\r\n-          //   title: \"The CM from .env is invalid\",\r\n-          //   description: \"Are you using the correct environment?\",\r\n-          //   status: \"error\",\r\n-          //   duration: 999999,\r\n-          //   isClosable: true,\r\n-          // });\r\n-        }\r\n-        setCandyMachine(candyMachine);\r\n-        if (!candyMachine) {\r\n-          return;\r\n-        }\r\n-        let candyGuard;\r\n-        try {\r\n-          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\r\n-        } catch (e) {\r\n-          console.error(\"No Candy Guard found!Do you have one assigned?\" + e);\r\n-          // toast({\r\n-          //   id: \"no-guard-found\",\r\n-          //   title: \"No Candy Guard found!\",\r\n-          //   description: \"Do you have one assigned?\",\r\n-          //   status: \"error\",\r\n-          //   duration: 999999,\r\n-          //   isClosable: true,\r\n-          // });\r\n-        }\r\n-        if (!candyGuard) {\r\n-          return;\r\n-        }\r\n-        setCandyGuard(candyGuard);\r\n-        if (firstRun) {\r\n-          setfirstRun(false)\r\n-        }\r\n-      }\r\n-    })();\r\n-  }, [umi, checkEligibility, candyMachineId, firstRun, setfirstRun, toast]);\r\n-\r\n-  return { candyMachine, candyGuard };\r\n-\r\n-\r\n-};\r\n-\r\n-\r\n-export default function Home() {\r\n-  const umi = useUmi();\r\n-  const solanaTime = useSolanaTime();\r\n-  const toast = useToast();\r\n-  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\r\n-  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\r\n-  const [mintsCreated, setMintsCreated] = useState<{ mint: PublicKey, offChainMetadata: JsonMetadata | undefined }[] | undefined>();\r\n-  const [isAllowed, setIsAllowed] = useState<boolean>(false);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [ownedTokens, setOwnedTokens] = useState<DigitalAssetWithToken[]>();\r\n-  const [guards, setGuards] = useState<GuardReturn[]>([\r\n-    { label: \"startDefault\", allowed: false, maxAmount: 0 },\r\n-  ]);\r\n-  const [firstRun, setFirstRun] = useState(true);\r\n-  const [checkEligibility, setCheckEligibility] = useState<boolean>(true);\r\n-  const [disableMint, setDisableMint] = useState(true);\r\n-  const [canMint, setCanMint] = useState(true);\r\n-  const [stopMint, setStopMint] = useState(true);\r\n-\r\n-  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n-    console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\")\r\n-    // if (!toast.isActive('no-cm')) {\r\n-    //   toast({\r\n-    //     id: 'no-cm',\r\n-    //     title: 'No candy machine in .env!',\r\n-    //     description: \"Add your candy machine address to the .env file!\",\r\n-    //     status: 'error',\r\n-    //     duration: 999999,\r\n-    //     isClosable: true,\r\n-    //   })\r\n-    // }\r\n-  }\r\n-  const candyMachineId: PublicKey = useMemo(() => {\r\n-    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n-      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\r\n-    } else {\r\n-      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!Add your candy machine address to the .env file!`);\r\n-      // toast({\r\n-      //   id: 'no-cm',\r\n-      //   title: 'No candy machine in .env!',\r\n-      //   description: \"Add your candy machine address to the .env file!\",\r\n-      //   status: 'error',\r\n-      //   duration: 999999,\r\n-      //   isClosable: true,\r\n-      // })\r\n-      return publicKey(\"11111111111111111111111111111111\");\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, []);\r\n-  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\r\n-\r\n-  useEffect(() => {\r\n-    const checkEligibilityFunc = async () => {\r\n-      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\r\n-        return;\r\n-      }\r\n-      setFirstRun(false);\r\n-\r\n-      const { guardReturn, ownedTokens } = await guardChecker(\r\n-        umi, candyGuard, candyMachine, solanaTime\r\n-      );\r\n-\r\n-      setOwnedTokens(ownedTokens);\r\n-      setGuards(guardReturn);\r\n-      setIsAllowed(false);\r\n-\r\n-      let allowed = false;\r\n-      for (const guard of guardReturn) {\r\n-        if (guard.allowed) {\r\n-          allowed = true;\r\n-          break;\r\n-        }\r\n-      }\r\n-\r\n-      setIsAllowed(allowed);\r\n-      setLoading(false);\r\n-    };\r\n-\r\n-    checkEligibilityFunc();\r\n-    // On purpose: not check for candyMachine, candyGuard, solanaTime\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [umi, checkEligibility, firstRun]);\r\n-\r\n-  const PageContent = () => {\r\n-    return (\r\n-      <Layout style={{ position: 'relative', background: 'rgba(255, 255, 255, 0)' }}>\r\n-        <Image\r\n-          alt=\"img\"\r\n-          src=\"/resources/images/mintback.png\" // 背景图路径\r\n-          preview={false} // 禁用预览\r\n-          style={{\r\n-            position: 'absolute',\r\n-            top: 0,\r\n-            left: 0,\r\n-            right: 0,\r\n-            bottom: 0,\r\n-            objectFit: 'cover', // 确保图片覆盖整个区域\r\n-            zIndex: -1 // 确保背景图在其他内容后面\r\n-          }}\r\n-        />\r\n-        <div style={{ marginTop: '6%', marginLeft: 80, padding: 0, display: 'flex', flex: 1, gap: '1%', alignItems: 'center' }}> {/* 使用 Flexbox 布局 */}\r\n-          <Content style={{ width: \"60%\" }}> {/* 设置为完全透明 */}\r\n-            <div style={{ fontSize: '20px', flex: '0 0 70%' }}>\r\n-              <Content style={{\r\n-                display: 'flex', // 使用 Flexbox 布局\r\n-                marginBottom: '3%'\r\n-              }}> {/* 使用 Flexbox 布局 */}\r\n-\r\n-                <p style={{ fontSize: '60px' }}><FormattedMessage id=\"zeroSan\" /></p>\r\n-                <Image\r\n-                  alt=\"account\"\r\n-                  src=\"/resources/images/account.png\"\r\n-                  style={{ width: '30px', height: 'auto', marginLeft: '30px' }} // 设置图片宽度自适应\r\n-                  preview={false} // 禁用预览\r\n-                />\r\n-              </Content>\r\n-\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"communityIntro\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"collaboration\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"mission\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\r\n-              <p style={{ marginTop: '3%' }}>\r\n-                <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}><FormattedMessage id=\"twitter\" /></a>\r\n-                <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}><FormattedMessage id=\"telegram\" /></a>\r\n-              </p>\r\n-            </div>\r\n-          </Content>\r\n-          <Content style={{ width: \"30%\", display: 'flex', alignItems: 'center' }}>\r\n-            <Image\r\n-              alt=\"03-logo\"\r\n-              src=\"/resources/images/03-logo.png\"\r\n-              style={{ width: '400px', height: 'auto' }} // 设置图片宽度自适应\r\n-              preview={false} // 禁用预览\r\n-            />\r\n-          </Content>\r\n-        </div>\r\n-        <Footer style={{ textAlign: 'center', background: 'rgba(255, 255, 255, 0)', marginLeft: 80, marginTop: 80, padding: 0 }}>\r\n-          <Content style={{\r\n-            padding: 16,\r\n-            height: 55,\r\n-            width: '9%',\r\n-            background: 'rgba(128, 128, 128, 0.5)', // 设置透明的灰色背景\r\n-            borderRadius: '24px', // 设置圆角\r\n-            display: 'flex', // 使用 Flexbox 布局\r\n-            alignItems: 'center', // 垂直居中对齐\r\n-          }}> {/* 使用 Flexbox 布局 */}\r\n-            <Image\r\n-              alt=\"status-live\"\r\n-              src={stopMint ? \"/resources/images/status-live.png\" : \"/resources/images/status-stop.png\"} // 根据 StopMint 状态选择图片\r\n-              style={{ width: '25px', height: 'auto' }} // 设置图片宽度自适应\r\n-              preview={false} // 禁用预览\r\n-            />\r\n-            <p style={{ fontSize: '20px', marginLeft: '11%' }}><FormattedMessage id=\"presale\" /></p> {/* 添加右边距以增加间隔 */}\r\n-          </Content>\r\n-\r\n-          <div style={{ marginTop: '1%', display: 'flex', flex: 1, gap: '1%' }}> {/* 使用 Flexbox 布局 */}\r\n-            <Content\r\n-              style={{\r\n-                padding: 40,\r\n-                minHeight: 120,\r\n-                flex: '0 0 30%',\r\n-                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n-                borderRadius: '8px', // 设置圆角\r\n-              }}\r\n-            >\r\n-              <div style={{ textAlign: 'left', width: '100%' }}>\r\n-                <p style={{ fontSize: '16px', marginBottom: '5%' }}><FormattedMessage id=\"mintPrice\" /></p>\r\n-                <p style={{ fontSize: '24px', fontWeight: 'bold' }}><FormattedMessage id=\"mintPriceValue\" /></p>{/* 设置字体大小和加粗 */}\r\n-              </div>\r\n-            </Content>\r\n-            <Content\r\n-              style={{\r\n-                padding: 40,\r\n-                minHeight: 120,\r\n-                flex: '0 0 30%',\r\n-                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n-                borderRadius: '8px', // 设置圆角\r\n-                display: 'flex', // 使用 Flexbox 布局\r\n-                flexDirection: 'column', // 垂直排列\r\n-              }}\r\n-            >\r\n-              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n-                <div style={{ textAlign: 'left' }}>\r\n-                  <p style={{ fontSize: '16px' }} >\r\n-                    <FormattedMessage id=\"availability\" />\r\n-                    {/* {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)} */}\r\n-                  </p>\r\n-                  <p style={{ fontSize: '24px', fontWeight: 'bold' }} ><FormattedMessage id=\"presaleOnly\" /></p>\r\n-                </div>\r\n-                <ButtonList\r\n-                  guardList={guards}\r\n-                  candyMachine={candyMachine}\r\n-                  candyGuard={candyGuard}\r\n-                  umi={umi}\r\n-                  ownedTokens={ownedTokens}\r\n-                  setGuardList={setGuards}\r\n-                  mintsCreated={mintsCreated}\r\n-                  setMintsCreated={setMintsCreated}\r\n-                  onOpen={onShowNftOpen}\r\n-                  setCheckEligibility={setCheckEligibility}\r\n-                />\r\n-                {/* <Button\r\n-                  //onClick={canMint && disableMint ? onClick : null} // 当 canMint 为 true 且 disableMint 为 false 时，点击事件为 onClick\r\n-                  disabled={!canMint || !disableMint} // 根据 canMint 和 disableMint 设置按钮禁用状态\r\n-                  className={`mint-button ${!disableMint ? 'disabled' : ''}`} // 根据 disableMint 设置类名\r\n-                >\r\n-                  <FormattedMessage id={!disableMint ? 'notMint' : canMint ? 'mint' : 'minted'} />\r\n-                </Button> */}\r\n-              </div>\r\n-            </Content>\r\n-          </div >\r\n-        </Footer >\r\n-      </Layout >\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n-    <main>\r\n-      {/* <div className='wallet'>\r\n-        <WalletMultiButtonDynamic />\r\n-      </div> */}\r\n-      <PageContent key=\"content\" />\r\n-    </main>\r\n-  );\r\n-}\r\n-import {\r\n-  PublicKey,\r\n-  publicKey,\r\n-  Umi,\r\n-} from \"@metaplex-foundation/umi\";\r\n-import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\r\n-import dynamic from \"next/dynamic\";\r\n-import { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\r\n-import { useUmi } from \"./utils/useUmi\";\r\n-import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\"\r\n-import { guardChecker } from \"./utils/checkAllowed\";\r\n-//import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\r\n-import { Center, Skeleton, useDisclosure, ModalHeader, ModalOverlay, Box, Divider, useToast, VStack, Flex } from '@chakra-ui/react';\r\n-import { ButtonList } from \"./components/mintButton\";\r\n-import { GuardReturn } from \"./utils/checkerHelper\";\r\n-import { ShowNft } from \"./components/showNft\";\r\n-import { InitializeModal } from \"./components/initializeModal\";\r\n-import { image, headerText } from \"./settings\";\r\n-import { useSolanaTime } from \"./utils/SolanaTimeContext\";\r\n-import { Button, Card, Row, Col, Spin, Layout, Modal, Menu, Image } from 'antd';\r\n-import { FormattedMessage } from 'react-intl';\r\n-const { Header, Sider, Content, Footer } = Layout;\r\n-\r\n-const WalletMultiButtonDynamic = dynamic(\r\n-  async () =>\r\n-    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\r\n-  { ssr: false }\r\n-);\r\n-\r\n-const useCandyMachine = (\r\n-  umi: Umi,\r\n-  candyMachineId: string,\r\n-  checkEligibility: boolean,\r\n-  setCheckEligibility: Dispatch<SetStateAction<boolean>>,\r\n-  firstRun: boolean,\r\n-  setfirstRun: Dispatch<SetStateAction<boolean>>\r\n-) => {\r\n-  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n-  const [candyGuard, setCandyGuard] = useState<CandyGuard>();\r\n-  const toast = useToast();\r\n-\r\n-\r\n-  useEffect(() => {\r\n-    (async () => {\r\n-      if (checkEligibility) {\r\n-        if (!candyMachineId) {\r\n-          console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\");\r\n-          // if (!toast.isActive(\"no-cm\")) {\r\n-          //   toast({\r\n-          //     id: \"no-cm\",\r\n-          //     title: \"No candy machine in .env!\",\r\n-          //     description: \"Add your candy machine address to the .env file!\",\r\n-          //     status: \"error\",\r\n-          //     duration: 999999,\r\n-          //     isClosable: true,\r\n-          //   });\r\n-          // }\r\n-          return;\r\n-        }\r\n-\r\n-        let candyMachine;\r\n-        try {\r\n-          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\r\n-          //verify CM Version\r\n-          if (candyMachine.version != AccountVersion.V2) {\r\n-            console.error(\"Wrong candy machine account version!Please use latest sugar to create your candy machine. Need Account Version 2!\");\r\n-            // toast({\r\n-            //   id: \"wrong-account-version\",\r\n-            //   title: \"Wrong candy machine account version!\",\r\n-            //   description: \"Please use latest sugar to create your candy machine. Need Account Version 2!\",\r\n-            //   status: \"error\",\r\n-            //   duration: 999999,\r\n-            //   isClosable: true,\r\n-            // });\r\n-            return;\r\n-          }\r\n-        } catch (e) {\r\n-          console.error(\"The CM from .env is invalid!Are you using the correct environment?\" + e);\r\n-          // toast({\r\n-          //   id: \"no-cm-found\",\r\n-          //   title: \"The CM from .env is invalid\",\r\n-          //   description: \"Are you using the correct environment?\",\r\n-          //   status: \"error\",\r\n-          //   duration: 999999,\r\n-          //   isClosable: true,\r\n-          // });\r\n-        }\r\n-        setCandyMachine(candyMachine);\r\n-        if (!candyMachine) {\r\n-          return;\r\n-        }\r\n-        let candyGuard;\r\n-        try {\r\n-          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\r\n-        } catch (e) {\r\n-          console.error(\"No Candy Guard found!Do you have one assigned?\" + e);\r\n-          // toast({\r\n-          //   id: \"no-guard-found\",\r\n-          //   title: \"No Candy Guard found!\",\r\n-          //   description: \"Do you have one assigned?\",\r\n-          //   status: \"error\",\r\n-          //   duration: 999999,\r\n-          //   isClosable: true,\r\n-          // });\r\n-        }\r\n-        if (!candyGuard) {\r\n-          return;\r\n-        }\r\n-        setCandyGuard(candyGuard);\r\n-        if (firstRun) {\r\n-          setfirstRun(false)\r\n-        }\r\n-      }\r\n-    })();\r\n-  }, [umi, checkEligibility, candyMachineId, firstRun, setfirstRun, toast]);\r\n-\r\n-  return { candyMachine, candyGuard };\r\n-\r\n-\r\n-};\r\n-\r\n-\r\n-export default function Home() {\r\n-  const umi = useUmi();\r\n-  const solanaTime = useSolanaTime();\r\n-  const toast = useToast();\r\n-  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\r\n-  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\r\n-  const [mintsCreated, setMintsCreated] = useState<{ mint: PublicKey, offChainMetadata: JsonMetadata | undefined }[] | undefined>();\r\n-  const [isAllowed, setIsAllowed] = useState<boolean>(false);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [ownedTokens, setOwnedTokens] = useState<DigitalAssetWithToken[]>();\r\n-  const [guards, setGuards] = useState<GuardReturn[]>([\r\n-    { label: \"startDefault\", allowed: false, maxAmount: 0 },\r\n-  ]);\r\n-  const [firstRun, setFirstRun] = useState(true);\r\n-  const [checkEligibility, setCheckEligibility] = useState<boolean>(true);\r\n-  const [disableMint, setDisableMint] = useState(true);\r\n-  const [canMint, setCanMint] = useState(true);\r\n-  const [stopMint, setStopMint] = useState(true);\r\n-\r\n-  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n-    console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\")\r\n-    // if (!toast.isActive('no-cm')) {\r\n-    //   toast({\r\n-    //     id: 'no-cm',\r\n-    //     title: 'No candy machine in .env!',\r\n-    //     description: \"Add your candy machine address to the .env file!\",\r\n-    //     status: 'error',\r\n-    //     duration: 999999,\r\n-    //     isClosable: true,\r\n-    //   })\r\n-    // }\r\n-  }\r\n-  const candyMachineId: PublicKey = useMemo(() => {\r\n-    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n-      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\r\n-    } else {\r\n-      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!Add your candy machine address to the .env file!`);\r\n-      // toast({\r\n-      //   id: 'no-cm',\r\n-      //   title: 'No candy machine in .env!',\r\n-      //   description: \"Add your candy machine address to the .env file!\",\r\n-      //   status: 'error',\r\n-      //   duration: 999999,\r\n-      //   isClosable: true,\r\n-      // })\r\n-      return publicKey(\"11111111111111111111111111111111\");\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, []);\r\n-  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\r\n-\r\n-  useEffect(() => {\r\n-    const checkEligibilityFunc = async () => {\r\n-      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\r\n-        return;\r\n-      }\r\n-      setFirstRun(false);\r\n-\r\n-      const { guardReturn, ownedTokens } = await guardChecker(\r\n-        umi, candyGuard, candyMachine, solanaTime\r\n-      );\r\n-\r\n-      setOwnedTokens(ownedTokens);\r\n-      setGuards(guardReturn);\r\n-      setIsAllowed(false);\r\n-\r\n-      let allowed = false;\r\n-      for (const guard of guardReturn) {\r\n-        if (guard.allowed) {\r\n-          allowed = true;\r\n-          break;\r\n-        }\r\n-      }\r\n-\r\n-      setIsAllowed(allowed);\r\n-      setLoading(false);\r\n-    };\r\n-\r\n-    checkEligibilityFunc();\r\n-    // On purpose: not check for candyMachine, candyGuard, solanaTime\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [umi, checkEligibility, firstRun]);\r\n-\r\n-  const PageContent = () => {\r\n-    return (\r\n-      <Layout style={{ position: 'relative', background: 'rgba(255, 255, 255, 0)' }}>\r\n-        <Image\r\n-          alt=\"img\"\r\n-          src=\"/resources/images/mintback.png\" // 背景图路径\r\n-          preview={false} // 禁用预览\r\n-          style={{\r\n-            position: 'absolute',\r\n-            top: 0,\r\n-            left: 0,\r\n-            right: 0,\r\n-            bottom: 0,\r\n-            objectFit: 'cover', // 确保图片覆盖整个区域\r\n-            zIndex: -1 // 确保背景图在其他内容后面\r\n-          }}\r\n-        />\r\n-        <div style={{ marginTop: '6%', marginLeft: 80, padding: 0, display: 'flex', flex: 1, gap: '1%', alignItems: 'center' }}> {/* 使用 Flexbox 布局 */}\r\n-          <Content style={{ width: \"60%\" }}> {/* 设置为完全透明 */}\r\n-            <div style={{ fontSize: '20px', flex: '0 0 70%' }}>\r\n-              <Content style={{\r\n-                display: 'flex', // 使用 Flexbox 布局\r\n-                marginBottom: '3%'\r\n-              }}> {/* 使用 Flexbox 布局 */}\r\n-\r\n-                <p style={{ fontSize: '60px' }}><FormattedMessage id=\"zeroSan\" /></p>\r\n-                <Image\r\n-                  alt=\"account\"\r\n-                  src=\"/resources/images/account.png\"\r\n-                  style={{ width: '30px', height: 'auto', marginLeft: '30px' }} // 设置图片宽度自适应\r\n-                  preview={false} // 禁用预览\r\n-                />\r\n-              </Content>\r\n-\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"communityIntro\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"collaboration\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"mission\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\r\n-              <p style={{ marginTop: '3%' }}>\r\n-                <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}><FormattedMessage id=\"twitter\" /></a>\r\n-                <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}><FormattedMessage id=\"telegram\" /></a>\r\n-              </p>\r\n-            </div>\r\n-          </Content>\r\n-          <Content style={{ width: \"30%\", display: 'flex', alignItems: 'center' }}>\r\n-            <Image\r\n-              alt=\"03-logo\"\r\n-              src=\"/resources/images/03-logo.png\"\r\n-              style={{ width: '400px', height: 'auto' }} // 设置图片宽度自适应\r\n-              preview={false} // 禁用预览\r\n-            />\r\n-          </Content>\r\n-        </div>\r\n-        <Footer style={{ textAlign: 'center', background: 'rgba(255, 255, 255, 0)', marginLeft: 80, marginTop: 80, padding: 0 }}>\r\n-          <Content style={{\r\n-            padding: 16,\r\n-            height: 55,\r\n-            width: '9%',\r\n-            background: 'rgba(128, 128, 128, 0.5)', // 设置透明的灰色背景\r\n-            borderRadius: '24px', // 设置圆角\r\n-            display: 'flex', // 使用 Flexbox 布局\r\n-            alignItems: 'center', // 垂直居中对齐\r\n-          }}> {/* 使用 Flexbox 布局 */}\r\n-            <Image\r\n-              alt=\"status-live\"\r\n-              src={stopMint ? \"/resources/images/status-live.png\" : \"/resources/images/status-stop.png\"} // 根据 StopMint 状态选择图片\r\n-              style={{ width: '25px', height: 'auto' }} // 设置图片宽度自适应\r\n-              preview={false} // 禁用预览\r\n-            />\r\n-            <p style={{ fontSize: '20px', marginLeft: '11%' }}><FormattedMessage id=\"presale\" /></p> {/* 添加右边距以增加间隔 */}\r\n-          </Content>\r\n-\r\n-          <div style={{ marginTop: '1%', display: 'flex', flex: 1, gap: '1%' }}> {/* 使用 Flexbox 布局 */}\r\n-            <Content\r\n-              style={{\r\n-                padding: 40,\r\n-                minHeight: 120,\r\n-                flex: '0 0 30%',\r\n-                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n-                borderRadius: '8px', // 设置圆角\r\n-              }}\r\n-            >\r\n-              <div style={{ textAlign: 'left', width: '100%' }}>\r\n-                <p style={{ fontSize: '16px', marginBottom: '5%' }}><FormattedMessage id=\"mintPrice\" /></p>\r\n-                <p style={{ fontSize: '24px', fontWeight: 'bold' }}><FormattedMessage id=\"mintPriceValue\" /></p>{/* 设置字体大小和加粗 */}\r\n-              </div>\r\n-            </Content>\r\n-            <Content\r\n-              style={{\r\n-                padding: 40,\r\n-                minHeight: 120,\r\n-                flex: '0 0 30%',\r\n-                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n-                borderRadius: '8px', // 设置圆角\r\n-                display: 'flex', // 使用 Flexbox 布局\r\n-                flexDirection: 'column', // 垂直排列\r\n-              }}\r\n-            >\r\n-              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n-                <div style={{ textAlign: 'left' }}>\r\n-                  <p style={{ fontSize: '16px', marginBottom: '12%' }} >\r\n-                    <FormattedMessage id=\"availability\" />\r\n-                    {/* {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)} */}\r\n-                  </p>\r\n-                  <p style={{ fontSize: '24px', fontWeight: 'bold' }} ><FormattedMessage id=\"presaleOnly\" /></p>\r\n-                </div>\r\n-                <ButtonList\r\n-                  guardList={guards}\r\n-                  candyMachine={candyMachine}\r\n-                  candyGuard={candyGuard}\r\n-                  umi={umi}\r\n-                  ownedTokens={ownedTokens}\r\n-                  setGuardList={setGuards}\r\n-                  mintsCreated={mintsCreated}\r\n-                  setMintsCreated={setMintsCreated}\r\n-                  onOpen={onShowNftOpen}\r\n-                  setCheckEligibility={setCheckEligibility}\r\n-                />\r\n-                {/* <Button\r\n-                  //onClick={canMint && disableMint ? onClick : null} // 当 canMint 为 true 且 disableMint 为 false 时，点击事件为 onClick\r\n-                  disabled={!canMint || !disableMint} // 根据 canMint 和 disableMint 设置按钮禁用状态\r\n-                  className={`mint-button ${!disableMint ? 'disabled' : ''}`} // 根据 disableMint 设置类名\r\n-                >\r\n-                  <FormattedMessage id={!disableMint ? 'notMint' : canMint ? 'mint' : 'minted'} />\r\n-                </Button> */}\r\n-              </div>\r\n-            </Content>\r\n-          </div >\r\n-        </Footer >\r\n-      </Layout >\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n-    <main>\r\n-      {/* <div className='wallet'>\r\n-        <WalletMultiButtonDynamic />\r\n-      </div> */}\r\n-      <PageContent key=\"content\" />\r\n-    </main>\r\n-  );\r\n-}\r\n-import {\r\n-  PublicKey,\r\n-  publicKey,\r\n-  Umi,\r\n-} from \"@metaplex-foundation/umi\";\r\n-import { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\r\n-import dynamic from \"next/dynamic\";\r\n-import { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\r\n-import { useUmi } from \"./utils/useUmi\";\r\n-import { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\"\r\n-import { guardChecker } from \"./utils/checkAllowed\";\r\n-//import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\r\n-import { Center, Skeleton, useDisclosure, ModalHeader, ModalOverlay, Box, Divider, useToast, VStack, Flex } from '@chakra-ui/react';\r\n-import { ButtonList } from \"./components/mintButton\";\r\n-import { GuardReturn } from \"./utils/checkerHelper\";\r\n-import { ShowNft } from \"./components/showNft\";\r\n-import { InitializeModal } from \"./components/initializeModal\";\r\n-import { image, headerText } from \"./settings\";\r\n-import { useSolanaTime } from \"./utils/SolanaTimeContext\";\r\n-import { Button, Card, Row, Col, Spin, Layout, Modal, Menu, Image } from 'antd';\r\n-import { FormattedMessage } from 'react-intl';\r\n-const { Header, Sider, Content, Footer } = Layout;\r\n-\r\n-const WalletMultiButtonDynamic = dynamic(\r\n-  async () =>\r\n-    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\r\n-  { ssr: false }\r\n-);\r\n-\r\n-const useCandyMachine = (\r\n-  umi: Umi,\r\n-  candyMachineId: string,\r\n-  checkEligibility: boolean,\r\n-  setCheckEligibility: Dispatch<SetStateAction<boolean>>,\r\n-  firstRun: boolean,\r\n-  setfirstRun: Dispatch<SetStateAction<boolean>>\r\n-) => {\r\n-  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n-  const [candyGuard, setCandyGuard] = useState<CandyGuard>();\r\n-  const toast = useToast();\r\n-\r\n-\r\n-  useEffect(() => {\r\n-    (async () => {\r\n-      if (checkEligibility) {\r\n-        if (!candyMachineId) {\r\n-          console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\");\r\n-          // if (!toast.isActive(\"no-cm\")) {\r\n-          //   toast({\r\n-          //     id: \"no-cm\",\r\n-          //     title: \"No candy machine in .env!\",\r\n-          //     description: \"Add your candy machine address to the .env file!\",\r\n-          //     status: \"error\",\r\n-          //     duration: 999999,\r\n-          //     isClosable: true,\r\n-          //   });\r\n-          // }\r\n-          return;\r\n-        }\r\n-\r\n-        let candyMachine;\r\n-        try {\r\n-          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\r\n-          //verify CM Version\r\n-          if (candyMachine.version != AccountVersion.V2) {\r\n-            console.error(\"Wrong candy machine account version!Please use latest sugar to create your candy machine. Need Account Version 2!\");\r\n-            // toast({\r\n-            //   id: \"wrong-account-version\",\r\n-            //   title: \"Wrong candy machine account version!\",\r\n-            //   description: \"Please use latest sugar to create your candy machine. Need Account Version 2!\",\r\n-            //   status: \"error\",\r\n-            //   duration: 999999,\r\n-            //   isClosable: true,\r\n-            // });\r\n-            return;\r\n-          }\r\n-        } catch (e) {\r\n-          console.error(\"The CM from .env is invalid!Are you using the correct environment?\" + e);\r\n-          // toast({\r\n-          //   id: \"no-cm-found\",\r\n-          //   title: \"The CM from .env is invalid\",\r\n-          //   description: \"Are you using the correct environment?\",\r\n-          //   status: \"error\",\r\n-          //   duration: 999999,\r\n-          //   isClosable: true,\r\n-          // });\r\n-        }\r\n-        setCandyMachine(candyMachine);\r\n-        if (!candyMachine) {\r\n-          return;\r\n-        }\r\n-        let candyGuard;\r\n-        try {\r\n-          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\r\n-        } catch (e) {\r\n-          console.error(\"No Candy Guard found!Do you have one assigned?\" + e);\r\n-          // toast({\r\n-          //   id: \"no-guard-found\",\r\n-          //   title: \"No Candy Guard found!\",\r\n-          //   description: \"Do you have one assigned?\",\r\n-          //   status: \"error\",\r\n-          //   duration: 999999,\r\n-          //   isClosable: true,\r\n-          // });\r\n-        }\r\n-        if (!candyGuard) {\r\n-          return;\r\n-        }\r\n-        setCandyGuard(candyGuard);\r\n-        if (firstRun) {\r\n-          setfirstRun(false)\r\n-        }\r\n-      }\r\n-    })();\r\n-  }, [umi, checkEligibility, candyMachineId, firstRun, setfirstRun, toast]);\r\n-\r\n-  return { candyMachine, candyGuard };\r\n-\r\n-\r\n-};\r\n-\r\n-\r\n-export default function Home() {\r\n-  const umi = useUmi();\r\n-  const solanaTime = useSolanaTime();\r\n-  const toast = useToast();\r\n-  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\r\n-  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\r\n-  const [mintsCreated, setMintsCreated] = useState<{ mint: PublicKey, offChainMetadata: JsonMetadata | undefined }[] | undefined>();\r\n-  const [isAllowed, setIsAllowed] = useState<boolean>(false);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [ownedTokens, setOwnedTokens] = useState<DigitalAssetWithToken[]>();\r\n-  const [guards, setGuards] = useState<GuardReturn[]>([\r\n-    { label: \"startDefault\", allowed: false, maxAmount: 0 },\r\n-  ]);\r\n-  const [firstRun, setFirstRun] = useState(true);\r\n-  const [checkEligibility, setCheckEligibility] = useState<boolean>(true);\r\n-  const [disableMint, setDisableMint] = useState(true);\r\n-  const [canMint, setCanMint] = useState(true);\r\n-  const [stopMint, setStopMint] = useState(true);\r\n-\r\n-  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n-    console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\")\r\n-    // if (!toast.isActive('no-cm')) {\r\n-    //   toast({\r\n-    //     id: 'no-cm',\r\n-    //     title: 'No candy machine in .env!',\r\n-    //     description: \"Add your candy machine address to the .env file!\",\r\n-    //     status: 'error',\r\n-    //     duration: 999999,\r\n-    //     isClosable: true,\r\n-    //   })\r\n-    // }\r\n-  }\r\n-  const candyMachineId: PublicKey = useMemo(() => {\r\n-    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n-      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\r\n-    } else {\r\n-      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!Add your candy machine address to the .env file!`);\r\n-      // toast({\r\n-      //   id: 'no-cm',\r\n-      //   title: 'No candy machine in .env!',\r\n-      //   description: \"Add your candy machine address to the .env file!\",\r\n-      //   status: 'error',\r\n-      //   duration: 999999,\r\n-      //   isClosable: true,\r\n-      // })\r\n-      return publicKey(\"11111111111111111111111111111111\");\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, []);\r\n-  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\r\n-\r\n-  useEffect(() => {\r\n-    const checkEligibilityFunc = async () => {\r\n-      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\r\n-        return;\r\n-      }\r\n-      setFirstRun(false);\r\n-\r\n-      const { guardReturn, ownedTokens } = await guardChecker(\r\n-        umi, candyGuard, candyMachine, solanaTime\r\n-      );\r\n-\r\n-      setOwnedTokens(ownedTokens);\r\n-      setGuards(guardReturn);\r\n-      setIsAllowed(false);\r\n-\r\n-      let allowed = false;\r\n-      for (const guard of guardReturn) {\r\n-        if (guard.allowed) {\r\n-          allowed = true;\r\n-          break;\r\n-        }\r\n-      }\r\n-\r\n-      setIsAllowed(allowed);\r\n-      setLoading(false);\r\n-    };\r\n-\r\n-    checkEligibilityFunc();\r\n-    // On purpose: not check for candyMachine, candyGuard, solanaTime\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [umi, checkEligibility, firstRun]);\r\n-\r\n-  const PageContent = () => {\r\n-    return (\r\n-      <Layout style={{ position: 'relative', background: 'rgba(255, 255, 255, 0)' }}>\r\n-        <Image\r\n-          alt=\"img\"\r\n-          src=\"/resources/images/mintback.png\" // 背景图路径\r\n-          preview={false} // 禁用预览\r\n-          style={{\r\n-            position: 'absolute',\r\n-            top: 0,\r\n-            left: 0,\r\n-            right: 0,\r\n-            bottom: 0,\r\n-            objectFit: 'cover', // 确保图片覆盖整个区域\r\n-            zIndex: -1 // 确保背景图在其他内容后面\r\n-          }}\r\n-        />\r\n-        <div style={{ marginTop: '6%', marginLeft: 80, padding: 0, display: 'flex', flex: 1, gap: '1%', alignItems: 'center' }}> {/* 使用 Flexbox 布局 */}\r\n-          <Content style={{ width: \"60%\" }}> {/* 设置为完全透明 */}\r\n-            <div style={{ fontSize: '20px', flex: '0 0 70%' }}>\r\n-              <Content style={{\r\n-                display: 'flex', // 使用 Flexbox 布局\r\n-                marginBottom: '3%'\r\n-              }}> {/* 使用 Flexbox 布局 */}\r\n-\r\n-                <p style={{ fontSize: '60px' }}><FormattedMessage id=\"zeroSan\" /></p>\r\n-                <Image\r\n-                  alt=\"account\"\r\n-                  src=\"/resources/images/account.png\"\r\n-                  style={{ width: '30px', height: 'auto', marginLeft: '30px' }} // 设置图片宽度自适应\r\n-                  preview={false} // 禁用预览\r\n-                />\r\n-              </Content>\r\n-\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"communityIntro\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"collaboration\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"mission\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\r\n-              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\r\n-              <p style={{ marginTop: '3%' }}>\r\n-                <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}><FormattedMessage id=\"twitter\" /></a>\r\n-                <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}><FormattedMessage id=\"telegram\" /></a>\r\n-              </p>\r\n-            </div>\r\n-          </Content>\r\n-          <Content style={{ width: \"30%\", display: 'flex', alignItems: 'center' }}>\r\n-            <Image\r\n-              alt=\"03-logo\"\r\n-              src=\"/resources/images/03-logo.png\"\r\n-              style={{ width: '400px', height: 'auto' }} // 设置图片宽度自适应\r\n-              preview={false} // 禁用预览\r\n-            />\r\n-          </Content>\r\n-        </div>\r\n-        <Footer style={{ textAlign: 'center', background: 'rgba(255, 255, 255, 0)', marginLeft: 80, marginTop: 80, padding: 0 }}>\r\n-          <Content style={{\r\n-            padding: 16,\r\n-            height: 55,\r\n-            width: '9%',\r\n-            background: 'rgba(128, 128, 128, 0.5)', // 设置透明的灰色背景\r\n-            borderRadius: '24px', // 设置圆角\r\n-            display: 'flex', // 使用 Flexbox 布局\r\n-            alignItems: 'center', // 垂直居中对齐\r\n-          }}> {/* 使用 Flexbox 布局 */}\r\n-            <Image\r\n-              alt=\"status-live\"\r\n-              src={stopMint ? \"/resources/images/status-live.png\" : \"/resources/images/status-stop.png\"} // 根据 StopMint 状态选择图片\r\n-              style={{ width: '25px', height: 'auto' }} // 设置图片宽度自适应\r\n-              preview={false} // 禁用预览\r\n-            />\r\n-            <p style={{ fontSize: '20px', marginLeft: '11%' }}><FormattedMessage id=\"presale\" /></p> {/* 添加右边距以增加间隔 */}\r\n-          </Content>\r\n-\r\n-          <div style={{ marginTop: '1%', display: 'flex', flex: 1, gap: '1%' }}> {/* 使用 Flexbox 布局 */}\r\n-            <Content\r\n-              style={{\r\n-                padding: 40,\r\n-                minHeight: 120,\r\n-                flex: '0 0 30%',\r\n-                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n-                borderRadius: '8px', // 设置圆角\r\n-              }}\r\n-            >\r\n-              <div style={{ textAlign: 'left', width: '100%' }}>\r\n-                <p style={{ fontSize: '16px', marginBottom: '5%' }}><FormattedMessage id=\"mintPrice\" /></p>\r\n-                <p style={{ fontSize: '24px', fontWeight: 'bold' }}><FormattedMessage id=\"mintPriceValue\" /></p>{/* 设置字体大小和加粗 */}\r\n-              </div>\r\n-            </Content>\r\n-            <Content\r\n-              style={{\r\n-                padding: 40,\r\n-                minHeight: 120,\r\n-                flex: '0 0 30%',\r\n-                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n-                borderRadius: '8px', // 设置圆角\r\n-                display: 'flex', // 使用 Flexbox 布局\r\n-                flexDirection: 'column', // 垂直排列\r\n-              }}\r\n-            >\r\n-              <ButtonList\r\n-                  guardList={guards}\r\n-                  candyMachine={candyMachine}\r\n-                  candyGuard={candyGuard}\r\n-                  umi={umi}\r\n-                  ownedTokens={ownedTokens}\r\n-                  setGuardList={setGuards}\r\n-                  mintsCreated={mintsCreated}\r\n-                  setMintsCreated={setMintsCreated}\r\n-                  onOpen={onShowNftOpen}\r\n-                  setCheckEligibility={setCheckEligibility}\r\n-                />\r\n-                \r\n-              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n-                <div style={{ textAlign: 'left' }}>\r\n-                  <p style={{ fontSize: '16px', marginBottom: '12%' }} >\r\n-                    <FormattedMessage id=\"availability\" />\r\n-                    {/* {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)} */}\r\n-                  </p>\r\n-                  <p style={{ fontSize: '24px', fontWeight: 'bold' }} ><FormattedMessage id=\"presaleOnly\" /></p>\r\n-                </div>\r\n-                \r\n-                {/* <Button\r\n-                  //onClick={canMint && disableMint ? onClick : null} // 当 canMint 为 true 且 disableMint 为 false 时，点击事件为 onClick\r\n-                  disabled={!canMint || !disableMint} // 根据 canMint 和 disableMint 设置按钮禁用状态\r\n-                  className={`mint-button ${!disableMint ? 'disabled' : ''}`} // 根据 disableMint 设置类名\r\n-                >\r\n-                  <FormattedMessage id={!disableMint ? 'notMint' : canMint ? 'mint' : 'minted'} />\r\n-                </Button> */}\r\n-              </div>\r\n-            </Content>\r\n-          </div >\r\n-        </Footer >\r\n-      </Layout >\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n-    <main>\r\n-      {/* <div className='wallet'>\r\n-        <WalletMultiButtonDynamic />\r\n-      </div> */}\r\n-      <PageContent key=\"content\" />\r\n-    </main>\r\n-  );\r\n-}\r\n"
                }
            ],
            "date": 1731334646253,
            "name": "Commit-0",
            "content": "import {\r\n  PublicKey,\r\n  publicKey,\r\n  Umi,\r\n} from \"@metaplex-foundation/umi\";\r\nimport { DigitalAssetWithToken, JsonMetadata } from \"@metaplex-foundation/mpl-token-metadata\";\r\nimport dynamic from \"next/dynamic\";\r\nimport { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\";\r\nimport { useUmi } from \"./utils/useUmi\";\r\nimport { fetchCandyMachine, safeFetchCandyGuard, CandyGuard, CandyMachine, AccountVersion } from \"@metaplex-foundation/mpl-candy-machine\"\r\nimport { guardChecker } from \"./utils/checkAllowed\";\r\n//import { Center, Card, CardHeader, CardBody, StackDivider, Heading, Stack, useToast, Text, Skeleton, useDisclosure, Button, Modal, ModalBody, ModalCloseButton, ModalContent, Image, ModalHeader, ModalOverlay, Box, Divider, VStack, Flex } from '@chakra-ui/react';\r\nimport { Center, Skeleton, useDisclosure, ModalHeader, ModalOverlay, Box, Divider, useToast, VStack, Flex } from '@chakra-ui/react';\r\nimport { ButtonList } from \"./components/mintButton\";\r\nimport { GuardReturn } from \"./utils/checkerHelper\";\r\nimport { ShowNft } from \"./components/showNft\";\r\nimport { InitializeModal } from \"./components/initializeModal\";\r\nimport { image, headerText } from \"./settings\";\r\nimport { useSolanaTime } from \"./utils/SolanaTimeContext\";\r\nimport { Button, Card, Row, Col, Spin, Layout, Modal, Menu, Image } from 'antd';\r\nimport { FormattedMessage } from 'react-intl';\r\nconst { Header, Sider, Content, Footer } = Layout;\r\n\r\nconst WalletMultiButtonDynamic = dynamic(\r\n  async () =>\r\n    (await import(\"@solana/wallet-adapter-react-ui\")).WalletMultiButton,\r\n  { ssr: false }\r\n);\r\n\r\nconst useCandyMachine = (\r\n  umi: Umi,\r\n  candyMachineId: string,\r\n  checkEligibility: boolean,\r\n  setCheckEligibility: Dispatch<SetStateAction<boolean>>,\r\n  firstRun: boolean,\r\n  setfirstRun: Dispatch<SetStateAction<boolean>>\r\n) => {\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n  const [candyGuard, setCandyGuard] = useState<CandyGuard>();\r\n  const toast = useToast();\r\n\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (checkEligibility) {\r\n        if (!candyMachineId) {\r\n          console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\");\r\n          // if (!toast.isActive(\"no-cm\")) {\r\n          //   toast({\r\n          //     id: \"no-cm\",\r\n          //     title: \"No candy machine in .env!\",\r\n          //     description: \"Add your candy machine address to the .env file!\",\r\n          //     status: \"error\",\r\n          //     duration: 999999,\r\n          //     isClosable: true,\r\n          //   });\r\n          // }\r\n          return;\r\n        }\r\n\r\n        let candyMachine;\r\n        try {\r\n          candyMachine = await fetchCandyMachine(umi, publicKey(candyMachineId));\r\n          //verify CM Version\r\n          if (candyMachine.version != AccountVersion.V2) {\r\n            console.error(\"Wrong candy machine account version!Please use latest sugar to create your candy machine. Need Account Version 2!\");\r\n            // toast({\r\n            //   id: \"wrong-account-version\",\r\n            //   title: \"Wrong candy machine account version!\",\r\n            //   description: \"Please use latest sugar to create your candy machine. Need Account Version 2!\",\r\n            //   status: \"error\",\r\n            //   duration: 999999,\r\n            //   isClosable: true,\r\n            // });\r\n            return;\r\n          }\r\n        } catch (e) {\r\n          console.error(\"The CM from .env is invalid!Are you using the correct environment?\" + e);\r\n          // toast({\r\n          //   id: \"no-cm-found\",\r\n          //   title: \"The CM from .env is invalid\",\r\n          //   description: \"Are you using the correct environment?\",\r\n          //   status: \"error\",\r\n          //   duration: 999999,\r\n          //   isClosable: true,\r\n          // });\r\n        }\r\n        setCandyMachine(candyMachine);\r\n        if (!candyMachine) {\r\n          return;\r\n        }\r\n        let candyGuard;\r\n        try {\r\n          candyGuard = await safeFetchCandyGuard(umi, candyMachine.mintAuthority);\r\n        } catch (e) {\r\n          console.error(\"No Candy Guard found!Do you have one assigned?\" + e);\r\n          // toast({\r\n          //   id: \"no-guard-found\",\r\n          //   title: \"No Candy Guard found!\",\r\n          //   description: \"Do you have one assigned?\",\r\n          //   status: \"error\",\r\n          //   duration: 999999,\r\n          //   isClosable: true,\r\n          // });\r\n        }\r\n        if (!candyGuard) {\r\n          return;\r\n        }\r\n        setCandyGuard(candyGuard);\r\n        if (firstRun) {\r\n          setfirstRun(false)\r\n        }\r\n      }\r\n    })();\r\n  }, [umi, checkEligibility, candyMachineId, firstRun, setfirstRun, toast]);\r\n\r\n  return { candyMachine, candyGuard };\r\n\r\n\r\n};\r\n\r\n\r\nexport default function Home() {\r\n  const umi = useUmi();\r\n  const solanaTime = useSolanaTime();\r\n  const toast = useToast();\r\n  const { isOpen: isShowNftOpen, onOpen: onShowNftOpen, onClose: onShowNftClose } = useDisclosure();\r\n  const { isOpen: isInitializerOpen, onOpen: onInitializerOpen, onClose: onInitializerClose } = useDisclosure();\r\n  const [mintsCreated, setMintsCreated] = useState<{ mint: PublicKey, offChainMetadata: JsonMetadata | undefined }[] | undefined>();\r\n  const [isAllowed, setIsAllowed] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [ownedTokens, setOwnedTokens] = useState<DigitalAssetWithToken[]>();\r\n  const [guards, setGuards] = useState<GuardReturn[]>([\r\n    { label: \"startDefault\", allowed: false, maxAmount: 0 },\r\n  ]);\r\n  const [firstRun, setFirstRun] = useState(true);\r\n  const [checkEligibility, setCheckEligibility] = useState<boolean>(true);\r\n  const [disableMint, setDisableMint] = useState(true);\r\n  const [canMint, setCanMint] = useState(true);\r\n  const [stopMint, setStopMint] = useState(true);\r\n\r\n  if (!process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n    console.error(\"No candy machine in .env!Add your candy machine address to the .env file!\")\r\n    // if (!toast.isActive('no-cm')) {\r\n    //   toast({\r\n    //     id: 'no-cm',\r\n    //     title: 'No candy machine in .env!',\r\n    //     description: \"Add your candy machine address to the .env file!\",\r\n    //     status: 'error',\r\n    //     duration: 999999,\r\n    //     isClosable: true,\r\n    //   })\r\n    // }\r\n  }\r\n  const candyMachineId: PublicKey = useMemo(() => {\r\n    if (process.env.NEXT_PUBLIC_CANDY_MACHINE_ID) {\r\n      return publicKey(process.env.NEXT_PUBLIC_CANDY_MACHINE_ID);\r\n    } else {\r\n      console.error(`NO CANDY MACHINE IN .env FILE DEFINED!Add your candy machine address to the .env file!`);\r\n      // toast({\r\n      //   id: 'no-cm',\r\n      //   title: 'No candy machine in .env!',\r\n      //   description: \"Add your candy machine address to the .env file!\",\r\n      //   status: 'error',\r\n      //   duration: 999999,\r\n      //   isClosable: true,\r\n      // })\r\n      return publicKey(\"11111111111111111111111111111111\");\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  const { candyMachine, candyGuard } = useCandyMachine(umi, candyMachineId, checkEligibility, setCheckEligibility, firstRun, setFirstRun);\r\n\r\n  useEffect(() => {\r\n    const checkEligibilityFunc = async () => {\r\n      if (!candyMachine || !candyGuard || !checkEligibility || isShowNftOpen) {\r\n        return;\r\n      }\r\n      setFirstRun(false);\r\n\r\n      const { guardReturn, ownedTokens } = await guardChecker(\r\n        umi, candyGuard, candyMachine, solanaTime\r\n      );\r\n\r\n      setOwnedTokens(ownedTokens);\r\n      setGuards(guardReturn);\r\n      setIsAllowed(false);\r\n\r\n      let allowed = false;\r\n      for (const guard of guardReturn) {\r\n        if (guard.allowed) {\r\n          allowed = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      setIsAllowed(allowed);\r\n      setLoading(false);\r\n    };\r\n\r\n    checkEligibilityFunc();\r\n    // On purpose: not check for candyMachine, candyGuard, solanaTime\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [umi, checkEligibility, firstRun]);\r\n\r\n  const PageContent = () => {\r\n    return (\r\n      <Layout style={{ position: 'relative', background: 'rgba(255, 255, 255, 0)' }}>\r\n        <Image\r\n          alt=\"img\"\r\n          src=\"/resources/images/mintback.png\" // 背景图路径\r\n          preview={false} // 禁用预览\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            objectFit: 'cover', // 确保图片覆盖整个区域\r\n            zIndex: -1 // 确保背景图在其他内容后面\r\n          }}\r\n        />\r\n        <div style={{ marginTop: '6%', marginLeft: 80, padding: 0, display: 'flex', flex: 1, gap: '1%', alignItems: 'center' }}> {/* 使用 Flexbox 布局 */}\r\n          <Content style={{ width: \"60%\" }}> {/* 设置为完全透明 */}\r\n            <div style={{ fontSize: '20px', flex: '0 0 70%' }}>\r\n              <Content style={{\r\n                display: 'flex', // 使用 Flexbox 布局\r\n                marginBottom: '3%'\r\n              }}> {/* 使用 Flexbox 布局 */}\r\n\r\n                <p style={{ fontSize: '60px' }}><FormattedMessage id=\"zeroSan\" /></p>\r\n                <Image\r\n                  alt=\"account\"\r\n                  src=\"/resources/images/account.png\"\r\n                  style={{ width: '30px', height: 'auto', marginLeft: '30px' }} // 设置图片宽度自适应\r\n                  preview={false} // 禁用预览\r\n                />\r\n              </Content>\r\n\r\n              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"communityIntro\" /></p>\r\n              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"collaboration\" /></p>\r\n              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"mission\" /></p>\r\n              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement1\" /></p>\r\n              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"missionStatement2\" /></p>\r\n              <p style={{ marginBottom: '1%' }}><FormattedMessage id=\"identity\" /></p>\r\n              <p style={{ marginTop: '3%' }}>\r\n                <a href=\"https://x.com/LINGSAN03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline', marginRight: '1%' }}><FormattedMessage id=\"twitter\" /></a>\r\n                <a href=\"https://t.me/LINGSAN_03\" target=\"_blank\" rel=\"noreferrer\" style={{ color: '#1890ff', textDecoration: 'underline' }}><FormattedMessage id=\"telegram\" /></a>\r\n              </p>\r\n            </div>\r\n          </Content>\r\n          <Content style={{ width: \"30%\", display: 'flex', alignItems: 'center' }}>\r\n            <Image\r\n              alt=\"03-logo\"\r\n              src=\"/resources/images/03-logo.png\"\r\n              style={{ width: '400px', height: 'auto' }} // 设置图片宽度自适应\r\n              preview={false} // 禁用预览\r\n            />\r\n          </Content>\r\n        </div>\r\n        <Footer style={{ textAlign: 'center', background: 'rgba(255, 255, 255, 0)', marginLeft: 80, marginTop: 80, padding: 0 }}>\r\n          <Content style={{\r\n            padding: 16,\r\n            height: 55,\r\n            width: '9%',\r\n            background: 'rgba(128, 128, 128, 0.5)', // 设置透明的灰色背景\r\n            borderRadius: '24px', // 设置圆角\r\n            display: 'flex', // 使用 Flexbox 布局\r\n            alignItems: 'center', // 垂直居中对齐\r\n          }}> {/* 使用 Flexbox 布局 */}\r\n            <Image\r\n              alt=\"status-live\"\r\n              src={stopMint ? \"/resources/images/status-live.png\" : \"/resources/images/status-stop.png\"} // 根据 StopMint 状态选择图片\r\n              style={{ width: '25px', height: 'auto' }} // 设置图片宽度自适应\r\n              preview={false} // 禁用预览\r\n            />\r\n            <p style={{ fontSize: '20px', marginLeft: '11%' }}><FormattedMessage id=\"presale\" /></p> {/* 添加右边距以增加间隔 */}\r\n          </Content>\r\n\r\n          <div style={{ marginTop: '1%', display: 'flex', flex: 1, gap: '1%' }}> {/* 使用 Flexbox 布局 */}\r\n            <Content\r\n              style={{\r\n                padding: 40,\r\n                minHeight: 120,\r\n                flex: '0 0 30%',\r\n                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n                borderRadius: '8px', // 设置圆角\r\n              }}\r\n            >\r\n              <div style={{ textAlign: 'left', width: '100%' }}>\r\n                <p style={{ fontSize: '16px', marginBottom: '5%' }}><FormattedMessage id=\"mintPrice\" /></p>\r\n                <p style={{ fontSize: '24px', fontWeight: 'bold' }}><FormattedMessage id=\"mintPriceValue\" /></p>{/* 设置字体大小和加粗 */}\r\n              </div>\r\n            </Content>\r\n            <Content\r\n              style={{\r\n                padding: 40,\r\n                minHeight: 120,\r\n                flex: '0 0 30%',\r\n                background: 'rgba(128, 128, 128, 0.3)', // 设置透明的灰色背景\r\n                borderRadius: '8px', // 设置圆角\r\n                display: 'flex', // 使用 Flexbox 布局\r\n                flexDirection: 'column', // 垂直排列\r\n              }}\r\n            >\r\n              <ButtonList\r\n                  guardList={guards}\r\n                  candyMachine={candyMachine}\r\n                  candyGuard={candyGuard}\r\n                  umi={umi}\r\n                  ownedTokens={ownedTokens}\r\n                  setGuardList={setGuards}\r\n                  mintsCreated={mintsCreated}\r\n                  setMintsCreated={setMintsCreated}\r\n                  onOpen={onShowNftOpen}\r\n                  setCheckEligibility={setCheckEligibility}\r\n                />\r\n                \r\n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n                <div style={{ textAlign: 'left' }}>\r\n                  <p style={{ fontSize: '16px', marginBottom: '12%' }} >\r\n                    <FormattedMessage id=\"availability\" />\r\n                    {/* {Number(candyMachine?.data.itemsAvailable) - Number(candyMachine?.itemsRedeemed)}/{Number(candyMachine?.data.itemsAvailable)} */}\r\n                  </p>\r\n                  <p style={{ fontSize: '24px', fontWeight: 'bold' }} ><FormattedMessage id=\"presaleOnly\" /></p>\r\n                </div>\r\n                \r\n                {/* <Button\r\n                  //onClick={canMint && disableMint ? onClick : null} // 当 canMint 为 true 且 disableMint 为 false 时，点击事件为 onClick\r\n                  disabled={!canMint || !disableMint} // 根据 canMint 和 disableMint 设置按钮禁用状态\r\n                  className={`mint-button ${!disableMint ? 'disabled' : ''}`} // 根据 disableMint 设置类名\r\n                >\r\n                  <FormattedMessage id={!disableMint ? 'notMint' : canMint ? 'mint' : 'minted'} />\r\n                </Button> */}\r\n              </div>\r\n            </Content>\r\n          </div >\r\n        </Footer >\r\n      </Layout >\r\n    );\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      {/* <div className='wallet'>\r\n        <WalletMultiButtonDynamic />\r\n      </div> */}\r\n      <PageContent key=\"content\" />\r\n    </main>\r\n  );\r\n}\r\n"
        }
    ]
}