{
    "sourceFile": "pages/MouseParallax.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1731242775991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731242810711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     }, [handleMouseMove]);\n \n     return (\n         <MouseParallaxContext.Provider value={springProps}>\n-            <div style={{ overflow: 'hidden', position: 'relative', width: '100vw', height: '100vh' }}>\n+            <div style={{ overflow: 'hidden', position: 'relative', width: '110vw', height: '100vh' }}>\n                 {children}\n             </div>\n         </MouseParallaxContext.Provider>\n     );\n"
                },
                {
                    "date": 1731242937611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,11 +55,22 @@\n             style={{\n                 backgroundSize: 'cover',\n                 width: '100%',\n                 height: '100%',\n-                position: 'absolute',\n-                ...style,\n-                ...trail[index], // 使用 trail 的样式\n+                // position: 'absolute',\n+                // ...style,\n+                // ...trail[index], // 使用 trail 的样式\n+\n+                backgroundImage: 'url($(src})',\n+backgroundsize:'100%100%',\n+width: '105%',\n+height:'108%',\n+position:'absolute',\n+marginLeft:'-5%',\n+left:'0',\n+top: '-5%')\n+...style,\n+...trail[index], //使用trail的样式\n             }}\n         >\n             <Image\n                 src={src}\n"
                },
                {
                    "date": 1731242960094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,17 +60,17 @@\n                 // ...style,\n                 // ...trail[index], // 使用 trail 的样式\n \n                 backgroundImage: 'url($(src})',\n-backgroundsize:'100%100%',\n-width: '105%',\n-height:'108%',\n-position:'absolute',\n-marginLeft:'-5%',\n-left:'0',\n-top: '-5%')\n-...style,\n-...trail[index], //使用trail的样式\n+                backgroundsize:'100%100%',\n+                width: '105%',\n+                height:'108%',\n+                position:'absolute',\n+                marginLeft:'-5%',\n+                left:'0',\n+                top: '-5%',\n+                ...style,\n+                ...trail[index], //使用trail的样式\n             }}\n         >\n             <Image\n                 src={src}\n"
                },
                {
                    "date": 1731242984789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+import React, { useState, useEffect, useCallback, createContext, useContext } from 'react';\n+import { animated, useSpring, useTrail } from 'react-spring';\n+import { Image } from 'antd';\n+\n+const MouseParallaxContext = createContext();\n+\n+const MouseParallaxProvider = ({ children }) => {\n+    const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\n+    const [springProps, api] = useSpring(() => ({ x: 0, y: 0 }));\n+\n+    const handleMouseMove = useCallback((e) => {\n+        const { clientX, clientY } = e;\n+        setMousePos({ x: clientX, y: clientY });\n+        api.start({\n+           // x: (clientX - window.innerWidth / 2) / 5, // 减小分母以增加移动距离\n+           // y: (clientY - window.innerHeight / 2) / 5, // 减小分母以增加移动距离\n+           // config: { tension: 200, friction: 30 }, // 调整弹簧配置\n+\n+           x: (clientX - window.innerWidth / 2) / 1, // 减小分母以增加移动距离\n+           y: (clientY - window.innerHeight / 2) / 1, // 减小分母以增加移动距离\n+           config: { tension: 500, friction: 10 }, // 调整弹簧配置\n+        });\n+    }, [api]);\n+\n+    useEffect(() => {\n+        window.addEventListener('mousemove', handleMouseMove);\n+        return () => {\n+            window.removeEventListener('mousemove', handleMouseMove);\n+        };\n+    }, [handleMouseMove]);\n+\n+    return (\n+        <MouseParallaxContext.Provider value={springProps}>\n+            <div style={{ overflow: 'hidden', position: 'relative', width: '110vw', height: '100vh' }}>\n+                {children}\n+            </div>\n+        </MouseParallaxContext.Provider>\n+    );\n+};\n+\n+const ParallaxImage = ({ src, style, index, onLoadComplete }) => {\n+    const springProps = useContext(MouseParallaxContext);\n+\n+    // 设置速度因子\n+    const speedFactor = index < 5 ? 10 : 20; // 减小速度因子以增加移动速度\n+\n+    const trail = useTrail(4, {\n+        opacity: springProps.x.to(x => (x ? 1 : 0)),\n+        transform: springProps.x.to(x => `translateX(${x / speedFactor}px)`), // 根据速度因子调整移动速度\n+        config: { tension: 300, friction: 60 }, // 调整弹簧配置\n+    });\n+\n+    return (\n+        <animated.div\n+            style={{\n+                backgroundSize: 'cover',\n+                width: '100%',\n+                height: '100%',\n+                // position: 'absolute',\n+                // ...style,\n+                // ...trail[index], // 使用 trail 的样式\n+\n+                backgroundImage: 'url($(src})',\n+                backgroundsize:'100%100%',\n+                width: '105%',\n+                height:'108%',\n+                position:'absolute',\n+                marginLeft:'-5%',\n+                left:'0',\n+                top: '-5%',\n+                ...style,\n+                ...trail[index], //使用trail的样式\n+            }}\n+        >\n+            {/* <Image */}\n+                src={src}\n+                preview={false}\n+                alt={`Parallax ${index}`}\n+                style={{ width: '100%', height: '100%', objectFit: 'cover' }} // 确保图像覆盖整个区域\n+                onLoad={onLoadComplete} // 监听加载完成事件\n+                onError={() => console.error(`Failed to load image: ${src}`)} // 处理加载错误\n+            {/* /> */}\n+        </animated.div>\n+    );\n+};\n+\n+const MouseParallax = ({ onLoadComplete }) => {\n+    const images = [\n+        \"/resources/images/home/1.png\",\n+        \"/resources/images/home/2.png\",\n+        \"/resources/images/home/3.png\",\n+        \"/resources/images/home/4.png\"\n+    ];\n+\n+    const [loadedImages, setLoadedImages] = useState(0);\n+\n+    const handleImageLoad = () => {\n+        setLoadedImages(prev => prev + 1);\n+    };\n+\n+    useEffect(() => {\n+        if (loadedImages === images.length) {\n+            onLoadComplete(); // 所有图像加载完成时调用回调\n+        }\n+    }, [loadedImages, images.length, onLoadComplete]);\n+\n+    return (\n+        <MouseParallaxProvider>\n+            {images.map((src, index) => (\n+                <ParallaxImage key={index} src={src} style={{ zIndex: index + 1 }} index={index} onLoadComplete={handleImageLoad} />\n+            ))}\n+        </MouseParallaxProvider>\n+    );\n+};\n+\n+export default MouseParallax;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731243098544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+import React, { useState, useEffect, useCallback, createContext, useContext } from 'react';\n+import { animated, useSpring, useTrail } from 'react-spring';\n+import { Image } from 'antd';\n+\n+const MouseParallaxContext = createContext();\n+\n+const MouseParallaxProvider = ({ children }) => {\n+    const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\n+    const [springProps, api] = useSpring(() => ({ x: 0, y: 0 }));\n+\n+    const handleMouseMove = useCallback((e) => {\n+        const { clientX, clientY } = e;\n+        setMousePos({ x: clientX, y: clientY });\n+        api.start({\n+           // x: (clientX - window.innerWidth / 2) / 5, // 减小分母以增加移动距离\n+           // y: (clientY - window.innerHeight / 2) / 5, // 减小分母以增加移动距离\n+           // config: { tension: 200, friction: 30 }, // 调整弹簧配置\n+\n+           x: (clientX - window.innerWidth / 2) / 1, // 减小分母以增加移动距离\n+           y: (clientY - window.innerHeight / 2) / 1, // 减小分母以增加移动距离\n+           config: { tension: 500, friction: 10 }, // 调整弹簧配置\n+        });\n+    }, [api]);\n+\n+    useEffect(() => {\n+        window.addEventListener('mousemove', handleMouseMove);\n+        return () => {\n+            window.removeEventListener('mousemove', handleMouseMove);\n+        };\n+    }, [handleMouseMove]);\n+\n+    return (\n+        <MouseParallaxContext.Provider value={springProps}>\n+            <div style={{ overflow: 'hidden', position: 'relative', width: '110vw', height: '100vh' }}>\n+                {children}\n+            </div>\n+        </MouseParallaxContext.Provider>\n+    );\n+};\n+\n+const ParallaxImage = ({ src, style, index, onLoadComplete }) => {\n+    const springProps = useContext(MouseParallaxContext);\n+\n+    // 设置速度因子\n+    const speedFactor = index < 5 ? 10 : 20; // 减小速度因子以增加移动速度\n+\n+    const trail = useTrail(4, {\n+        opacity: springProps.x.to(x => (x ? 1 : 0)),\n+        transform: springProps.x.to(x => `translateX(${x / speedFactor}px)`), // 根据速度因子调整移动速度\n+        config: { tension: 300, friction: 60 }, // 调整弹簧配置\n+    });\n+\n+    return (\n+        <animated.div\n+            style={{\n+                backgroundSize: 'cover',\n+                width: '100%',\n+                height: '100%',\n+                // position: 'absolute',\n+                // ...style,\n+                // ...trail[index], // 使用 trail 的样式\n+\n+                backgroundImage: 'url($(src})',\n+                backgroundsize:'100%100%',\n+                width: '105%',\n+                height:'108%',\n+                position:'absolute',\n+                marginLeft:'-5%',\n+                left:'0',\n+                top: '-5%',\n+                ...style,\n+                ...trail[index], //使用trail的样式\n+            }}\n+        >\n+            <Image\n+                src={src}\n+                preview={false}\n+                alt={`Parallax ${index}`}\n+                style={{ width: '100%', height: '100%', objectFit: 'cover' }} // 确保图像覆盖整个区域\n+                onLoad={onLoadComplete} // 监听加载完成事件\n+                onError={() => console.error(`Failed to load image: ${src}`)} // 处理加载错误\n+            />\n+        </animated.div>\n+    );\n+};\n+\n+const MouseParallax = ({ onLoadComplete }) => {\n+    const images = [\n+        \"/resources/images/home/1.png\",\n+        \"/resources/images/home/2.png\",\n+        \"/resources/images/home/3.png\",\n+        \"/resources/images/home/4.png\"\n+    ];\n+\n+    const [loadedImages, setLoadedImages] = useState(0);\n+\n+    const handleImageLoad = () => {\n+        setLoadedImages(prev => prev + 1);\n+    };\n+\n+    useEffect(() => {\n+        if (loadedImages === images.length) {\n+            onLoadComplete(); // 所有图像加载完成时调用回调\n+        }\n+    }, [loadedImages, images.length, onLoadComplete]);\n+\n+    return (\n+        <MouseParallaxProvider>\n+            {images.map((src, index) => (\n+                <ParallaxImage key={index} src={src} style={{ zIndex: index + 1 }} index={index} onLoadComplete={handleImageLoad} />\n+            ))}\n+        </MouseParallaxProvider>\n+    );\n+};\n+\n+export default MouseParallax;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731252054369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useEffect, useCallback, createContext, useContext } from 'react';\n-import { animated, useSpring, useTrail } from 'react-spring';\n+import { animated, useSpring } from 'react-spring';\n import { Image } from 'antd';\n \n const MouseParallaxContext = createContext();\n \n@@ -11,15 +11,11 @@\n     const handleMouseMove = useCallback((e) => {\n         const { clientX, clientY } = e;\n         setMousePos({ x: clientX, y: clientY });\n         api.start({\n-           // x: (clientX - window.innerWidth / 2) / 5, // 减小分母以增加移动距离\n-           // y: (clientY - window.innerHeight / 2) / 5, // 减小分母以增加移动距离\n-           // config: { tension: 200, friction: 30 }, // 调整弹簧配置\n-\n-           x: (clientX - window.innerWidth / 2) / 1, // 减小分母以增加移动距离\n-           y: (clientY - window.innerHeight / 2) / 1, // 减小分母以增加移动距离\n-           config: { tension: 500, friction: 10 }, // 调整弹簧配置\n+            x: (clientX - window.innerWidth / 2) / 5, // X 轴移动\n+            y: (clientY - window.innerHeight / 2) / 5, // Y 轴移动\n+            config: { tension: 500, friction: 10 }, // 调整弹簧配置\n         });\n     }, [api]);\n \n     useEffect(() => {\n@@ -30,319 +26,53 @@\n     }, [handleMouseMove]);\n \n     return (\n         <MouseParallaxContext.Provider value={springProps}>\n-            <div style={{ overflow: 'hidden', position: 'relative', width: '110vw', height: '100vh' }}>\n+            <div style={{ overflow: 'hidden', position: 'relative', width: '100vw', height: '100vh' }}>\n                 {children}\n             </div>\n         </MouseParallaxContext.Provider>\n     );\n };\n \n-const ParallaxImage = ({ src, style, index, onLoadComplete }) => {\n+const ParallaxImage = ({ src, index }) => {\n     const springProps = useContext(MouseParallaxContext);\n \n-    // 设置速度因子\n-    const speedFactor = index < 5 ? 10 : 20; // 减小速度因子以增加移动速度\n-\n-    const trail = useTrail(4, {\n-        opacity: springProps.x.to(x => (x ? 1 : 0)),\n-        transform: springProps.x.to(x => `translateX(${x / speedFactor}px)`), // 根据速度因子调整移动速度\n-        config: { tension: 300, friction: 60 }, // 调整弹簧配置\n-    });\n-\n     return (\n         <animated.div\n             style={{\n                 backgroundSize: 'cover',\n                 width: '100%',\n                 height: '100%',\n-                // position: 'absolute',\n-                // ...style,\n-                // ...trail[index], // 使用 trail 的样式\n-\n-                backgroundImage: 'url($(src})',\n-                backgroundsize:'100%100%',\n-                width: '105%',\n-                height:'108%',\n-                position:'absolute',\n-                marginLeft:'-5%',\n-                left:'0',\n-                top: '-5%',\n-                ...style,\n-                ...trail[index], //使用trail的样式\n+                backgroundImage: `url(${src})`,\n+                position: 'absolute',\n+                transform: springProps.x.to(x => `translateX(${x}px)`) + springProps.y.to(y => `translateY(${y}px)`), // 应用 Y 轴移动\n             }}\n         >\n             <Image\n                 src={src}\n                 preview={false}\n                 alt={`Parallax ${index}`}\n-                style={{ width: '100%', height: '100%', objectFit: 'cover' }} // 确保图像覆盖整个区域\n-                onLoad={onLoadComplete} // 监听加载完成事件\n-                onError={() => console.error(`Failed to load image: ${src}`)} // 处理加载错误\n+                style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n             />\n         </animated.div>\n     );\n };\n \n-const MouseParallax = ({ onLoadComplete }) => {\n+const MouseParallax = () => {\n     const images = [\n         \"/resources/images/home/1.png\",\n         \"/resources/images/home/2.png\",\n         \"/resources/images/home/3.png\",\n         \"/resources/images/home/4.png\"\n     ];\n \n-    const [loadedImages, setLoadedImages] = useState(0);\n-\n-    const handleImageLoad = () => {\n-        setLoadedImages(prev => prev + 1);\n-    };\n-\n-    useEffect(() => {\n-        if (loadedImages === images.length) {\n-            onLoadComplete(); // 所有图像加载完成时调用回调\n-        }\n-    }, [loadedImages, images.length, onLoadComplete]);\n-\n     return (\n         <MouseParallaxProvider>\n             {images.map((src, index) => (\n-                <ParallaxImage key={index} src={src} style={{ zIndex: index + 1 }} index={index} onLoadComplete={handleImageLoad} />\n+                <ParallaxImage key={index} src={src} index={index} />\n             ))}\n         </MouseParallaxProvider>\n     );\n };\n \n-export default MouseParallax;\n-import React, { useState, useEffect, useCallback, createContext, useContext } from 'react';\n-import { animated, useSpring, useTrail } from 'react-spring';\n-import { Image } from 'antd';\n-\n-const MouseParallaxContext = createContext();\n-\n-const MouseParallaxProvider = ({ children }) => {\n-    const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\n-    const [springProps, api] = useSpring(() => ({ x: 0, y: 0 }));\n-\n-    const handleMouseMove = useCallback((e) => {\n-        const { clientX, clientY } = e;\n-        setMousePos({ x: clientX, y: clientY });\n-        api.start({\n-           // x: (clientX - window.innerWidth / 2) / 5, // 减小分母以增加移动距离\n-           // y: (clientY - window.innerHeight / 2) / 5, // 减小分母以增加移动距离\n-           // config: { tension: 200, friction: 30 }, // 调整弹簧配置\n-\n-           x: (clientX - window.innerWidth / 2) / 1, // 减小分母以增加移动距离\n-           y: (clientY - window.innerHeight / 2) / 1, // 减小分母以增加移动距离\n-           config: { tension: 500, friction: 10 }, // 调整弹簧配置\n-        });\n-    }, [api]);\n-\n-    useEffect(() => {\n-        window.addEventListener('mousemove', handleMouseMove);\n-        return () => {\n-            window.removeEventListener('mousemove', handleMouseMove);\n-        };\n-    }, [handleMouseMove]);\n-\n-    return (\n-        <MouseParallaxContext.Provider value={springProps}>\n-            <div style={{ overflow: 'hidden', position: 'relative', width: '110vw', height: '100vh' }}>\n-                {children}\n-            </div>\n-        </MouseParallaxContext.Provider>\n-    );\n-};\n-\n-const ParallaxImage = ({ src, style, index, onLoadComplete }) => {\n-    const springProps = useContext(MouseParallaxContext);\n-\n-    // 设置速度因子\n-    const speedFactor = index < 5 ? 10 : 20; // 减小速度因子以增加移动速度\n-\n-    const trail = useTrail(4, {\n-        opacity: springProps.x.to(x => (x ? 1 : 0)),\n-        transform: springProps.x.to(x => `translateX(${x / speedFactor}px)`), // 根据速度因子调整移动速度\n-        config: { tension: 300, friction: 60 }, // 调整弹簧配置\n-    });\n-\n-    return (\n-        <animated.div\n-            style={{\n-                backgroundSize: 'cover',\n-                width: '100%',\n-                height: '100%',\n-                // position: 'absolute',\n-                // ...style,\n-                // ...trail[index], // 使用 trail 的样式\n-\n-                backgroundImage: 'url($(src})',\n-                backgroundsize:'100%100%',\n-                width: '105%',\n-                height:'108%',\n-                position:'absolute',\n-                marginLeft:'-5%',\n-                left:'0',\n-                top: '-5%',\n-                ...style,\n-                ...trail[index], //使用trail的样式\n-            }}\n-        >\n-            {/* <Image */}\n-                src={src}\n-                preview={false}\n-                alt={`Parallax ${index}`}\n-                style={{ width: '100%', height: '100%', objectFit: 'cover' }} // 确保图像覆盖整个区域\n-                onLoad={onLoadComplete} // 监听加载完成事件\n-                onError={() => console.error(`Failed to load image: ${src}`)} // 处理加载错误\n-            {/* /> */}\n-        </animated.div>\n-    );\n-};\n-\n-const MouseParallax = ({ onLoadComplete }) => {\n-    const images = [\n-        \"/resources/images/home/1.png\",\n-        \"/resources/images/home/2.png\",\n-        \"/resources/images/home/3.png\",\n-        \"/resources/images/home/4.png\"\n-    ];\n-\n-    const [loadedImages, setLoadedImages] = useState(0);\n-\n-    const handleImageLoad = () => {\n-        setLoadedImages(prev => prev + 1);\n-    };\n-\n-    useEffect(() => {\n-        if (loadedImages === images.length) {\n-            onLoadComplete(); // 所有图像加载完成时调用回调\n-        }\n-    }, [loadedImages, images.length, onLoadComplete]);\n-\n-    return (\n-        <MouseParallaxProvider>\n-            {images.map((src, index) => (\n-                <ParallaxImage key={index} src={src} style={{ zIndex: index + 1 }} index={index} onLoadComplete={handleImageLoad} />\n-            ))}\n-        </MouseParallaxProvider>\n-    );\n-};\n-\n-export default MouseParallax;\n-import React, { useState, useEffect, useCallback, createContext, useContext } from 'react';\n-import { animated, useSpring, useTrail } from 'react-spring';\n-import { Image } from 'antd';\n-\n-const MouseParallaxContext = createContext();\n-\n-const MouseParallaxProvider = ({ children }) => {\n-    const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\n-    const [springProps, api] = useSpring(() => ({ x: 0, y: 0 }));\n-\n-    const handleMouseMove = useCallback((e) => {\n-        const { clientX, clientY } = e;\n-        setMousePos({ x: clientX, y: clientY });\n-        api.start({\n-           // x: (clientX - window.innerWidth / 2) / 5, // 减小分母以增加移动距离\n-           // y: (clientY - window.innerHeight / 2) / 5, // 减小分母以增加移动距离\n-           // config: { tension: 200, friction: 30 }, // 调整弹簧配置\n-\n-           x: (clientX - window.innerWidth / 2) / 1, // 减小分母以增加移动距离\n-           y: (clientY - window.innerHeight / 2) / 1, // 减小分母以增加移动距离\n-           config: { tension: 500, friction: 10 }, // 调整弹簧配置\n-        });\n-    }, [api]);\n-\n-    useEffect(() => {\n-        window.addEventListener('mousemove', handleMouseMove);\n-        return () => {\n-            window.removeEventListener('mousemove', handleMouseMove);\n-        };\n-    }, [handleMouseMove]);\n-\n-    return (\n-        <MouseParallaxContext.Provider value={springProps}>\n-            <div style={{ overflow: 'hidden', position: 'relative', width: '110vw', height: '100vh' }}>\n-                {children}\n-            </div>\n-        </MouseParallaxContext.Provider>\n-    );\n-};\n-\n-const ParallaxImage = ({ src, style, index, onLoadComplete }) => {\n-    const springProps = useContext(MouseParallaxContext);\n-\n-    // 设置速度因子\n-    const speedFactor = index < 5 ? 10 : 20; // 减小速度因子以增加移动速度\n-\n-    const trail = useTrail(4, {\n-        opacity: springProps.x.to(x => (x ? 1 : 0)),\n-        transform: springProps.x.to(x => `translateX(${x / speedFactor}px)`), // 根据速度因子调整移动速度\n-        config: { tension: 300, friction: 60 }, // 调整弹簧配置\n-    });\n-\n-    return (\n-        <animated.div\n-            style={{\n-                backgroundSize: 'cover',\n-                width: '100%',\n-                height: '100%',\n-                // position: 'absolute',\n-                // ...style,\n-                // ...trail[index], // 使用 trail 的样式\n-\n-                backgroundImage: 'url($(src})',\n-                backgroundsize:'100%100%',\n-                width: '105%',\n-                height:'108%',\n-                position:'absolute',\n-                marginLeft:'-5%',\n-                left:'0',\n-                top: '-5%',\n-                ...style,\n-                ...trail[index], //使用trail的样式\n-            }}\n-        >\n-            <Image\n-                src={src}\n-                preview={false}\n-                alt={`Parallax ${index}`}\n-                style={{ width: '100%', height: '100%', objectFit: 'cover' }} // 确保图像覆盖整个区域\n-                onLoad={onLoadComplete} // 监听加载完成事件\n-                onError={() => console.error(`Failed to load image: ${src}`)} // 处理加载错误\n-            />\n-        </animated.div>\n-    );\n-};\n-\n-const MouseParallax = ({ onLoadComplete }) => {\n-    const images = [\n-        \"/resources/images/home/1.png\",\n-        \"/resources/images/home/2.png\",\n-        \"/resources/images/home/3.png\",\n-        \"/resources/images/home/4.png\"\n-    ];\n-\n-    const [loadedImages, setLoadedImages] = useState(0);\n-\n-    const handleImageLoad = () => {\n-        setLoadedImages(prev => prev + 1);\n-    };\n-\n-    useEffect(() => {\n-        if (loadedImages === images.length) {\n-            onLoadComplete(); // 所有图像加载完成时调用回调\n-        }\n-    }, [loadedImages, images.length, onLoadComplete]);\n-\n-    return (\n-        <MouseParallaxProvider>\n-            {images.map((src, index) => (\n-                <ParallaxImage key={index} src={src} style={{ zIndex: index + 1 }} index={index} onLoadComplete={handleImageLoad} />\n-            ))}\n-        </MouseParallaxProvider>\n-    );\n-};\n-\n export default MouseParallax;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731252080525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useEffect, useCallback, createContext, useContext } from 'react';\n-import { animated, useSpring } from 'react-spring';\n+import { animated, useSpring, useTrail } from 'react-spring';\n import { Image } from 'antd';\n \n const MouseParallaxContext = createContext();\n \n@@ -11,11 +11,15 @@\n     const handleMouseMove = useCallback((e) => {\n         const { clientX, clientY } = e;\n         setMousePos({ x: clientX, y: clientY });\n         api.start({\n-            x: (clientX - window.innerWidth / 2) / 5, // X 轴移动\n-            y: (clientY - window.innerHeight / 2) / 5, // Y 轴移动\n-            config: { tension: 500, friction: 10 }, // 调整弹簧配置\n+           // x: (clientX - window.innerWidth / 2) / 5, // 减小分母以增加移动距离\n+           // y: (clientY - window.innerHeight / 2) / 5, // 减小分母以增加移动距离\n+           // config: { tension: 200, friction: 30 }, // 调整弹簧配置\n+\n+           x: (clientX - window.innerWidth / 2) / 1, // 减小分母以增加移动距离\n+           y: (clientY - window.innerHeight / 2) / 1, // 减小分母以增加移动距离\n+           config: { tension: 500, friction: 10 }, // 调整弹簧配置\n         });\n     }, [api]);\n \n     useEffect(() => {\n@@ -26,51 +30,85 @@\n     }, [handleMouseMove]);\n \n     return (\n         <MouseParallaxContext.Provider value={springProps}>\n-            <div style={{ overflow: 'hidden', position: 'relative', width: '100vw', height: '100vh' }}>\n+            <div style={{ overflow: 'hidden', position: 'relative', width: '110vw', height: '100vh' }}>\n                 {children}\n             </div>\n         </MouseParallaxContext.Provider>\n     );\n };\n \n-const ParallaxImage = ({ src, index }) => {\n+const ParallaxImage = ({ src, style, index, onLoadComplete }) => {\n     const springProps = useContext(MouseParallaxContext);\n \n+    // 设置速度因子\n+    const speedFactor = index < 5 ? 10 : 20; // 减小速度因子以增加移动速度\n+\n+    const trail = useTrail(4, {\n+        opacity: springProps.x.to(x => (x ? 1 : 0)),\n+        transform: springProps.x.to(x => `translateX(${x / speedFactor}px)`), // 根据速度因子调整移动速度\n+        config: { tension: 300, friction: 60 }, // 调整弹簧配置\n+    });\n+\n     return (\n         <animated.div\n             style={{\n                 backgroundSize: 'cover',\n                 width: '100%',\n                 height: '100%',\n-                backgroundImage: `url(${src})`,\n-                position: 'absolute',\n-                transform: springProps.x.to(x => `translateX(${x}px)`) + springProps.y.to(y => `translateY(${y}px)`), // 应用 Y 轴移动\n+                // position: 'absolute',\n+                // ...style,\n+                // ...trail[index], // 使用 trail 的样式\n+\n+                backgroundImage: 'url($(src})',\n+                backgroundsize:'100%100%',\n+                width: '105%',\n+                height:'108%',\n+                position:'absolute',\n+                marginLeft:'-5%',\n+                left:'0',\n+                top: '-5%',\n+                ...style,\n+                ...trail[index], //使用trail的样式\n             }}\n         >\n             <Image\n                 src={src}\n                 preview={false}\n                 alt={`Parallax ${index}`}\n-                style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n+                style={{ width: '100%', height: '100%', objectFit: 'cover' }} // 确保图像覆盖整个区域\n+                onLoad={onLoadComplete} // 监听加载完成事件\n+                onError={() => console.error(`Failed to load image: ${src}`)} // 处理加载错误\n             />\n         </animated.div>\n     );\n };\n \n-const MouseParallax = () => {\n+const MouseParallax = ({ onLoadComplete }) => {\n     const images = [\n         \"/resources/images/home/1.png\",\n         \"/resources/images/home/2.png\",\n         \"/resources/images/home/3.png\",\n         \"/resources/images/home/4.png\"\n     ];\n \n+    const [loadedImages, setLoadedImages] = useState(0);\n+\n+    const handleImageLoad = () => {\n+        setLoadedImages(prev => prev + 1);\n+    };\n+\n+    useEffect(() => {\n+        if (loadedImages === images.length) {\n+            onLoadComplete(); // 所有图像加载完成时调用回调\n+        }\n+    }, [loadedImages, images.length, onLoadComplete]);\n+\n     return (\n         <MouseParallaxProvider>\n             {images.map((src, index) => (\n-                <ParallaxImage key={index} src={src} index={index} />\n+                <ParallaxImage key={index} src={src} style={{ zIndex: index + 1 }} index={index} onLoadComplete={handleImageLoad} />\n             ))}\n         </MouseParallaxProvider>\n     );\n };\n"
                },
                {
                    "date": 1731252562523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,19 @@\n import React, { useState, useEffect, useCallback, createContext, useContext } from 'react';\n-import { animated, useSpring, useTrail } from 'react-spring';\n+import { animated, useSpring } from 'react-spring';\n import { Image } from 'antd';\n \n const MouseParallaxContext = createContext();\n \n const MouseParallaxProvider = ({ children }) => {\n-    const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\n     const [springProps, api] = useSpring(() => ({ x: 0, y: 0 }));\n \n     const handleMouseMove = useCallback((e) => {\n         const { clientX, clientY } = e;\n-        setMousePos({ x: clientX, y: clientY });\n         api.start({\n-           // x: (clientX - window.innerWidth / 2) / 5, // 减小分母以增加移动距离\n-           // y: (clientY - window.innerHeight / 2) / 5, // 减小分母以增加移动距离\n-           // config: { tension: 200, friction: 30 }, // 调整弹簧配置\n-\n-           x: (clientX - window.innerWidth / 2) / 1, // 减小分母以增加移动距离\n-           y: (clientY - window.innerHeight / 2) / 1, // 减小分母以增加移动距离\n-           config: { tension: 500, friction: 10 }, // 调整弹簧配置\n+            x: (clientX - window.innerWidth / 2) / 5, // X 轴移动\n+            y: (clientY - window.innerHeight / 2) / 5, // Y 轴移动\n+            config: { tension: 500, friction: 10 }, // 调整弹簧配置\n         });\n     }, [api]);\n \n     useEffect(() => {\n@@ -30,85 +24,51 @@\n     }, [handleMouseMove]);\n \n     return (\n         <MouseParallaxContext.Provider value={springProps}>\n-            <div style={{ overflow: 'hidden', position: 'relative', width: '110vw', height: '100vh' }}>\n+            <div style={{ overflow: 'hidden', position: 'relative', width: '100vw', height: '100vh' }}>\n                 {children}\n             </div>\n         </MouseParallaxContext.Provider>\n     );\n };\n \n-const ParallaxImage = ({ src, style, index, onLoadComplete }) => {\n+const ParallaxImage = ({ src, index }) => {\n     const springProps = useContext(MouseParallaxContext);\n \n-    // 设置速度因子\n-    const speedFactor = index < 5 ? 10 : 20; // 减小速度因子以增加移动速度\n-\n-    const trail = useTrail(4, {\n-        opacity: springProps.x.to(x => (x ? 1 : 0)),\n-        transform: springProps.x.to(x => `translateX(${x / speedFactor}px)`), // 根据速度因子调整移动速度\n-        config: { tension: 300, friction: 60 }, // 调整弹簧配置\n-    });\n-\n     return (\n         <animated.div\n             style={{\n                 backgroundSize: 'cover',\n                 width: '100%',\n                 height: '100%',\n-                // position: 'absolute',\n-                // ...style,\n-                // ...trail[index], // 使用 trail 的样式\n-\n-                backgroundImage: 'url($(src})',\n-                backgroundsize:'100%100%',\n-                width: '105%',\n-                height:'108%',\n-                position:'absolute',\n-                marginLeft:'-5%',\n-                left:'0',\n-                top: '-5%',\n-                ...style,\n-                ...trail[index], //使用trail的样式\n+                backgroundImage: `url(${src})`,\n+                position: 'absolute',\n+                transform: springProps.x.to(x => `translateX(${x}px)`) + springProps.y.to(y => `translateY(${y}px)`), // 应用 Y 轴移动\n             }}\n         >\n             <Image\n                 src={src}\n                 preview={false}\n                 alt={`Parallax ${index}`}\n                 style={{ width: '100%', height: '100%', objectFit: 'cover' }} // 确保图像覆盖整个区域\n-                onLoad={onLoadComplete} // 监听加载完成事件\n-                onError={() => console.error(`Failed to load image: ${src}`)} // 处理加载错误\n             />\n         </animated.div>\n     );\n };\n \n-const MouseParallax = ({ onLoadComplete }) => {\n+const MouseParallax = () => {\n     const images = [\n         \"/resources/images/home/1.png\",\n         \"/resources/images/home/2.png\",\n         \"/resources/images/home/3.png\",\n         \"/resources/images/home/4.png\"\n     ];\n \n-    const [loadedImages, setLoadedImages] = useState(0);\n-\n-    const handleImageLoad = () => {\n-        setLoadedImages(prev => prev + 1);\n-    };\n-\n-    useEffect(() => {\n-        if (loadedImages === images.length) {\n-            onLoadComplete(); // 所有图像加载完成时调用回调\n-        }\n-    }, [loadedImages, images.length, onLoadComplete]);\n-\n     return (\n         <MouseParallaxProvider>\n             {images.map((src, index) => (\n-                <ParallaxImage key={index} src={src} style={{ zIndex: index + 1 }} index={index} onLoadComplete={handleImageLoad} />\n+                <ParallaxImage key={index} src={src} index={index} />\n             ))}\n         </MouseParallaxProvider>\n     );\n };\n"
                },
                {
                    "date": 1731252881713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,25 @@\n import React, { useState, useEffect, useCallback, createContext, useContext } from 'react';\n-import { animated, useSpring } from 'react-spring';\n+import { animated, useSpring, useTrail } from 'react-spring';\n import { Image } from 'antd';\n \n const MouseParallaxContext = createContext();\n \n const MouseParallaxProvider = ({ children }) => {\n+    const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\n     const [springProps, api] = useSpring(() => ({ x: 0, y: 0 }));\n \n     const handleMouseMove = useCallback((e) => {\n         const { clientX, clientY } = e;\n+        setMousePos({ x: clientX, y: clientY });\n         api.start({\n-            x: (clientX - window.innerWidth / 2) / 5, // X 轴移动\n-            y: (clientY - window.innerHeight / 2) / 5, // Y 轴移动\n-            config: { tension: 500, friction: 10 }, // 调整弹簧配置\n+           // x: (clientX - window.innerWidth / 2) / 5, // 减小分母以增加移动距离\n+           // y: (clientY - window.innerHeight / 2) / 5, // 减小分母以增加移动距离\n+           // config: { tension: 200, friction: 30 }, // 调整弹簧配置\n+\n+           x: (clientX - window.innerWidth / 2) / 1, // 减小分母以增加移动距离\n+           y: (clientY - window.innerHeight / 2) / 1, // 减小分母以增加移动距离\n+           config: { tension: 500, friction: 10 }, // 调整弹簧配置\n         });\n     }, [api]);\n \n     useEffect(() => {\n@@ -24,51 +30,85 @@\n     }, [handleMouseMove]);\n \n     return (\n         <MouseParallaxContext.Provider value={springProps}>\n-            <div style={{ overflow: 'hidden', position: 'relative', width: '100vw', height: '100vh' }}>\n+            <div style={{ overflow: 'hidden', position: 'relative', width: '110vw', height: '100vh' }}>\n                 {children}\n             </div>\n         </MouseParallaxContext.Provider>\n     );\n };\n \n-const ParallaxImage = ({ src, index }) => {\n+const ParallaxImage = ({ src, style, index, onLoadComplete }) => {\n     const springProps = useContext(MouseParallaxContext);\n \n+    // 设置速度因子\n+    const speedFactor = index < 5 ? 10 : 20; // 减小速度因子以增加移动速度\n+\n+    const trail = useTrail(4, {\n+        opacity: springProps.x.to(x => (x ? 1 : 0)),\n+        transform: springProps.x.to(x => `translateX(${x / speedFactor}px)`)+ springProps.y.to(y => `translateY(${y}px)`), // 根据速度因子调整移动速度\n+        config: { tension: 300, friction: 60 }, // 调整弹簧配置\n+    });\n+\n     return (\n         <animated.div\n             style={{\n                 backgroundSize: 'cover',\n                 width: '100%',\n                 height: '100%',\n-                backgroundImage: `url(${src})`,\n-                position: 'absolute',\n-                transform: springProps.x.to(x => `translateX(${x}px)`) + springProps.y.to(y => `translateY(${y}px)`), // 应用 Y 轴移动\n+                // position: 'absolute',\n+                // ...style,\n+                // ...trail[index], // 使用 trail 的样式\n+\n+                backgroundImage: 'url($(src})',\n+                backgroundsize:'100%100%',\n+                width: '105%',\n+                height:'108%',\n+                position:'absolute',\n+                marginLeft:'-5%',\n+                left:'0',\n+                top: '-5%',\n+                ...style,\n+                ...trail[index], //使用trail的样式\n             }}\n         >\n             <Image\n                 src={src}\n                 preview={false}\n                 alt={`Parallax ${index}`}\n                 style={{ width: '100%', height: '100%', objectFit: 'cover' }} // 确保图像覆盖整个区域\n+                onLoad={onLoadComplete} // 监听加载完成事件\n+                onError={() => console.error(`Failed to load image: ${src}`)} // 处理加载错误\n             />\n         </animated.div>\n     );\n };\n \n-const MouseParallax = () => {\n+const MouseParallax = ({ onLoadComplete }) => {\n     const images = [\n         \"/resources/images/home/1.png\",\n         \"/resources/images/home/2.png\",\n         \"/resources/images/home/3.png\",\n         \"/resources/images/home/4.png\"\n     ];\n \n+    const [loadedImages, setLoadedImages] = useState(0);\n+\n+    const handleImageLoad = () => {\n+        setLoadedImages(prev => prev + 1);\n+    };\n+\n+    useEffect(() => {\n+        if (loadedImages === images.length) {\n+            onLoadComplete(); // 所有图像加载完成时调用回调\n+        }\n+    }, [loadedImages, images.length, onLoadComplete]);\n+\n     return (\n         <MouseParallaxProvider>\n             {images.map((src, index) => (\n-                <ParallaxImage key={index} src={src} index={index} />\n+                <ParallaxImage key={index} src={src} style={{ zIndex: index + 1 }} index={index} onLoadComplete={handleImageLoad} />\n             ))}\n         </MouseParallaxProvider>\n     );\n };\n"
                },
                {
                    "date": 1731256859889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     const speedFactor = index < 5 ? 10 : 20; // 减小速度因子以增加移动速度\n \n     const trail = useTrail(4, {\n         opacity: springProps.x.to(x => (x ? 1 : 0)),\n-        transform: springProps.x.to(x => `translateX(${x / speedFactor}px)`)+ springProps.y.to(y => `translateY(${y}px)`), // 根据速度因子调整移动速度\n+        transform: springProps.x.to(x => `translateX(${x / speedFactor}px)`), // 根据速度因子调整移动速度\n         config: { tension: 300, friction: 60 }, // 调整弹簧配置\n     });\n \n     return (\n"
                }
            ],
            "date": 1731242775991,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useCallback, createContext, useContext } from 'react';\nimport { animated, useSpring, useTrail } from 'react-spring';\nimport { Image } from 'antd';\n\nconst MouseParallaxContext = createContext();\n\nconst MouseParallaxProvider = ({ children }) => {\n    const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\n    const [springProps, api] = useSpring(() => ({ x: 0, y: 0 }));\n\n    const handleMouseMove = useCallback((e) => {\n        const { clientX, clientY } = e;\n        setMousePos({ x: clientX, y: clientY });\n        api.start({\n           // x: (clientX - window.innerWidth / 2) / 5, // 减小分母以增加移动距离\n           // y: (clientY - window.innerHeight / 2) / 5, // 减小分母以增加移动距离\n           // config: { tension: 200, friction: 30 }, // 调整弹簧配置\n\n           x: (clientX - window.innerWidth / 2) / 1, // 减小分母以增加移动距离\n           y: (clientY - window.innerHeight / 2) / 1, // 减小分母以增加移动距离\n           config: { tension: 500, friction: 10 }, // 调整弹簧配置\n        });\n    }, [api]);\n\n    useEffect(() => {\n        window.addEventListener('mousemove', handleMouseMove);\n        return () => {\n            window.removeEventListener('mousemove', handleMouseMove);\n        };\n    }, [handleMouseMove]);\n\n    return (\n        <MouseParallaxContext.Provider value={springProps}>\n            <div style={{ overflow: 'hidden', position: 'relative', width: '100vw', height: '100vh' }}>\n                {children}\n            </div>\n        </MouseParallaxContext.Provider>\n    );\n};\n\nconst ParallaxImage = ({ src, style, index, onLoadComplete }) => {\n    const springProps = useContext(MouseParallaxContext);\n\n    // 设置速度因子\n    const speedFactor = index < 5 ? 10 : 20; // 减小速度因子以增加移动速度\n\n    const trail = useTrail(4, {\n        opacity: springProps.x.to(x => (x ? 1 : 0)),\n        transform: springProps.x.to(x => `translateX(${x / speedFactor}px)`), // 根据速度因子调整移动速度\n        config: { tension: 300, friction: 60 }, // 调整弹簧配置\n    });\n\n    return (\n        <animated.div\n            style={{\n                backgroundSize: 'cover',\n                width: '100%',\n                height: '100%',\n                position: 'absolute',\n                ...style,\n                ...trail[index], // 使用 trail 的样式\n            }}\n        >\n            <Image\n                src={src}\n                preview={false}\n                alt={`Parallax ${index}`}\n                style={{ width: '100%', height: '100%', objectFit: 'cover' }} // 确保图像覆盖整个区域\n                onLoad={onLoadComplete} // 监听加载完成事件\n                onError={() => console.error(`Failed to load image: ${src}`)} // 处理加载错误\n            />\n        </animated.div>\n    );\n};\n\nconst MouseParallax = ({ onLoadComplete }) => {\n    const images = [\n        \"/resources/images/home/1.png\",\n        \"/resources/images/home/2.png\",\n        \"/resources/images/home/3.png\",\n        \"/resources/images/home/4.png\"\n    ];\n\n    const [loadedImages, setLoadedImages] = useState(0);\n\n    const handleImageLoad = () => {\n        setLoadedImages(prev => prev + 1);\n    };\n\n    useEffect(() => {\n        if (loadedImages === images.length) {\n            onLoadComplete(); // 所有图像加载完成时调用回调\n        }\n    }, [loadedImages, images.length, onLoadComplete]);\n\n    return (\n        <MouseParallaxProvider>\n            {images.map((src, index) => (\n                <ParallaxImage key={index} src={src} style={{ zIndex: index + 1 }} index={index} onLoadComplete={handleImageLoad} />\n            ))}\n        </MouseParallaxProvider>\n    );\n};\n\nexport default MouseParallax;"
        }
    ]
}